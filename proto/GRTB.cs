// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gRTB.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from gRTB.proto</summary>
public static partial class GRTBReflection {

  #region Descriptor
  /// <summary>File descriptor for gRTB.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static GRTBReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "CgpnUlRCLnByb3RvIvhcCgpCaWRSZXF1ZXN0EgoKAmlkGAIgAigMEgoKAmlw",
          "GAQgASgMEjoKE3VzZXJfZGF0YV90cmVhdG1lbnQYMSADKA4yHS5CaWRSZXF1",
          "ZXN0LlVzZXJEYXRhVHJlYXRtZW50EhYKDmdvb2dsZV91c2VyX2lkGBUgASgJ",
          "EhYKDmNvb2tpZV92ZXJzaW9uGBQgASgNEhoKEmNvb2tpZV9hZ2Vfc2Vjb25k",
          "cxgfIAEoBRIZChFob3N0ZWRfbWF0Y2hfZGF0YRglIAEoDBISCgp1c2VyX2Fn",
          "ZW50GAYgASgJEhkKEXB1Ymxpc2hlcl9jb3VudHJ5GDcgASgJEhcKD2dlb19j",
          "cml0ZXJpYV9pZBgnIAEoBRITCgtwb3N0YWxfY29kZRghIAEoCRIaChJwb3N0",
          "YWxfY29kZV9wcmVmaXgYIiABKAkSIAoYZW5jcnlwdGVkX2h5cGVybG9jYWxf",
          "c2V0GCggASgMEjEKDmh5cGVybG9jYWxfc2V0GDUgASgLMhkuQmlkUmVxdWVz",
          "dC5IeXBlcmxvY2FsU2V0EhcKD3RpbWV6b25lX29mZnNldBgZIAEoBRIZCg11",
          "c2VyX3ZlcnRpY2FsGB4gAygFQgIQARInCgl1c2VyX2xpc3QYICADKAsyFC5C",
          "aWRSZXF1ZXN0LlVzZXJMaXN0EhQKDHB1Ymxpc2hlcl9pZBg4IAEoCRIZChFz",
          "ZWxsZXJfbmV0d29ya19pZBgpIAEoBRISCgpwYXJ0bmVyX2lkGDQgASgGEgsK",
          "A3VybBgLIAEoCRIUCgxhbm9ueW1vdXNfaWQYEyABKAkSGQoRZGV0ZWN0ZWRf",
          "bGFuZ3VhZ2UYDCADKAkSLwoRZGV0ZWN0ZWRfdmVydGljYWwYDSADKAsyFC5C",
          "aWRSZXF1ZXN0LlZlcnRpY2FsEiIKFmRldGVjdGVkX2NvbnRlbnRfbGFiZWwY",
          "GiADKAVCAhABEhcKD2dvb2dsZV9xdWVyeV9pZBg7IAEoCRI7CgxhdWN0aW9u",
          "X3R5cGUYPCABKA4yFy5CaWRSZXF1ZXN0LkF1Y3Rpb25UeXBlOgxTRUNPTkRf",
          "UFJJQ0USIgoGZGV2aWNlGDYgASgLMhIuQmlkUmVxdWVzdC5EZXZpY2USJwoJ",
          "a2V5X3ZhbHVlGCYgAygLMhQuQmlkUmVxdWVzdC5LZXlWYWx1ZRIiCgZtb2Jp",
          "bGUYHCABKAsyEi5CaWRSZXF1ZXN0Lk1vYmlsZRIgCgV2aWRlbxgdIAEoCzIR",
          "LkJpZFJlcXVlc3QuVmlkZW8SIgoacHVibGlzaGVyX3NldHRpbmdzX2xpc3Rf",
          "aWQYKiABKAYSSQoOcHVibGlzaGVyX3R5cGUYMyABKA4yGS5CaWRSZXF1ZXN0",
          "LlB1Ymxpc2hlclR5cGU6FlVOS05PV05fUFVCTElTSEVSX1RZUEUSIgoGYWRz",
          "bG90GA4gAygLMhIuQmlkUmVxdWVzdC5BZFNsb3QSPgoVYmlkX3Jlc3BvbnNl",
          "X2ZlZWRiYWNrGCwgAygLMh8uQmlkUmVxdWVzdC5CaWRSZXNwb25zZUZlZWRi",
          "YWNrEhwKFHJlc3BvbnNlX2RlYWRsaW5lX21zGDkgASgFEhYKB2lzX3Rlc3QY",
          "DyABKAg6BWZhbHNlEhYKB2lzX3BpbmcYESABKAg6BWZhbHNlEikKGmlzX3By",
          "ZWRpY3RlZF90b19iZV9pZ25vcmVkGC0gASgIOgVmYWxzZRppCgpIeXBlcmxv",
          "Y2FsEi0KB2Nvcm5lcnMYASADKAsyHC5CaWRSZXF1ZXN0Lkh5cGVybG9jYWwu",
          "UG9pbnQaLAoFUG9pbnQSEAoIbGF0aXR1ZGUYASABKAISEQoJbG9uZ2l0dWRl",
          "GAIgASgCGm8KDUh5cGVybG9jYWxTZXQSKgoKaHlwZXJsb2NhbBgBIAMoCzIW",
          "LkJpZFJlcXVlc3QuSHlwZXJsb2NhbBIyCgxjZW50ZXJfcG9pbnQYAiABKAsy",
          "HC5CaWRSZXF1ZXN0Lkh5cGVybG9jYWwuUG9pbnQaKwoIVXNlckxpc3QSCgoC",
          "aWQYASABKAMSEwoLYWdlX3NlY29uZHMYAiABKAUaJgoIVmVydGljYWwSCgoC",
          "aWQYASACKAUSDgoGd2VpZ2h0GAIgAigCGrQFCgZEZXZpY2USQgoLZGV2aWNl",
          "X3R5cGUYASABKA4yHS5CaWRSZXF1ZXN0LkRldmljZS5EZXZpY2VUeXBlOg5V",
          "TktOT1dOX0RFVklDRRISCghwbGF0Zm9ybRgCIAEoCToAEg8KBWJyYW5kGAMg",
          "ASgJOgASDwoFbW9kZWwYBCABKAk6ABIwCgpvc192ZXJzaW9uGAUgASgLMhwu",
          "QmlkUmVxdWVzdC5EZXZpY2UuT3NWZXJzaW9uEhUKCmNhcnJpZXJfaWQYBiAB",
          "KAM6ATASFwoMc2NyZWVuX3dpZHRoGAcgASgFOgEwEhgKDXNjcmVlbl9oZWln",
          "aHQYCCABKAU6ATASJAoZc2NyZWVuX3BpeGVsX3JhdGlvX21pbGxpcxgJIAEo",
          "BToBMBJVChJzY3JlZW5fb3JpZW50YXRpb24YCiABKA4yJC5CaWRSZXF1ZXN0",
          "LkRldmljZS5TY3JlZW5PcmllbnRhdGlvbjoTVU5LTk9XTl9PUklFTlRBVElP",
          "ThIYChBoYXJkd2FyZV92ZXJzaW9uGAsgASgJGkQKCU9zVmVyc2lvbhIRCgVt",
          "YWpvchgBIAEoBToCLTESEQoFbWlub3IYAiABKAU6Ai0xEhEKBW1pY3JvGAMg",
          "ASgFOgItMSKLAQoKRGV2aWNlVHlwZRISCg5VTktOT1dOX0RFVklDRRAAEhEK",
          "DUhJR0hFTkRfUEhPTkUQARIKCgZUQUJMRVQQAhIVChFQRVJTT05BTF9DT01Q",
          "VVRFUhADEhAKDENPTk5FQ1RFRF9UVhAEEhAKDEdBTUVfQ09OU09MRRAFEg8K",
          "C1NFVF9UT1BfQk9YEAYiSQoRU2NyZWVuT3JpZW50YXRpb24SFwoTVU5LTk9X",
          "Tl9PUklFTlRBVElPThAAEgwKCFBPUlRSQUlUEAESDQoJTEFORFNDQVBFEAIa",
          "JgoIS2V5VmFsdWUSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJGsYECgZN",
          "b2JpbGUSFQoGaXNfYXBwGAcgASgIOgVmYWxzZRIOCgZhcHBfaWQYBiABKAkS",
          "JgoXaXNfaW50ZXJzdGl0aWFsX3JlcXVlc3QYCiABKAg6BWZhbHNlEhgKEGFw",
          "cF9jYXRlZ29yeV9pZHMYCyADKAUSJgoXaXNfbW9iaWxlX3dlYl9vcHRpbWl6",
          "ZWQYESABKAg6BWZhbHNlEiAKGGVuY3J5cHRlZF9hZHZlcnRpc2luZ19pZBgU",
          "IAEoDBIWCg5hZHZlcnRpc2luZ19pZBgbIAEoDBIdChVlbmNyeXB0ZWRfaGFz",
          "aGVkX2lkZmEYFSABKAwSEwoLaGFzaGVkX2lkZmEYHCABKAwSEAoIYXBwX25h",
          "bWUYGCABKAkSEgoKYXBwX3JhdGluZxgZIAEoAhI2Cg1pbnN0YWxsZWRfc2Rr",
          "GCAgAygLMh8uQmlkUmVxdWVzdC5Nb2JpbGUuSW5zdGFsbGVkU2RrGt4BCgxJ",
          "bnN0YWxsZWRTZGsSCgoCaWQYASABKAkSPAoLc2RrX3ZlcnNpb24YAiABKAsy",
          "Jy5CaWRSZXF1ZXN0Lk1vYmlsZS5JbnN0YWxsZWRTZGsuVmVyc2lvbhJACg9h",
          "ZGFwdGVyX3ZlcnNpb24YAyABKAsyJy5CaWRSZXF1ZXN0Lk1vYmlsZS5JbnN0",
          "YWxsZWRTZGsuVmVyc2lvbhpCCgdWZXJzaW9uEhEKBW1ham9yGAEgASgFOgIt",
          "MRIRCgVtaW5vchgCIAEoBToCLTESEQoFbWljcm8YAyABKAU6Ai0xGpoSCgVW",
          "aWRlbxJBCglwbGFjZW1lbnQYECABKA4yGy5CaWRSZXF1ZXN0LlZpZGVvLlBs",
          "YWNlbWVudDoRVU5LTk9XTl9QTEFDRU1FTlQSFwoPZGVzY3JpcHRpb25fdXJs",
          "GAogASgJEiIKE2lzX2VtYmVkZGVkX29mZnNpdGUYCyABKAg6BWZhbHNlEk4K",
          "D3BsYXliYWNrX21ldGhvZBgOIAEoDjIlLkJpZFJlcXVlc3QuVmlkZW8uVmlk",
          "ZW9QbGF5YmFja01ldGhvZDoOTUVUSE9EX1VOS05PV04SFAoMaXNfY2xpY2th",
          "YmxlGA8gASgIEhsKE3ZpZGVvYWRfc3RhcnRfZGVsYXkYASABKAUSFwoPbWF4",
          "X2FkX2R1cmF0aW9uGAIgASgFEhcKD21pbl9hZF9kdXJhdGlvbhgIIAEoBRIW",
          "Cg5tYXhfYWRzX2luX3BvZBgMIAEoBRJWChJ2aWRlb19hZF9za2lwcGFibGUY",
          "BCABKA4yKS5CaWRSZXF1ZXN0LlZpZGVvLlNraXBwYWJsZUJpZFJlcXVlc3RU",
          "eXBlOg9BTExPV19TS0lQUEFCTEUSIQoZc2tpcHBhYmxlX21heF9hZF9kdXJh",
          "dGlvbhgFIAEoBRI2Cglwcm90b2NvbHMYESADKA4yHy5CaWRSZXF1ZXN0LlZp",
          "ZGVvLlZpZGVvUHJvdG9jb2xCAhABEjwKFWFsbG93ZWRfdmlkZW9fZm9ybWF0",
          "cxgGIAMoDjIdLkJpZFJlcXVlc3QuVmlkZW8uVmlkZW9Gb3JtYXQSNwoOY29t",
          "cGFuaW9uX3Nsb3QYByADKAsyHy5CaWRSZXF1ZXN0LlZpZGVvLkNvbXBhbmlv",
          "blNsb3QSTQoPZW5kX2NhcF9zdXBwb3J0GA0gASgOMh8uQmlkUmVxdWVzdC5W",
          "aWRlby5FbmRDYXBTdXBwb3J0OhNFTkRfQ0FQX05PVF9FTkFCTEVEEj8KEmNv",
          "bnRlbnRfYXR0cmlidXRlcxgJIAEoCzIjLkJpZFJlcXVlc3QuVmlkZW8uQ29u",
          "dGVudEF0dHJpYnV0ZXMSTQoZREVQUkVDQVRFRF9pbnZlbnRvcnlfdHlwZRgD",
          "IAEoDjIfLkJpZFJlcXVlc3QuVmlkZW8uSW52ZW50b3J5VHlwZToJV0VCX1ZJ",
          "REVPEhwKDWlzX2xpdmVzdHJlYW0YEiABKAg6BWZhbHNlGvIBCg1Db21wYW5p",
          "b25TbG90EhIKBmhlaWdodBgBIAMoBUICEAESEQoFd2lkdGgYAiADKAVCAhAB",
          "EkcKD2NyZWF0aXZlX2Zvcm1hdBgDIAMoDjIuLkJpZFJlcXVlc3QuVmlkZW8u",
          "Q29tcGFuaW9uU2xvdC5DcmVhdGl2ZUZvcm1hdCJxCg5DcmVhdGl2ZUZvcm1h",
          "dBIkChdVTktOT1dOX0NSRUFUSVZFX0ZPUk1BVBD///////////8BEhIKDklN",
          "QUdFX0NSRUFUSVZFEAASEgoORkxBU0hfQ1JFQVRJVkUQARIRCg1IVE1MX0NS",
          "RUFUSVZFEAIaTgoRQ29udGVudEF0dHJpYnV0ZXMSDQoFdGl0bGUYASABKAkS",
          "GAoQZHVyYXRpb25fc2Vjb25kcxgCIAEoBRIQCghrZXl3b3JkcxgDIAMoCSJq",
          "CglQbGFjZW1lbnQSFQoRVU5LTk9XTl9QTEFDRU1FTlQQABIMCghJTlNUUkVB",
          "TRABEhAKDElOVEVSU1RJVElBTBACEgsKB0lOX0ZFRUQQAxIJCgVBVURJTxAE",
          "Eg4KCklOX0FSVElDTEUQBSLWAQoTVmlkZW9QbGF5YmFja01ldGhvZBISCg5N",
          "RVRIT0RfVU5LTk9XThAAEhYKEkFVVE9fUExBWV9TT1VORF9PThABEhcKE0FV",
          "VE9fUExBWV9TT1VORF9PRkYQAhIRCg1DTElDS19UT19QTEFZEAMSDgoKTU9V",
          "U0VfT1ZFUhAEEioKJklOSVRJQVRFX09OX0VOVEVSSU5HX1ZJRVdQT1JUX1NP",
          "VU5EX09OEAUSKwonSU5JVElBVEVfT05fRU5URVJJTkdfVklFV1BPUlRfU09V",
          "TkRfT0ZGEAYiWgoXU2tpcHBhYmxlQmlkUmVxdWVzdFR5cGUSEwoPQUxMT1df",
          "U0tJUFBBQkxFEAASFQoRUkVRVUlSRV9TS0lQUEFCTEUQARITCg9CTE9DS19T",
          "S0lQUEFCTEUQAiLhAQoNVmlkZW9Qcm90b2NvbBIaChZVTktOT1dOX1ZJREVP",
          "X1BST1RPQ09MEAASDAoIVkFTVF8xXzAQARIMCghWQVNUXzJfMBACEgwKCFZB",
          "U1RfM18wEAMSFAoQVkFTVF8xXzBfV1JBUFBFUhAEEhQKEFZBU1RfMl8wX1dS",
          "QVBQRVIQBRIUChBWQVNUXzNfMF9XUkFQUEVSEAYSDAoIVkFTVF80XzAQBxIU",
          "ChBWQVNUXzRfMF9XUkFQUEVSEAgSDQoJREFBU1RfMV8wEAkSFQoRREFBU1Rf",
          "MV8wX1dSQVBQRVIQCiKLAgoLVmlkZW9Gb3JtYXQSIQoUVU5LTk9XTl9WSURF",
          "T19GT1JNQVQQ////////////ARINCglWSURFT19GTFYQABINCglWSURFT19N",
          "UDQQARINCglZVF9IT1NURUQQAhIPCgtWUEFJRF9GTEFTSBADEgwKCFZQQUlE",
          "X0pTEAQSDQoJQVVESU9fTVAzEAUSDQoJQVVESU9fT0dHEAYSEQoNQVVESU9f",
          "TVAzX09HRxAHEg4KClZJREVPX1dFQk0QCBINCglWSURFT19NT1YQCRIOCgpW",
          "SURFT18zR1BQEAoSDQoJVklERU9fSExTEAsSDgoKVklERU9fREFTSBAMEg4K",
          "CkFVRElPX01QNEEQDSJrCg1FbmRDYXBTdXBwb3J0EhcKE0VORF9DQVBfTk9U",
          "X0VOQUJMRUQQABIUChBFTkRfQ0FQX09QVElPTkFMEAESFQoRRU5EX0NBUF9G",
          "T1JCSURERU4QAhIUChBFTkRfQ0FQX1JFUVVJUkVEEAMiWAoNSW52ZW50b3J5",
          "VHlwZRINCglXRUJfVklERU8QABIJCgVHQU1FUxABEhcKE01PQklMRV9JTlRF",
          "UlNUSVRJQUwQAhIUChBNT0JJTEVfQVBQX1ZJREVPEAMa1y8KBkFkU2xvdBIK",
          "CgJpZBgBIAIoBRIUCgxhZF9ibG9ja19rZXkYDiABKAQSGgoSdGFyZ2V0YWJs",
          "ZV9jaGFubmVsGAogAygJEg0KBXdpZHRoGAIgAygFEg4KBmhlaWdodBgDIAMo",
          "BRJLChhmbGV4aWJsZV9hZHNsb3Rfc2V0dGluZ3MYMiABKAsyKS5CaWRSZXF1",
          "ZXN0LkFkU2xvdC5GbGV4aWJsZUFkU2xvdFNldHRpbmdzEh4KEmV4Y2x1ZGVk",
          "X2F0dHJpYnV0ZRgEIAMoBUICEAESHwoTYWxsb3dlZF92ZW5kb3JfdHlwZRgG",
          "IAMoBUICEAESUwocY29uc2VudGVkX3Byb3ZpZGVyc19zZXR0aW5ncxgqIAEo",
          "CzItLkJpZFJlcXVlc3QuQWRTbG90LkNvbnNlbnRlZFByb3ZpZGVyc1NldHRp",
          "bmdzEhEKCXJlZ3NfZ2RwchgrIAEoCBInChtleGNsdWRlZF9zZW5zaXRpdmVf",
          "Y2F0ZWdvcnkYByADKAVCAhABEicKG2FsbG93ZWRfcmVzdHJpY3RlZF9jYXRl",
          "Z29yeRgQIAMoBUICEAESMQolYWxsb3dlZF9yZXN0cmljdGVkX2NhdGVnb3J5",
          "X2Zvcl9kZWFscxgWIAMoBUICEAESGQoRYWxsb3dlZF9sYW5ndWFnZXMYGyAD",
          "KAkSJQoZZXhjbHVkZWRfcHJvZHVjdF9jYXRlZ29yeRgNIAMoBUICEAESPwoS",
          "ZXhjbHVkZWRfY3JlYXRpdmVzGBIgAygLMiMuQmlkUmVxdWVzdC5BZFNsb3Qu",
          "RXhjbHVkZWRDcmVhdGl2ZRIfChdvbmx5X2RlYWxfYmlkc19hY2NlcHRlZBgx",
          "IAEoCBI7ChBtYXRjaGluZ19hZF9kYXRhGAkgAygLMiEuQmlkUmVxdWVzdC5B",
          "ZFNsb3QuTWF0Y2hpbmdBZERhdGESIgoacHVibGlzaGVyX3NldHRpbmdzX2xp",
          "c3RfaWQYDyADKAYSPAoQZXhjaGFuZ2VfYmlkZGluZxgcIAEoCzIiLkJpZFJl",
          "cXVlc3QuQWRTbG90LkV4Y2hhbmdlQmlkZGluZxI0CgxvcGVuX2JpZGRpbmcY",
          "NSABKAsyHi5CaWRSZXF1ZXN0LkFkU2xvdC5PcGVuQmlkZGluZxIYChBkZnBf",
          "YWRfdW5pdF9jb2RlGCEgASgJEkgKD3Nsb3RfdmlzaWJpbGl0eRgMIAEoDjIh",
          "LkJpZFJlcXVlc3QuQWRTbG90LlNsb3RWaXNpYmlsaXR5OgxOT19ERVRFQ1RJ",
          "T04SFwoLdmlld2FiaWxpdHkYFSABKAU6Ai0xEh4KEmNsaWNrX3Rocm91Z2hf",
          "cmF0ZRgZIAEoAjoCLTESIQoVdmlkZW9fY29tcGxldGlvbl9yYXRlGB4gASgC",
          "OgItMRJOCg5pZnJhbWluZ19zdGF0ZRgTIAEoDjIgLkJpZFJlcXVlc3QuQWRT",
          "bG90LklGcmFtaW5nU3RhdGU6FFVOS05PV05fSUZSQU1FX1NUQVRFEk4KDmlm",
          "cmFtaW5nX2RlcHRoGBQgASgOMiAuQmlkUmVxdWVzdC5BZFNsb3QuSUZyYW1p",
          "bmdEZXB0aDoUVU5LTk9XTl9JRlJBTUVfREVQVEgSPwoSbmF0aXZlX2FkX3Rl",
          "bXBsYXRlGDMgAygLMiMuQmlkUmVxdWVzdC5BZFNsb3QuTmF0aXZlQWRUZW1w",
          "bGF0ZRJYChVuYXRpdmVfcGxhY2VtZW50X3R5cGUYLSABKA4yJi5CaWRSZXF1",
          "ZXN0LkFkU2xvdC5OYXRpdmVQbGFjZW1lbnRUeXBlOhFQTEFDRU1FTlRfVU5L",
          "Tk9XThJFChBtZWRpYXRpb25fc3RhdHVzGDQgASgOMiIuQmlkUmVxdWVzdC5B",
          "ZFNsb3QuTWVkaWF0aW9uU3RhdHVzOgdVTktOT1dOEjQKDGF1dG9fcmVmcmVz",
          "aBgXIAEoCzIeLkJpZFJlcXVlc3QuQWRTbG90LkF1dG9SZWZyZXNoEjoKD3N0",
          "aWNreV9zZXR0aW5ncxgfIAEoCzIhLkJpZFJlcXVlc3QuQWRTbG90LlN0aWNr",
          "eVNldHRpbmdzElcKF25vbl9icm93c2VyX3Nsb3Rfc291cmNlGCIgASgOMiMu",
          "QmlkUmVxdWVzdC5BZFNsb3QuTm9uQnJvd3NlclNvdXJjZToRVU5ERUNMQVJF",
          "RF9TT1VSQ0USPwoIcmVuZGVyZXIYGiABKA4yGy5CaWRSZXF1ZXN0LkFkU2xv",
          "dC5SZW5kZXJlcjoQVU5LTk9XTl9SRU5ERVJFUhJOChNhbXBfYWRfcmVxdWVz",
          "dF90eXBlGB0gASgOMiMuQmlkUmVxdWVzdC5BZFNsb3QuQW1wQWRSZXF1ZXN0",
          "VHlwZToMTk9OX0FNUF9QQUdFEi8KC2lzX2FtcF9wYWdlGCYgASgOMhouQmlk",
          "UmVxdWVzdC5BZFNsb3QuQW1wUGFnZRJIChdhbXBfYWRfcmVxdWlyZW1lbnRf",
          "dHlwZRgnIAEoDjInLkJpZFJlcXVlc3QuQWRTbG90LkFtcEFkUmVxdWlyZW1l",
          "bnRUeXBlEhoKC2lzX3Jld2FyZGVkGCAgASgIOgVmYWxzZRI+ChBhbGxvd2Vk",
          "X2FkX3R5cGVzGCQgAygOMiAuQmlkUmVxdWVzdC5BZFNsb3QuQWxsb3dlZEFk",
          "VHlwZUICEAESGQoNc2Vzc2lvbl9kZXB0aBgoIAEoBToCLTESUgocYnV5ZXJf",
          "Z2VuZXJhdGVkX3JlcXVlc3RfZGF0YRgpIAMoCzIsLkJpZFJlcXVlc3QuQWRT",
          "bG90LkJ1eWVyR2VuZXJhdGVkUmVxdWVzdERhdGEaZgoWRmxleGlibGVBZFNs",
          "b3RTZXR0aW5ncxIRCgltYXhfd2lkdGgYASABKAUSEgoKbWF4X2hlaWdodBgC",
          "IAEoBRIRCgltaW5fd2lkdGgYAyABKAUSEgoKbWluX2hlaWdodBgEIAEoBRo9",
          "ChpDb25zZW50ZWRQcm92aWRlcnNTZXR0aW5ncxIfChNjb25zZW50ZWRfcHJv",
          "dmlkZXJzGAIgAygDQgIQARotChBFeGNsdWRlZENyZWF0aXZlEhkKEWJ1eWVy",
          "X2NyZWF0aXZlX2lkGAEgASgJGsAGCg5NYXRjaGluZ0FkRGF0YRIWCgpiaWxs",
          "aW5nX2lkGAIgAygDQgIQABIaChJtaW5pbXVtX2NwbV9taWNyb3MYBSABKAMS",
          "UwoXREVQUkVDQVRFRF9wcmljaW5nX3J1bGUYByADKAsyMi5CaWRSZXF1ZXN0",
          "LkFkU2xvdC5NYXRjaGluZ0FkRGF0YS5CdXllclByaWNpbmdSdWxlEkEKC2Rp",
          "cmVjdF9kZWFsGAYgAygLMiwuQmlkUmVxdWVzdC5BZFNsb3QuTWF0Y2hpbmdB",
          "ZERhdGEuRGlyZWN0RGVhbBqxAQoQQnV5ZXJQcmljaW5nUnVsZRIcChRpbmNs",
          "dWRlZF9hZHZlcnRpc2VycxgBIAMoAxIcChRleGNsdWRlZF9hZHZlcnRpc2Vy",
          "cxgCIAMoAxIZChFpbmNsdWRlZF9hZ2VuY2llcxgDIAMoAxIZChFleGNsdWRl",
          "ZF9hZ2VuY2llcxgEIAMoAxIPCgdibG9ja2VkGAUgASgIEhoKEm1pbmltdW1f",
          "Y3BtX21pY3JvcxgGIAEoAxqtAwoKRGlyZWN0RGVhbBIWCg5kaXJlY3RfZGVh",
          "bF9pZBgBIAEoAxIYChBmaXhlZF9jcG1fbWljcm9zGAIgASgDElsKCWRlYWxf",
          "dHlwZRgDIAEoDjI1LkJpZFJlcXVlc3QuQWRTbG90Lk1hdGNoaW5nQWREYXRh",
          "LkRpcmVjdERlYWwuRGVhbFR5cGU6EVVOS05PV05fREVBTF9UWVBFEioKG3B1",
          "Ymxpc2hlcl9ibG9ja3Nfb3ZlcnJpZGRlbhgEIAEoCDoFZmFsc2USLwonREVQ",
          "UkVDQVRFRF9yZW1haW5pbmdfaW1wcmVzc2lvbnNfdG9fYnV5GAYgASgDEh0K",
          "Dm11c3RfYmlkX2xldmVsGAcgASgBOgExQgIYARIWCghtdXN0X2JpZBgJIAEo",
          "CDoEdHJ1ZSJ8CghEZWFsVHlwZRIVChFVTktOT1dOX0RFQUxfVFlQRRAAEhIK",
          "DlBSRUZFUlJFRF9ERUFMEAESEwoPUFJJVkFURV9BVUNUSU9OEAISGwoXUFJP",
          "R1JBTU1BVElDX0dVQVJBTlRFRUQQAxITCg9BVUNUSU9OX1BBQ0tBR0UQBBpX",
          "Cg9FeGNoYW5nZUJpZGRpbmcSGwoTcHVibGlzaGVyX3BhcmFtZXRlchgBIAMo",
          "CRInCglrZXlfdmFsdWUYAyADKAsyFC5CaWRSZXF1ZXN0LktleVZhbHVlGiYK",
          "C09wZW5CaWRkaW5nEhcKD2lzX29wZW5fYmlkZGluZxgCIAEoCBqOBgoQTmF0",
          "aXZlQWRUZW1wbGF0ZRIXCg9yZXF1aXJlZF9maWVsZHMYASABKAMSGgoScmVj",
          "b21tZW5kZWRfZmllbGRzGAIgASgDEiAKGGhlYWRsaW5lX21heF9zYWZlX2xl",
          "bmd0aBgDIAEoBRIcChRib2R5X21heF9zYWZlX2xlbmd0aBgEIAEoBRImCh5j",
          "YWxsX3RvX2FjdGlvbl9tYXhfc2FmZV9sZW5ndGgYBSABKAUSIgoaYWR2ZXJ0",
          "aXNlcl9tYXhfc2FmZV9sZW5ndGgYBiABKAUSKAogREVQUkVDQVRFRF9zdG9y",
          "ZV9tYXhfc2FmZV9sZW5ndGgYDiABKAUSHQoVcHJpY2VfbWF4X3NhZmVfbGVu",
          "Z3RoGA8gASgFEhMKC2ltYWdlX3dpZHRoGAcgASgFEhQKDGltYWdlX2hlaWdo",
          "dBgIIAEoBRISCgpsb2dvX3dpZHRoGAkgASgFEhMKC2xvZ29faGVpZ2h0GAog",
          "ASgFEhYKDmFwcF9pY29uX3dpZHRoGAsgASgFEhcKD2FwcF9pY29uX2hlaWdo",
          "dBgMIAEoBRIQCghzdHlsZV9pZBgQIAEoBRJQChFzdHlsZV9sYXlvdXRfdHlw",
          "ZRgRIAEoDjIuLkJpZFJlcXVlc3QuQWRTbG90Lk5hdGl2ZUFkVGVtcGxhdGUu",
          "TGF5b3V0VHlwZToFUElYRUwSFAoMc3R5bGVfaGVpZ2h0GBIgASgFEhMKC3N0",
          "eWxlX3dpZHRoGBMgASgFIrcBCgZGaWVsZHMSDQoJTk9fRklFTERTEAASDAoI",
          "SEVBRExJTkUQARIICgRCT0RZEAISEgoOQ0FMTF9UT19BQ1RJT04QBBIOCgpB",
          "RFZFUlRJU0VSEAgSCQoFSU1BR0UQEBIICgRMT0dPECASDAoIQVBQX0lDT04Q",
          "QBIQCgtTVEFSX1JBVElORxCAARIKCgVQUklDRRCAAhIVChBERVBSRUNBVEVE",
          "X1NUT1JFEIAEEgoKBVZJREVPEIAIIiIKCkxheW91dFR5cGUSCQoFUElYRUwQ",
          "ABIJCgVGTFVJRBABGoADCgtBdXRvUmVmcmVzaBJMChByZWZyZXNoX3NldHRp",
          "bmdzGAEgAygLMjIuQmlkUmVxdWVzdC5BZFNsb3QuQXV0b1JlZnJlc2guQXV0",
          "b1JlZnJlc2hTZXR0aW5ncxIYCg1yZWZyZXNoX2NvdW50GAIgASgFOgEwGogC",
          "ChNBdXRvUmVmcmVzaFNldHRpbmdzEnMKDHJlZnJlc2hfdHlwZRgBIAEoDjJC",
          "LkJpZFJlcXVlc3QuQWRTbG90LkF1dG9SZWZyZXNoLkF1dG9SZWZyZXNoU2V0",
          "dGluZ3MuQXV0b1JlZnJlc2hUeXBlOhlVTktOT1dOX0FVVE9fUkVGUkVTSF9U",
          "WVBFEiQKHG1pbl9yZWZyZXNoX2ludGVydmFsX3NlY29uZHMYAiABKAUiVgoP",
          "QXV0b1JlZnJlc2hUeXBlEh0KGVVOS05PV05fQVVUT19SRUZSRVNIX1RZUEUQ",
          "ABIPCgtVU0VSX0FDVElPThABEgkKBUVWRU5UEAISCAoEVElNRRADGvECCg5T",
          "dGlja3lTZXR0aW5ncxJdChN2ZXJ0aWNhbF9zdGlja2luZXNzGAEgASgOMiwu",
          "QmlkUmVxdWVzdC5BZFNsb3QuU3RpY2t5U2V0dGluZ3MuU3RpY2tpbmVzczoS",
          "VU5LTk9XTl9TVElDS0lORVNTEmMKGXRvcF9ob3Jpem9udGFsX3N0aWNraW5l",
          "c3MYAiABKA4yLC5CaWRSZXF1ZXN0LkFkU2xvdC5TdGlja3lTZXR0aW5ncy5T",
          "dGlja2luZXNzOhJVTktOT1dOX1NUSUNLSU5FU1MSZgocYm90dG9tX2hvcml6",
          "b250YWxfc3RpY2tpbmVzcxgDIAEoDjIsLkJpZFJlcXVlc3QuQWRTbG90LlN0",
          "aWNreVNldHRpbmdzLlN0aWNraW5lc3M6ElVOS05PV05fU1RJQ0tJTkVTUyIz",
          "CgpTdGlja2luZXNzEhYKElVOS05PV05fU1RJQ0tJTkVTUxAAEg0KCUlTX1NU",
          "SUNLWRABGpoBChlCdXllckdlbmVyYXRlZFJlcXVlc3REYXRhEkwKCnNvdXJj",
          "ZV9hcHAYASABKAsyNi5CaWRSZXF1ZXN0LkFkU2xvdC5CdXllckdlbmVyYXRl",
          "ZFJlcXVlc3REYXRhLlNvdXJjZUFwcEgAEgwKBGRhdGEYAiABKAkaFwoJU291",
          "cmNlQXBwEgoKAmlkGAEgASgJQggKBnNvdXJjZSJKCg5TbG90VmlzaWJpbGl0",
          "eRIQCgxOT19ERVRFQ1RJT04QABISCg5BQk9WRV9USEVfRk9MRBABEhIKDkJF",
          "TE9XX1RIRV9GT0xEEAIiaQoNSUZyYW1pbmdTdGF0ZRIYChRVTktOT1dOX0lG",
          "UkFNRV9TVEFURRAAEg0KCU5PX0lGUkFNRRABEhYKElNBTUVfRE9NQUlOX0lG",
          "UkFNRRACEhcKE0NST1NTX0RPTUFJTl9JRlJBTUUQAyJhCg1JRnJhbWluZ0Rl",
          "cHRoEhgKFFVOS05PV05fSUZSQU1FX0RFUFRIEAASEQoNTk9UX0lOX0lGUkFN",
          "RRABEg4KCk9ORV9JRlJBTUUQAhITCg9NVUxUSVBMRV9JRlJBTUUQAyKTAQoT",
          "TmF0aXZlUGxhY2VtZW50VHlwZRIVChFQTEFDRU1FTlRfVU5LTk9XThAAEhUK",
          "EVBMQUNFTUVOVF9JTl9GRUVEEAESGQoVUExBQ0VNRU5UX0FUT01JQ19VTklU",
          "EAISFQoRUExBQ0VNRU5UX09VVFNJREUQAxIcChhQTEFDRU1FTlRfUkVDT01N",
          "RU5EQVRJT04QBCIyCg9NZWRpYXRpb25TdGF0dXMSCwoHVU5LTk9XThAAEhIK",
          "DkRJUkVDVF9SRVFVRVNUEAEiOgoQTm9uQnJvd3NlclNvdXJjZRIVChFVTkRF",
          "Q0xBUkVEX1NPVVJDRRAAEg8KC0RFU0tUT1BfQVBQEAEiOwoIUmVuZGVyZXIS",
          "FAoQVU5LTk9XTl9SRU5ERVJFUhAAEgoKBkdPT0dMRRABEg0KCVBVQkxJU0hF",
          "UhACIlAKEEFtcEFkUmVxdWVzdFR5cGUSDwoLVU5LTk9XTl9BTVAQABIQCgxO",
          "T05fQU1QX1BBR0UQARIZChVBTVBfUEFHRV9MQVRFX1JFUVVFU1QQAiJHCgdB",
          "bXBQYWdlEhQKEFVOS05PV05fQU1QX1BBR0UQABIQCgxESUFMRUNUX0hUTUwQ",
          "ARIUChBESUFMRUNUX0hUTUxfQU1QEAIiugEKFEFtcEFkUmVxdWlyZW1lbnRU",
          "eXBlEiMKH1VOS05PV05fQU1QX0FEX1JFUVVJUkVNRU5UX1RZUEUQABIWChJB",
          "TVBfQURfTk9UX0FMTE9XRUQQARIpCiVBTVBfQURfQUxMT1dFRF9BTkRfTk9U",
          "X0VBUkxZX1JFTkRFUkVEEAISJQohQU1QX0FEX0FMTE9XRURfQU5EX0VBUkxZ",
          "X1JFTkRFUkVEEAMSEwoPQU1QX0FEX1JFUVVJUkVEEAQiowEKDUFsbG93ZWRB",
          "ZFR5cGUSJAoXVU5LTk9XTl9BTExPV0VEX0FEX1RZUEUQ////////////ARIa",
          "ChZBTExPV0VEX0FEX1RZUEVfQkFOTkVSEAASGgoWQUxMT1dFRF9BRF9UWVBF",
          "X05BVElWRRABEhkKFUFMTE9XRURfQURfVFlQRV9WSURFTxACEhkKFUFMTE9X",
          "RURfQURfVFlQRV9BVURJTxADGoMCChNCaWRSZXNwb25zZUZlZWRiYWNrEhIK",
          "CnJlcXVlc3RfaWQYASABKAwSFgoOY3JlYXRpdmVfaW5kZXgYAiABKAUSHAoU",
          "Y3JlYXRpdmVfc3RhdHVzX2NvZGUYAyABKAUSEgoKY3BtX21pY3JvcxgEIAEo",
          "AxIaChJtaW5pbXVtX2JpZF90b193aW4YByABKAMSNQotc2FtcGxlZF9tZWRp",
          "YXRpb25fY3BtX2FoZWFkX29mX2F1Y3Rpb25fd2lubmVyGAogASgDEiAKGGV2",
          "ZW50X25vdGlmaWNhdGlvbl90b2tlbhgFIAEoDBIZChFidXllcl9jcmVhdGl2",
          "ZV9pZBgGIAEoCSI5ChFVc2VyRGF0YVRyZWF0bWVudBIkCiBUQUdfRk9SX0NI",
          "SUxEX0RJUkVDVEVEX1RSRUFUTUVOVBAAIlsKC0F1Y3Rpb25UeXBlEhgKFFVO",
          "S05PV05fQVVDVElPTl9UWVBFEAASDwoLRklSU1RfUFJJQ0UQARIQCgxTRUNP",
          "TkRfUFJJQ0UQAhIPCgtGSVhFRF9QUklDRRADIogBCg1QdWJsaXNoZXJUeXBl",
          "EhoKFlVOS05PV05fUFVCTElTSEVSX1RZUEUQABIkCiBBRFhfUFVCTElTSEVS",
          "X09XTkVEX0FORF9PUEVSQVRFRBABEh0KGUFEWF9QVUJMSVNIRVJfUkVQUkVT",
          "RU5URUQQAhIWChJHT09HTEVfUkVQUkVTRU5URUQQAyLhDgoLQmlkUmVzcG9u",
          "c2USGwoCYWQYAiADKAsyDy5CaWRSZXNwb25zZS5BZBIUCgxkZWJ1Z19zdHJp",
          "bmcYBSABKAkSGgoScHJvY2Vzc2luZ190aW1lX21zGAQgASgFGoIOCgJBZBIg",
          "ChhldmVudF9ub3RpZmljYXRpb25fdG9rZW4YGSABKAwSGQoRYnV5ZXJfY3Jl",
          "YXRpdmVfaWQYCiABKAkSFAoMaHRtbF9zbmlwcGV0GAEgASgJEhEKCXZpZGVv",
          "X3VybBgJIAEoCRIWCg52aWRlb192YXN0X3htbBgYIAEoCRISCgphbXBfYWRf",
          "dXJsGBcgASgJEisKCW5hdGl2ZV9hZBgSIAEoCzIYLkJpZFJlc3BvbnNlLkFk",
          "Lk5hdGl2ZUFkEhkKEWNsaWNrX3Rocm91Z2hfdXJsGAQgAygJEhMKC3ZlbmRv",
          "cl90eXBlGAUgAygFEhEKCWF0dHJpYnV0ZRgGIAMoBRIQCghjYXRlZ29yeRgH",
          "IAMoBRIbChNyZXN0cmljdGVkX2NhdGVnb3J5GBEgAygFEhcKD2FkdmVydGlz",
          "ZXJfbmFtZRgLIAMoCRITCgtiaWRkZXJfbmFtZRgWIAEoCRINCgV3aWR0aBgO",
          "IAEoBRIOCgZoZWlnaHQYDyABKAUSEQoJYWdlbmN5X2lkGBAgASgDEiYKBmFk",
          "c2xvdBgDIAMoCzIWLkJpZFJlc3BvbnNlLkFkLkFkU2xvdBIfChdpbXByZXNz",
          "aW9uX3RyYWNraW5nX3VybBgTIAMoCRIiChphZF9jaG9pY2VzX2Rlc3RpbmF0",
          "aW9uX3VybBgVIAEoCRJQChxpbXByZXNzaW9uX3RyYWNraW5nX3Jlc291cmNl",
          "GBogAygLMiouQmlkUmVzcG9uc2UuQWQuSW1wcmVzc2lvblRyYWNraW5nUmVz",
          "b3VyY2USNgoPc2RrX3JlbmRlcmVkX2FkGBsgASgLMh0uQmlkUmVzcG9uc2Uu",
          "QWQuU2RrUmVuZGVyZWRBZBq8AwoITmF0aXZlQWQSEAoIaGVhZGxpbmUYASAB",
          "KAkSDAoEYm9keRgCIAEoCRIWCg5jYWxsX3RvX2FjdGlvbhgDIAEoCRISCgph",
          "ZHZlcnRpc2VyGAQgASgJEi0KBWltYWdlGAUgASgLMh4uQmlkUmVzcG9uc2Uu",
          "QWQuTmF0aXZlQWQuSW1hZ2USLAoEbG9nbxgGIAEoCzIeLkJpZFJlc3BvbnNl",
          "LkFkLk5hdGl2ZUFkLkltYWdlEjAKCGFwcF9pY29uGAcgASgLMh4uQmlkUmVz",
          "cG9uc2UuQWQuTmF0aXZlQWQuSW1hZ2USEQoJdmlkZW9fdXJsGA0gASgJEhMK",
          "C3N0YXJfcmF0aW5nGAggASgBEhYKDmNsaWNrX2xpbmtfdXJsGA4gASgJEhoK",
          "EmNsaWNrX3RyYWNraW5nX3VybBgLIAEoCRIbChNjbGlja190cmFja2luZ191",
          "cmxzGA8gAygJEg0KBXByaWNlGAogASgJEhgKEERFUFJFQ0FURURfc3RvcmUY",
          "DCABKAkaMwoFSW1hZ2USCwoDdXJsGAEgASgJEg0KBXdpZHRoGAIgASgFEg4K",
          "BmhlaWdodBgDIAEoBRqoAwoGQWRTbG90EgoKAmlkGAEgAigFEhYKDm1heF9j",
          "cG1fbWljcm9zGAIgAigDEhYKDm1pbl9jcG1fbWljcm9zGAMgASgDEhIKCmJp",
          "bGxpbmdfaWQYBCABKAMSEgoHZGVhbF9pZBgFIAEoAzoBMBIYChBleGNoYW5n",
          "ZV9kZWFsX2lkGAYgASgJElEKEmV4Y2hhbmdlX2RlYWxfdHlwZRgHIAEoDjIn",
          "LkJpZFJlc3BvbnNlLkFkLkFkU2xvdC5FeGNoYW5nZURlYWxUeXBlOgxPUEVO",
          "X0FVQ1RJT04SGgoSYnV5ZXJfcmVwb3J0aW5nX2lkGAggASgJEiMKG3VzZV9i",
          "aWRfdHJhbnNsYXRpb25fc2VydmljZRgKIAEoCBIfChd0aGlyZF9wYXJ0eV9i",
          "dXllcl90b2tlbhgMIAEoCSJrChBFeGNoYW5nZURlYWxUeXBlEhAKDE9QRU5f",
          "QVVDVElPThAAEhMKD1BSSVZBVEVfQVVDVElPThABEhIKDlBSRUZFUlJFRF9E",
          "RUFMEAISHAoYRVhDSEFOR0VfQVVDVElPTl9QQUNLQUdFEAMa1AEKGkltcHJl",
          "c3Npb25UcmFja2luZ1Jlc291cmNlEhIKCnNjcmlwdF91cmwYASABKAkSQwoH",
          "Y29udGV4dBgCIAMoDjIyLkJpZFJlc3BvbnNlLkFkLkltcHJlc3Npb25UcmFj",
          "a2luZ1Jlc291cmNlLkNvbnRleHQSHwoXdmVyaWZpY2F0aW9uX3BhcmFtZXRl",
          "cnMYAyABKAkSEgoKdmVuZG9yX2tleRgEIAEoCSIoCgdDb250ZXh0EhMKD1VO",
          "S05PV05fQ09OVEVYVBAAEggKBE9NSUQQARozCg1TZGtSZW5kZXJlZEFkEgoK",
          "AmlkGAEgASgJEhYKDnJlbmRlcmluZ19kYXRhGAIgASgJ"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest), global::BidRequest.Parser, new[]{ "Id", "Ip", "UserDataTreatment", "GoogleUserId", "CookieVersion", "CookieAgeSeconds", "HostedMatchData", "UserAgent", "PublisherCountry", "GeoCriteriaId", "PostalCode", "PostalCodePrefix", "EncryptedHyperlocalSet", "HyperlocalSet", "TimezoneOffset", "UserVertical", "UserList", "PublisherId", "SellerNetworkId", "PartnerId", "Url", "AnonymousId", "DetectedLanguage", "DetectedVertical", "DetectedContentLabel", "GoogleQueryId", "AuctionType", "Device", "KeyValue", "Mobile", "Video", "PublisherSettingsListId", "PublisherType", "Adslot", "BidResponseFeedback", "ResponseDeadlineMs", "IsTest", "IsPing", "IsPredictedToBeIgnored" }, null, new[]{ typeof(global::BidRequest.Types.UserDataTreatment), typeof(global::BidRequest.Types.AuctionType), typeof(global::BidRequest.Types.PublisherType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Hyperlocal), global::BidRequest.Types.Hyperlocal.Parser, new[]{ "Corners" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Hyperlocal.Types.Point), global::BidRequest.Types.Hyperlocal.Types.Point.Parser, new[]{ "Latitude", "Longitude" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.HyperlocalSet), global::BidRequest.Types.HyperlocalSet.Parser, new[]{ "Hyperlocal", "CenterPoint" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.UserList), global::BidRequest.Types.UserList.Parser, new[]{ "Id", "AgeSeconds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Vertical), global::BidRequest.Types.Vertical.Parser, new[]{ "Id", "Weight" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Device), global::BidRequest.Types.Device.Parser, new[]{ "DeviceType", "Platform", "Brand", "Model", "OsVersion", "CarrierId", "ScreenWidth", "ScreenHeight", "ScreenPixelRatioMillis", "ScreenOrientation", "HardwareVersion" }, null, new[]{ typeof(global::BidRequest.Types.Device.Types.DeviceType), typeof(global::BidRequest.Types.Device.Types.ScreenOrientation) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Device.Types.OsVersion), global::BidRequest.Types.Device.Types.OsVersion.Parser, new[]{ "Major", "Minor", "Micro" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.KeyValue), global::BidRequest.Types.KeyValue.Parser, new[]{ "Key", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Mobile), global::BidRequest.Types.Mobile.Parser, new[]{ "IsApp", "AppId", "IsInterstitialRequest", "AppCategoryIds", "IsMobileWebOptimized", "EncryptedAdvertisingId", "AdvertisingId", "EncryptedHashedIdfa", "HashedIdfa", "AppName", "AppRating", "InstalledSdk" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Mobile.Types.InstalledSdk), global::BidRequest.Types.Mobile.Types.InstalledSdk.Parser, new[]{ "Id", "SdkVersion", "AdapterVersion" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version), global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version.Parser, new[]{ "Major", "Minor", "Micro" }, null, null, null, null)})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Video), global::BidRequest.Types.Video.Parser, new[]{ "Placement", "DescriptionUrl", "IsEmbeddedOffsite", "PlaybackMethod", "IsClickable", "VideoadStartDelay", "MaxAdDuration", "MinAdDuration", "MaxAdsInPod", "VideoAdSkippable", "SkippableMaxAdDuration", "Protocols", "AllowedVideoFormats", "CompanionSlot", "EndCapSupport", "ContentAttributes", "DEPRECATEDInventoryType", "IsLivestream" }, null, new[]{ typeof(global::BidRequest.Types.Video.Types.Placement), typeof(global::BidRequest.Types.Video.Types.VideoPlaybackMethod), typeof(global::BidRequest.Types.Video.Types.SkippableBidRequestType), typeof(global::BidRequest.Types.Video.Types.VideoProtocol), typeof(global::BidRequest.Types.Video.Types.VideoFormat), typeof(global::BidRequest.Types.Video.Types.EndCapSupport), typeof(global::BidRequest.Types.Video.Types.InventoryType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Video.Types.CompanionSlot), global::BidRequest.Types.Video.Types.CompanionSlot.Parser, new[]{ "Height", "Width", "CreativeFormat" }, null, new[]{ typeof(global::BidRequest.Types.Video.Types.CompanionSlot.Types.CreativeFormat) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.Video.Types.ContentAttributes), global::BidRequest.Types.Video.Types.ContentAttributes.Parser, new[]{ "Title", "DurationSeconds", "Keywords" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot), global::BidRequest.Types.AdSlot.Parser, new[]{ "Id", "AdBlockKey", "TargetableChannel", "Width", "Height", "FlexibleAdslotSettings", "ExcludedAttribute", "AllowedVendorType", "ConsentedProvidersSettings", "RegsGdpr", "ExcludedSensitiveCategory", "AllowedRestrictedCategory", "AllowedRestrictedCategoryForDeals", "AllowedLanguages", "ExcludedProductCategory", "ExcludedCreatives", "OnlyDealBidsAccepted", "MatchingAdData", "PublisherSettingsListId", "ExchangeBidding", "OpenBidding", "DfpAdUnitCode", "SlotVisibility", "Viewability", "ClickThroughRate", "VideoCompletionRate", "IframingState", "IframingDepth", "NativeAdTemplate", "NativePlacementType", "MediationStatus", "AutoRefresh", "StickySettings", "NonBrowserSlotSource", "Renderer", "AmpAdRequestType", "IsAmpPage", "AmpAdRequirementType", "IsRewarded", "AllowedAdTypes", "SessionDepth", "BuyerGeneratedRequestData" }, null, new[]{ typeof(global::BidRequest.Types.AdSlot.Types.SlotVisibility), typeof(global::BidRequest.Types.AdSlot.Types.IFramingState), typeof(global::BidRequest.Types.AdSlot.Types.IFramingDepth), typeof(global::BidRequest.Types.AdSlot.Types.NativePlacementType), typeof(global::BidRequest.Types.AdSlot.Types.MediationStatus), typeof(global::BidRequest.Types.AdSlot.Types.NonBrowserSource), typeof(global::BidRequest.Types.AdSlot.Types.Renderer), typeof(global::BidRequest.Types.AdSlot.Types.AmpAdRequestType), typeof(global::BidRequest.Types.AdSlot.Types.AmpPage), typeof(global::BidRequest.Types.AdSlot.Types.AmpAdRequirementType), typeof(global::BidRequest.Types.AdSlot.Types.AllowedAdType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.FlexibleAdSlotSettings), global::BidRequest.Types.AdSlot.Types.FlexibleAdSlotSettings.Parser, new[]{ "MaxWidth", "MaxHeight", "MinWidth", "MinHeight" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.ConsentedProvidersSettings), global::BidRequest.Types.AdSlot.Types.ConsentedProvidersSettings.Parser, new[]{ "ConsentedProviders" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.ExcludedCreative), global::BidRequest.Types.AdSlot.Types.ExcludedCreative.Parser, new[]{ "BuyerCreativeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.MatchingAdData), global::BidRequest.Types.AdSlot.Types.MatchingAdData.Parser, new[]{ "BillingId", "MinimumCpmMicros", "DEPRECATEDPricingRule", "DirectDeal" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule), global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule.Parser, new[]{ "IncludedAdvertisers", "ExcludedAdvertisers", "IncludedAgencies", "ExcludedAgencies", "Blocked", "MinimumCpmMicros" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal), global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Parser, new[]{ "DirectDealId", "FixedCpmMicros", "DealType", "PublisherBlocksOverridden", "DEPRECATEDRemainingImpressionsToBuy", "MustBidLevel", "MustBid" }, null, new[]{ typeof(global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Types.DealType) }, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.ExchangeBidding), global::BidRequest.Types.AdSlot.Types.ExchangeBidding.Parser, new[]{ "PublisherParameter", "KeyValue" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.OpenBidding), global::BidRequest.Types.AdSlot.Types.OpenBidding.Parser, new[]{ "IsOpenBidding" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.NativeAdTemplate), global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Parser, new[]{ "RequiredFields", "RecommendedFields", "HeadlineMaxSafeLength", "BodyMaxSafeLength", "CallToActionMaxSafeLength", "AdvertiserMaxSafeLength", "DEPRECATEDStoreMaxSafeLength", "PriceMaxSafeLength", "ImageWidth", "ImageHeight", "LogoWidth", "LogoHeight", "AppIconWidth", "AppIconHeight", "StyleId", "StyleLayoutType", "StyleHeight", "StyleWidth" }, null, new[]{ typeof(global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.Fields), typeof(global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.LayoutType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.AutoRefresh), global::BidRequest.Types.AdSlot.Types.AutoRefresh.Parser, new[]{ "RefreshSettings", "RefreshCount" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings), global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Parser, new[]{ "RefreshType", "MinRefreshIntervalSeconds" }, null, new[]{ typeof(global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Types.AutoRefreshType) }, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.StickySettings), global::BidRequest.Types.AdSlot.Types.StickySettings.Parser, new[]{ "VerticalStickiness", "TopHorizontalStickiness", "BottomHorizontalStickiness" }, null, new[]{ typeof(global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData), global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Parser, new[]{ "SourceApp", "Data" }, new[]{ "Source" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp), global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp.Parser, new[]{ "Id" }, null, null, null, null)})}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidRequest.Types.BidResponseFeedback), global::BidRequest.Types.BidResponseFeedback.Parser, new[]{ "RequestId", "CreativeIndex", "CreativeStatusCode", "CpmMicros", "MinimumBidToWin", "SampledMediationCpmAheadOfAuctionWinner", "EventNotificationToken", "BuyerCreativeId" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse), global::BidResponse.Parser, new[]{ "Ad", "DebugString", "ProcessingTimeMs" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse.Types.Ad), global::BidResponse.Types.Ad.Parser, new[]{ "EventNotificationToken", "BuyerCreativeId", "HtmlSnippet", "VideoUrl", "VideoVastXml", "AmpAdUrl", "NativeAd", "ClickThroughUrl", "VendorType", "Attribute", "Category", "RestrictedCategory", "AdvertiserName", "BidderName", "Width", "Height", "AgencyId", "Adslot", "ImpressionTrackingUrl", "AdChoicesDestinationUrl", "ImpressionTrackingResource", "SdkRenderedAd" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse.Types.Ad.Types.NativeAd), global::BidResponse.Types.Ad.Types.NativeAd.Parser, new[]{ "Headline", "Body", "CallToAction", "Advertiser", "Image", "Logo", "AppIcon", "VideoUrl", "StarRating", "ClickLinkUrl", "ClickTrackingUrl", "ClickTrackingUrls", "Price", "DEPRECATEDStore" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse.Types.Ad.Types.NativeAd.Types.Image), global::BidResponse.Types.Ad.Types.NativeAd.Types.Image.Parser, new[]{ "Url", "Width", "Height" }, null, null, null, null)}),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse.Types.Ad.Types.AdSlot), global::BidResponse.Types.Ad.Types.AdSlot.Parser, new[]{ "Id", "MaxCpmMicros", "MinCpmMicros", "BillingId", "DealId", "ExchangeDealId", "ExchangeDealType", "BuyerReportingId", "UseBidTranslationService", "ThirdPartyBuyerToken" }, null, new[]{ typeof(global::BidResponse.Types.Ad.Types.AdSlot.Types.ExchangeDealType) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse.Types.Ad.Types.ImpressionTrackingResource), global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Parser, new[]{ "ScriptUrl", "Context", "VerificationParameters", "VendorKey" }, null, new[]{ typeof(global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Types.Context) }, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BidResponse.Types.Ad.Types.SdkRenderedAd), global::BidResponse.Types.Ad.Types.SdkRenderedAd.Parser, new[]{ "Id", "RenderingData" }, null, null, null, null)})})
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// This is the message that Google uses to request bids. A BidRequest
/// includes the ad slot from a single impression.
/// </summary>
public sealed partial class BidRequest : pb::IMessage<BidRequest> {
  private static readonly pb::MessageParser<BidRequest> _parser = new pb::MessageParser<BidRequest>(() => new BidRequest());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BidRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GRTBReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BidRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BidRequest(BidRequest other) : this() {
    _hasBits0 = other._hasBits0;
    id_ = other.id_;
    ip_ = other.ip_;
    userDataTreatment_ = other.userDataTreatment_.Clone();
    googleUserId_ = other.googleUserId_;
    cookieVersion_ = other.cookieVersion_;
    cookieAgeSeconds_ = other.cookieAgeSeconds_;
    hostedMatchData_ = other.hostedMatchData_;
    userAgent_ = other.userAgent_;
    publisherCountry_ = other.publisherCountry_;
    geoCriteriaId_ = other.geoCriteriaId_;
    postalCode_ = other.postalCode_;
    postalCodePrefix_ = other.postalCodePrefix_;
    encryptedHyperlocalSet_ = other.encryptedHyperlocalSet_;
    hyperlocalSet_ = other.HasHyperlocalSet ? other.hyperlocalSet_.Clone() : null;
    timezoneOffset_ = other.timezoneOffset_;
    userVertical_ = other.userVertical_.Clone();
    userList_ = other.userList_.Clone();
    publisherId_ = other.publisherId_;
    sellerNetworkId_ = other.sellerNetworkId_;
    partnerId_ = other.partnerId_;
    url_ = other.url_;
    anonymousId_ = other.anonymousId_;
    detectedLanguage_ = other.detectedLanguage_.Clone();
    detectedVertical_ = other.detectedVertical_.Clone();
    detectedContentLabel_ = other.detectedContentLabel_.Clone();
    googleQueryId_ = other.googleQueryId_;
    auctionType_ = other.auctionType_;
    device_ = other.HasDevice ? other.device_.Clone() : null;
    keyValue_ = other.keyValue_.Clone();
    mobile_ = other.HasMobile ? other.mobile_.Clone() : null;
    video_ = other.HasVideo ? other.video_.Clone() : null;
    publisherSettingsListId_ = other.publisherSettingsListId_;
    publisherType_ = other.publisherType_;
    adslot_ = other.adslot_.Clone();
    bidResponseFeedback_ = other.bidResponseFeedback_.Clone();
    responseDeadlineMs_ = other.responseDeadlineMs_;
    isTest_ = other.isTest_;
    isPing_ = other.isPing_;
    isPredictedToBeIgnored_ = other.isPredictedToBeIgnored_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BidRequest Clone() {
    return new BidRequest(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 2;
  private readonly static pb::ByteString IdDefaultValue = pb::ByteString.Empty;

  private pb::ByteString id_;
  /// <summary>
  /// Unique request id generated by Google. This is 16 bytes long.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Id {
    get { return id_ ?? IdDefaultValue; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasId {
    get { return id_ != null; }
  }
  /// <summary>Clears the value of the "id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearId() {
    id_ = null;
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 4;
  private readonly static pb::ByteString IpDefaultValue = pb::ByteString.Empty;

  private pb::ByteString ip_;
  /// <summary>
  /// The first 3 bytes of the IP address in network byte order for IPv4, or the
  /// first 6 bytes for IPv6. Note that the number and position of the bytes
  /// included from IPv6 addresses may change later.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Ip {
    get { return ip_ ?? IpDefaultValue; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "ip" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIp {
    get { return ip_ != null; }
  }
  /// <summary>Clears the value of the "ip" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIp() {
    ip_ = null;
  }

  /// <summary>Field number for the "user_data_treatment" field.</summary>
  public const int UserDataTreatmentFieldNumber = 49;
  private static readonly pb::FieldCodec<global::BidRequest.Types.UserDataTreatment> _repeated_userDataTreatment_codec
      = pb::FieldCodec.ForEnum(392, x => (int) x, x => (global::BidRequest.Types.UserDataTreatment) x);
  private readonly pbc::RepeatedField<global::BidRequest.Types.UserDataTreatment> userDataTreatment_ = new pbc::RepeatedField<global::BidRequest.Types.UserDataTreatment>();
  /// <summary>
  /// When user_data_treatment is set, the user's cookie/id data is cleared from
  /// the request and is not sent in callout.
  /// The impacted fields are:
  ///  * google_user_id
  ///  * hosted_match_data
  ///  * mobile.encrypted_advertising_id
  ///  * mobile.encrypted_hashed_idfa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidRequest.Types.UserDataTreatment> UserDataTreatment {
    get { return userDataTreatment_; }
  }

  /// <summary>Field number for the "google_user_id" field.</summary>
  public const int GoogleUserIdFieldNumber = 21;
  private readonly static string GoogleUserIdDefaultValue = "";

  private string googleUserId_;
  /// <summary>
  /// The Google ID for the user. This field is the unpadded web-safe base64
  /// encoded version of a binary cookie id. See the "Base 64 Encoding with URL
  /// and Filename Safe Alphabet" section in RFC 3548 for encoding details. This
  /// field may be the same as the Google ID returned by the cookie matching
  /// service. Not set if there is one or more user_data_treatment value.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GoogleUserId {
    get { return googleUserId_ ?? GoogleUserIdDefaultValue; }
    set {
      googleUserId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "google_user_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGoogleUserId {
    get { return googleUserId_ != null; }
  }
  /// <summary>Clears the value of the "google_user_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGoogleUserId() {
    googleUserId_ = null;
  }

  /// <summary>Field number for the "cookie_version" field.</summary>
  public const int CookieVersionFieldNumber = 20;
  private readonly static uint CookieVersionDefaultValue = 0;

  private uint cookieVersion_;
  /// <summary>
  /// The version number of the google_user_id. We may sometimes change the
  /// mapping from cookie to google_user_id. In this case the version will be
  /// incremented.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint CookieVersion {
    get { if ((_hasBits0 & 4) != 0) { return cookieVersion_; } else { return CookieVersionDefaultValue; } }
    set {
      _hasBits0 |= 4;
      cookieVersion_ = value;
    }
  }
  /// <summary>Gets whether the "cookie_version" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCookieVersion {
    get { return (_hasBits0 & 4) != 0; }
  }
  /// <summary>Clears the value of the "cookie_version" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCookieVersion() {
    _hasBits0 &= ~4;
  }

  /// <summary>Field number for the "cookie_age_seconds" field.</summary>
  public const int CookieAgeSecondsFieldNumber = 31;
  private readonly static int CookieAgeSecondsDefaultValue = 0;

  private int cookieAgeSeconds_;
  /// <summary>
  /// The time in seconds since the google_user_id was created.
  /// This number may be quantized.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CookieAgeSeconds {
    get { if ((_hasBits0 & 16) != 0) { return cookieAgeSeconds_; } else { return CookieAgeSecondsDefaultValue; } }
    set {
      _hasBits0 |= 16;
      cookieAgeSeconds_ = value;
    }
  }
  /// <summary>Gets whether the "cookie_age_seconds" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasCookieAgeSeconds {
    get { return (_hasBits0 & 16) != 0; }
  }
  /// <summary>Clears the value of the "cookie_age_seconds" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearCookieAgeSeconds() {
    _hasBits0 &= ~16;
  }

  /// <summary>Field number for the "hosted_match_data" field.</summary>
  public const int HostedMatchDataFieldNumber = 37;
  private readonly static pb::ByteString HostedMatchDataDefaultValue = pb::ByteString.Empty;

  private pb::ByteString hostedMatchData_;
  /// <summary>
  /// Match data stored for this google_user_id through the cookie matching
  /// service. If a match exists, then this field holds the decoded data that
  /// was passed in the google_hm parameter.
  /// Not set if there is one or more user_data_treatment value.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString HostedMatchData {
    get { return hostedMatchData_ ?? HostedMatchDataDefaultValue; }
    set {
      hostedMatchData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "hosted_match_data" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHostedMatchData {
    get { return hostedMatchData_ != null; }
  }
  /// <summary>Clears the value of the "hosted_match_data" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHostedMatchData() {
    hostedMatchData_ = null;
  }

  /// <summary>Field number for the "user_agent" field.</summary>
  public const int UserAgentFieldNumber = 6;
  private readonly static string UserAgentDefaultValue = "";

  private string userAgent_;
  /// <summary>
  /// A string that identifies the browser and type of device that sent the
  /// request. Certain data may be redacted or replaced.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserAgent {
    get { return userAgent_ ?? UserAgentDefaultValue; }
    set {
      userAgent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "user_agent" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUserAgent {
    get { return userAgent_ != null; }
  }
  /// <summary>Clears the value of the "user_agent" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUserAgent() {
    userAgent_ = null;
  }

  /// <summary>Field number for the "publisher_country" field.</summary>
  public const int PublisherCountryFieldNumber = 55;
  private readonly static string PublisherCountryDefaultValue = "";

  private string publisherCountry_;
  /// <summary>
  /// The billing address country of the publisher. This may be different from
  /// the detected country of the user in geo_criteria_id or the hosting country
  /// of the website. For a complete list of country codes, please refer to
  /// https://developers.google.com/adwords/api/docs/appendix/codes-formats#country-codes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PublisherCountry {
    get { return publisherCountry_ ?? PublisherCountryDefaultValue; }
    set {
      publisherCountry_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "publisher_country" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublisherCountry {
    get { return publisherCountry_ != null; }
  }
  /// <summary>Clears the value of the "publisher_country" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublisherCountry() {
    publisherCountry_ = null;
  }

  /// <summary>Field number for the "geo_criteria_id" field.</summary>
  public const int GeoCriteriaIdFieldNumber = 39;
  private readonly static int GeoCriteriaIdDefaultValue = 0;

  private int geoCriteriaId_;
  /// <summary>
  /// Location of the end user. Uses a subset of the codes used in the AdWords
  /// API. See the geo-table.csv table in the technical documentation for a list
  /// of ids. The geo_criteria_id field replaces the deprecated country, region,
  /// city, and metro fields.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int GeoCriteriaId {
    get { if ((_hasBits0 & 32) != 0) { return geoCriteriaId_; } else { return GeoCriteriaIdDefaultValue; } }
    set {
      _hasBits0 |= 32;
      geoCriteriaId_ = value;
    }
  }
  /// <summary>Gets whether the "geo_criteria_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGeoCriteriaId {
    get { return (_hasBits0 & 32) != 0; }
  }
  /// <summary>Clears the value of the "geo_criteria_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGeoCriteriaId() {
    _hasBits0 &= ~32;
  }

  /// <summary>Field number for the "postal_code" field.</summary>
  public const int PostalCodeFieldNumber = 33;
  private readonly static string PostalCodeDefaultValue = "";

  private string postalCode_;
  /// <summary>
  /// Detected postal code of the appropriate type for the country of the end
  /// user (e.g. zip code if the country is "US"). The postal_code_prefix field
  /// is set when accuracy is too low to imply a full code, otherwise the
  /// postal_code field is set.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PostalCode {
    get { return postalCode_ ?? PostalCodeDefaultValue; }
    set {
      postalCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "postal_code" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPostalCode {
    get { return postalCode_ != null; }
  }
  /// <summary>Clears the value of the "postal_code" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPostalCode() {
    postalCode_ = null;
  }

  /// <summary>Field number for the "postal_code_prefix" field.</summary>
  public const int PostalCodePrefixFieldNumber = 34;
  private readonly static string PostalCodePrefixDefaultValue = "";

  private string postalCodePrefix_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PostalCodePrefix {
    get { return postalCodePrefix_ ?? PostalCodePrefixDefaultValue; }
    set {
      postalCodePrefix_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "postal_code_prefix" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPostalCodePrefix {
    get { return postalCodePrefix_ != null; }
  }
  /// <summary>Clears the value of the "postal_code_prefix" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPostalCodePrefix() {
    postalCodePrefix_ = null;
  }

  /// <summary>Field number for the "encrypted_hyperlocal_set" field.</summary>
  public const int EncryptedHyperlocalSetFieldNumber = 40;
  private readonly static pb::ByteString EncryptedHyperlocalSetDefaultValue = pb::ByteString.Empty;

  private pb::ByteString encryptedHyperlocalSet_;
  /// <summary>
  /// Hyperlocal targeting signal when available, encrypted as described at
  /// https://developers.google.com/authorized-buyers/rtb/response-guide/decrypt-hyperlocal
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString EncryptedHyperlocalSet {
    get { return encryptedHyperlocalSet_ ?? EncryptedHyperlocalSetDefaultValue; }
    set {
      encryptedHyperlocalSet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "encrypted_hyperlocal_set" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasEncryptedHyperlocalSet {
    get { return encryptedHyperlocalSet_ != null; }
  }
  /// <summary>Clears the value of the "encrypted_hyperlocal_set" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearEncryptedHyperlocalSet() {
    encryptedHyperlocalSet_ = null;
  }

  /// <summary>Field number for the "hyperlocal_set" field.</summary>
  public const int HyperlocalSetFieldNumber = 53;
  private global::BidRequest.Types.HyperlocalSet hyperlocalSet_;
  /// <summary>
  /// Unencrypted version of encrypted_hyperlocal_set. This field is only set
  /// when using an SSL connection.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BidRequest.Types.HyperlocalSet HyperlocalSet {
    get { return hyperlocalSet_; }
    set {
      hyperlocalSet_ = value;
    }
  }
  /// <summary>Gets whether the hyperlocal_set field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasHyperlocalSet {
    get { return hyperlocalSet_ != null; }
  }
  /// <summary>Clears the value of the hyperlocal_set field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearHyperlocalSet() {
    hyperlocalSet_ = null;
  }

  /// <summary>Field number for the "timezone_offset" field.</summary>
  public const int TimezoneOffsetFieldNumber = 25;
  private readonly static int TimezoneOffsetDefaultValue = 0;

  private int timezoneOffset_;
  /// <summary>
  /// The offset of the user's time from GMT in minutes. For example, GMT+10 is
  /// timezone_offset = 600.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int TimezoneOffset {
    get { if ((_hasBits0 & 8) != 0) { return timezoneOffset_; } else { return TimezoneOffsetDefaultValue; } }
    set {
      _hasBits0 |= 8;
      timezoneOffset_ = value;
    }
  }
  /// <summary>Gets whether the "timezone_offset" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasTimezoneOffset {
    get { return (_hasBits0 & 8) != 0; }
  }
  /// <summary>Clears the value of the "timezone_offset" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearTimezoneOffset() {
    _hasBits0 &= ~8;
  }

  /// <summary>Field number for the "user_vertical" field.</summary>
  public const int UserVerticalFieldNumber = 30;
  private static readonly pb::FieldCodec<int> _repeated_userVertical_codec
      = pb::FieldCodec.ForInt32(242);
  private readonly pbc::RepeatedField<int> userVertical_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// List of detected user verticals. Currently unused.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> UserVertical {
    get { return userVertical_; }
  }

  /// <summary>Field number for the "user_list" field.</summary>
  public const int UserListFieldNumber = 32;
  private static readonly pb::FieldCodec<global::BidRequest.Types.UserList> _repeated_userList_codec
      = pb::FieldCodec.ForMessage(258, global::BidRequest.Types.UserList.Parser);
  private readonly pbc::RepeatedField<global::BidRequest.Types.UserList> userList_ = new pbc::RepeatedField<global::BidRequest.Types.UserList>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidRequest.Types.UserList> UserList {
    get { return userList_; }
  }

  /// <summary>Field number for the "publisher_id" field.</summary>
  public const int PublisherIdFieldNumber = 56;
  private readonly static string PublisherIdDefaultValue = "";

  private string publisherId_;
  /// <summary>
  /// The publisher ID as defined by the publisher code suffix of
  /// the web property code. For instance, "pub-123" is the publisher code of web
  /// property code "ca-pub-123" (ca- is the product specific prefix of the web
  /// property).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PublisherId {
    get { return publisherId_ ?? PublisherIdDefaultValue; }
    set {
      publisherId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "publisher_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublisherId {
    get { return publisherId_ != null; }
  }
  /// <summary>Clears the value of the "publisher_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublisherId() {
    publisherId_ = null;
  }

  /// <summary>Field number for the "seller_network_id" field.</summary>
  public const int SellerNetworkIdFieldNumber = 41;
  private readonly static int SellerNetworkIdDefaultValue = 0;

  private int sellerNetworkId_;
  /// <summary>
  /// The seller network id. See seller-network-ids.txt file in the technical
  /// documentation for a list of ids. This is only set if the site is not
  /// anonymous and the publisher allows site targeting.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int SellerNetworkId {
    get { if ((_hasBits0 & 64) != 0) { return sellerNetworkId_; } else { return SellerNetworkIdDefaultValue; } }
    set {
      _hasBits0 |= 64;
      sellerNetworkId_ = value;
    }
  }
  /// <summary>Gets whether the "seller_network_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasSellerNetworkId {
    get { return (_hasBits0 & 64) != 0; }
  }
  /// <summary>Clears the value of the "seller_network_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearSellerNetworkId() {
    _hasBits0 &= ~64;
  }

  /// <summary>Field number for the "partner_id" field.</summary>
  public const int PartnerIdFieldNumber = 52;
  private readonly static ulong PartnerIdDefaultValue = 0UL;

  private ulong partnerId_;
  /// <summary>
  /// Id for the partner that provides this inventory. This is only set when
  /// seller_network_id is also set and further partner information beyond the
  /// seller_network_id is also available. The value of the partner_id is not
  /// meaningful beyond providing a stable identifier.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong PartnerId {
    get { if ((_hasBits0 & 1024) != 0) { return partnerId_; } else { return PartnerIdDefaultValue; } }
    set {
      _hasBits0 |= 1024;
      partnerId_ = value;
    }
  }
  /// <summary>Gets whether the "partner_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPartnerId {
    get { return (_hasBits0 & 1024) != 0; }
  }
  /// <summary>Clears the value of the "partner_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPartnerId() {
    _hasBits0 &= ~1024;
  }

  /// <summary>Field number for the "url" field.</summary>
  public const int UrlFieldNumber = 11;
  private readonly static string UrlDefaultValue = "";

  private string url_;
  /// <summary>
  /// The URL of the page with parameters removed. This is only set if the site
  /// is not anonymous and the publisher allows site targeting. You can use
  /// anonymous_id for targeting if the inventory is anonymous. Otherwise, use
  /// detected_vertical's. Only one of url or anonymous_id is ever set in the
  /// same request. This always starts with a protocol (either http or https).
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Url {
    get { return url_ ?? UrlDefaultValue; }
    set {
      url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "url" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasUrl {
    get { return url_ != null; }
  }
  /// <summary>Clears the value of the "url" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearUrl() {
    url_ = null;
  }

  /// <summary>Field number for the "anonymous_id" field.</summary>
  public const int AnonymousIdFieldNumber = 19;
  private readonly static string AnonymousIdDefaultValue = "";

  private string anonymousId_;
  /// <summary>
  /// An id for the domain of the page. This is set when the inventory is
  /// anonymous. Only one of url or anonymous_id is ever set in the same
  /// request.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AnonymousId {
    get { return anonymousId_ ?? AnonymousIdDefaultValue; }
    set {
      anonymousId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "anonymous_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAnonymousId {
    get { return anonymousId_ != null; }
  }
  /// <summary>Clears the value of the "anonymous_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAnonymousId() {
    anonymousId_ = null;
  }

  /// <summary>Field number for the "detected_language" field.</summary>
  public const int DetectedLanguageFieldNumber = 12;
  private static readonly pb::FieldCodec<string> _repeated_detectedLanguage_codec
      = pb::FieldCodec.ForString(98);
  private readonly pbc::RepeatedField<string> detectedLanguage_ = new pbc::RepeatedField<string>();
  /// <summary>
  /// Detected user languages, based on the language of the web page, the browser
  /// settings, and other signals. The order is arbitrary. The codes are 2 or 5
  /// characters and are documented at
  /// https://developers.google.com/adwords/api/docs/appendix/languagecodes
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<string> DetectedLanguage {
    get { return detectedLanguage_; }
  }

  /// <summary>Field number for the "detected_vertical" field.</summary>
  public const int DetectedVerticalFieldNumber = 13;
  private static readonly pb::FieldCodec<global::BidRequest.Types.Vertical> _repeated_detectedVertical_codec
      = pb::FieldCodec.ForMessage(106, global::BidRequest.Types.Vertical.Parser);
  private readonly pbc::RepeatedField<global::BidRequest.Types.Vertical> detectedVertical_ = new pbc::RepeatedField<global::BidRequest.Types.Vertical>();
  /// <summary>
  /// Unordered list of detected content verticals. See the
  /// publisher-verticals.txt file in the technical documentation for a list of
  /// ids.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidRequest.Types.Vertical> DetectedVertical {
    get { return detectedVertical_; }
  }

  /// <summary>Field number for the "detected_content_label" field.</summary>
  public const int DetectedContentLabelFieldNumber = 26;
  private static readonly pb::FieldCodec<int> _repeated_detectedContentLabel_codec
      = pb::FieldCodec.ForInt32(210);
  private readonly pbc::RepeatedField<int> detectedContentLabel_ = new pbc::RepeatedField<int>();
  /// <summary>
  /// List of detected content labels. See content-labels.txt file in the
  /// technical documentation for a list of ids.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<int> DetectedContentLabel {
    get { return detectedContentLabel_; }
  }

  /// <summary>Field number for the "google_query_id" field.</summary>
  public const int GoogleQueryIdFieldNumber = 59;
  private readonly static string GoogleQueryIdDefaultValue = "";

  private string googleQueryId_;
  /// <summary>
  /// This represents a unique ID for the overall query.  In the event
  /// that there are multiple callouts for a query, all callout requests for that
  /// query will contain the same google_query_id.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GoogleQueryId {
    get { return googleQueryId_ ?? GoogleQueryIdDefaultValue; }
    set {
      googleQueryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "google_query_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasGoogleQueryId {
    get { return googleQueryId_ != null; }
  }
  /// <summary>Clears the value of the "google_query_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearGoogleQueryId() {
    googleQueryId_ = null;
  }

  /// <summary>Field number for the "auction_type" field.</summary>
  public const int AuctionTypeFieldNumber = 60;
  private readonly static global::BidRequest.Types.AuctionType AuctionTypeDefaultValue = global::BidRequest.Types.AuctionType.SecondPrice;

  private global::BidRequest.Types.AuctionType auctionType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BidRequest.Types.AuctionType AuctionType {
    get { if ((_hasBits0 & 4096) != 0) { return auctionType_; } else { return AuctionTypeDefaultValue; } }
    set {
      _hasBits0 |= 4096;
      auctionType_ = value;
    }
  }
  /// <summary>Gets whether the "auction_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasAuctionType {
    get { return (_hasBits0 & 4096) != 0; }
  }
  /// <summary>Clears the value of the "auction_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearAuctionType() {
    _hasBits0 &= ~4096;
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 54;
  private global::BidRequest.Types.Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BidRequest.Types.Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }
  /// <summary>Gets whether the device field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDevice {
    get { return device_ != null; }
  }
  /// <summary>Clears the value of the device field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDevice() {
    device_ = null;
  }

  /// <summary>Field number for the "key_value" field.</summary>
  public const int KeyValueFieldNumber = 38;
  private static readonly pb::FieldCodec<global::BidRequest.Types.KeyValue> _repeated_keyValue_codec
      = pb::FieldCodec.ForMessage(306, global::BidRequest.Types.KeyValue.Parser);
  private readonly pbc::RepeatedField<global::BidRequest.Types.KeyValue> keyValue_ = new pbc::RepeatedField<global::BidRequest.Types.KeyValue>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidRequest.Types.KeyValue> KeyValue {
    get { return keyValue_; }
  }

  /// <summary>Field number for the "mobile" field.</summary>
  public const int MobileFieldNumber = 28;
  private global::BidRequest.Types.Mobile mobile_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BidRequest.Types.Mobile Mobile {
    get { return mobile_; }
    set {
      mobile_ = value;
    }
  }
  /// <summary>Gets whether the mobile field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasMobile {
    get { return mobile_ != null; }
  }
  /// <summary>Clears the value of the mobile field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearMobile() {
    mobile_ = null;
  }

  /// <summary>Field number for the "video" field.</summary>
  public const int VideoFieldNumber = 29;
  private global::BidRequest.Types.Video video_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BidRequest.Types.Video Video {
    get { return video_; }
    set {
      video_ = value;
    }
  }
  /// <summary>Gets whether the video field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasVideo {
    get { return video_ != null; }
  }
  /// <summary>Clears the value of the video field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearVideo() {
    video_ = null;
  }

  /// <summary>Field number for the "publisher_settings_list_id" field.</summary>
  public const int PublisherSettingsListIdFieldNumber = 42;
  private readonly static ulong PublisherSettingsListIdDefaultValue = 0UL;

  private ulong publisherSettingsListId_;
  /// <summary>
  /// The publisher settings list id that applies to this page.
  /// See the RTB Publisher Settings guide at
  /// https://developers.google.com/authorized-buyers/rtb/pub-settings-guide
  /// for details.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong PublisherSettingsListId {
    get { if ((_hasBits0 & 128) != 0) { return publisherSettingsListId_; } else { return PublisherSettingsListIdDefaultValue; } }
    set {
      _hasBits0 |= 128;
      publisherSettingsListId_ = value;
    }
  }
  /// <summary>Gets whether the "publisher_settings_list_id" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublisherSettingsListId {
    get { return (_hasBits0 & 128) != 0; }
  }
  /// <summary>Clears the value of the "publisher_settings_list_id" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublisherSettingsListId() {
    _hasBits0 &= ~128;
  }

  /// <summary>Field number for the "publisher_type" field.</summary>
  public const int PublisherTypeFieldNumber = 51;
  private readonly static global::BidRequest.Types.PublisherType PublisherTypeDefaultValue = global::BidRequest.Types.PublisherType.UnknownPublisherType;

  private global::BidRequest.Types.PublisherType publisherType_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BidRequest.Types.PublisherType PublisherType {
    get { if ((_hasBits0 & 512) != 0) { return publisherType_; } else { return PublisherTypeDefaultValue; } }
    set {
      _hasBits0 |= 512;
      publisherType_ = value;
    }
  }
  /// <summary>Gets whether the "publisher_type" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasPublisherType {
    get { return (_hasBits0 & 512) != 0; }
  }
  /// <summary>Clears the value of the "publisher_type" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearPublisherType() {
    _hasBits0 &= ~512;
  }

  /// <summary>Field number for the "adslot" field.</summary>
  public const int AdslotFieldNumber = 14;
  private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot> _repeated_adslot_codec
      = pb::FieldCodec.ForMessage(114, global::BidRequest.Types.AdSlot.Parser);
  private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot> adslot_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidRequest.Types.AdSlot> Adslot {
    get { return adslot_; }
  }

  /// <summary>Field number for the "bid_response_feedback" field.</summary>
  public const int BidResponseFeedbackFieldNumber = 44;
  private static readonly pb::FieldCodec<global::BidRequest.Types.BidResponseFeedback> _repeated_bidResponseFeedback_codec
      = pb::FieldCodec.ForMessage(354, global::BidRequest.Types.BidResponseFeedback.Parser);
  private readonly pbc::RepeatedField<global::BidRequest.Types.BidResponseFeedback> bidResponseFeedback_ = new pbc::RepeatedField<global::BidRequest.Types.BidResponseFeedback>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidRequest.Types.BidResponseFeedback> BidResponseFeedback {
    get { return bidResponseFeedback_; }
  }

  /// <summary>Field number for the "response_deadline_ms" field.</summary>
  public const int ResponseDeadlineMsFieldNumber = 57;
  private readonly static int ResponseDeadlineMsDefaultValue = 0;

  private int responseDeadlineMs_;
  /// <summary>
  /// How many milliseconds Google will wait for a response before ignoring it.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ResponseDeadlineMs {
    get { if ((_hasBits0 & 2048) != 0) { return responseDeadlineMs_; } else { return ResponseDeadlineMsDefaultValue; } }
    set {
      _hasBits0 |= 2048;
      responseDeadlineMs_ = value;
    }
  }
  /// <summary>Gets whether the "response_deadline_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasResponseDeadlineMs {
    get { return (_hasBits0 & 2048) != 0; }
  }
  /// <summary>Clears the value of the "response_deadline_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearResponseDeadlineMs() {
    _hasBits0 &= ~2048;
  }

  /// <summary>Field number for the "is_test" field.</summary>
  public const int IsTestFieldNumber = 15;
  private readonly static bool IsTestDefaultValue = false;

  private bool isTest_;
  /// <summary>
  /// If true, then this is a test request. Results will not be displayed to
  /// users and you will not be billed for a response even if it wins the
  /// auction. You should still do regular processing since the request may be
  /// used to evaluate latencies or for other testing. During your initial
  /// testing with Google traffic any response that you make will be filtered
  /// out of the auction whether this flag has a value of true or false.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsTest {
    get { if ((_hasBits0 & 1) != 0) { return isTest_; } else { return IsTestDefaultValue; } }
    set {
      _hasBits0 |= 1;
      isTest_ = value;
    }
  }
  /// <summary>Gets whether the "is_test" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsTest {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "is_test" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsTest() {
    _hasBits0 &= ~1;
  }

  /// <summary>Field number for the "is_ping" field.</summary>
  public const int IsPingFieldNumber = 17;
  private readonly static bool IsPingDefaultValue = false;

  private bool isPing_;
  /// <summary>
  /// If true, then this request is intended to measure network latency. Please
  /// return an empty BidResponse with only processing_time_ms set as quickly as
  /// possible without executing any bidding logic.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPing {
    get { if ((_hasBits0 & 2) != 0) { return isPing_; } else { return IsPingDefaultValue; } }
    set {
      _hasBits0 |= 2;
      isPing_ = value;
    }
  }
  /// <summary>Gets whether the "is_ping" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsPing {
    get { return (_hasBits0 & 2) != 0; }
  }
  /// <summary>Clears the value of the "is_ping" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsPing() {
    _hasBits0 &= ~2;
  }

  /// <summary>Field number for the "is_predicted_to_be_ignored" field.</summary>
  public const int IsPredictedToBeIgnoredFieldNumber = 45;
  private readonly static bool IsPredictedToBeIgnoredDefaultValue = false;

  private bool isPredictedToBeIgnored_;
  /// <summary>
  /// If true, then the callout model predicted that you will not bid
  /// on this request. We send a sampled percentage of such requests so that we
  /// can automatically update the model when bidding patterns change.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsPredictedToBeIgnored {
    get { if ((_hasBits0 & 256) != 0) { return isPredictedToBeIgnored_; } else { return IsPredictedToBeIgnoredDefaultValue; } }
    set {
      _hasBits0 |= 256;
      isPredictedToBeIgnored_ = value;
    }
  }
  /// <summary>Gets whether the "is_predicted_to_be_ignored" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasIsPredictedToBeIgnored {
    get { return (_hasBits0 & 256) != 0; }
  }
  /// <summary>Clears the value of the "is_predicted_to_be_ignored" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearIsPredictedToBeIgnored() {
    _hasBits0 &= ~256;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BidRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BidRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Ip != other.Ip) return false;
    if(!userDataTreatment_.Equals(other.userDataTreatment_)) return false;
    if (GoogleUserId != other.GoogleUserId) return false;
    if (CookieVersion != other.CookieVersion) return false;
    if (CookieAgeSeconds != other.CookieAgeSeconds) return false;
    if (HostedMatchData != other.HostedMatchData) return false;
    if (UserAgent != other.UserAgent) return false;
    if (PublisherCountry != other.PublisherCountry) return false;
    if (GeoCriteriaId != other.GeoCriteriaId) return false;
    if (PostalCode != other.PostalCode) return false;
    if (PostalCodePrefix != other.PostalCodePrefix) return false;
    if (EncryptedHyperlocalSet != other.EncryptedHyperlocalSet) return false;
    if (!object.Equals(HyperlocalSet, other.HyperlocalSet)) return false;
    if (TimezoneOffset != other.TimezoneOffset) return false;
    if(!userVertical_.Equals(other.userVertical_)) return false;
    if(!userList_.Equals(other.userList_)) return false;
    if (PublisherId != other.PublisherId) return false;
    if (SellerNetworkId != other.SellerNetworkId) return false;
    if (PartnerId != other.PartnerId) return false;
    if (Url != other.Url) return false;
    if (AnonymousId != other.AnonymousId) return false;
    if(!detectedLanguage_.Equals(other.detectedLanguage_)) return false;
    if(!detectedVertical_.Equals(other.detectedVertical_)) return false;
    if(!detectedContentLabel_.Equals(other.detectedContentLabel_)) return false;
    if (GoogleQueryId != other.GoogleQueryId) return false;
    if (AuctionType != other.AuctionType) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if(!keyValue_.Equals(other.keyValue_)) return false;
    if (!object.Equals(Mobile, other.Mobile)) return false;
    if (!object.Equals(Video, other.Video)) return false;
    if (PublisherSettingsListId != other.PublisherSettingsListId) return false;
    if (PublisherType != other.PublisherType) return false;
    if(!adslot_.Equals(other.adslot_)) return false;
    if(!bidResponseFeedback_.Equals(other.bidResponseFeedback_)) return false;
    if (ResponseDeadlineMs != other.ResponseDeadlineMs) return false;
    if (IsTest != other.IsTest) return false;
    if (IsPing != other.IsPing) return false;
    if (IsPredictedToBeIgnored != other.IsPredictedToBeIgnored) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HasId) hash ^= Id.GetHashCode();
    if (HasIp) hash ^= Ip.GetHashCode();
    hash ^= userDataTreatment_.GetHashCode();
    if (HasGoogleUserId) hash ^= GoogleUserId.GetHashCode();
    if (HasCookieVersion) hash ^= CookieVersion.GetHashCode();
    if (HasCookieAgeSeconds) hash ^= CookieAgeSeconds.GetHashCode();
    if (HasHostedMatchData) hash ^= HostedMatchData.GetHashCode();
    if (HasUserAgent) hash ^= UserAgent.GetHashCode();
    if (HasPublisherCountry) hash ^= PublisherCountry.GetHashCode();
    if (HasGeoCriteriaId) hash ^= GeoCriteriaId.GetHashCode();
    if (HasPostalCode) hash ^= PostalCode.GetHashCode();
    if (HasPostalCodePrefix) hash ^= PostalCodePrefix.GetHashCode();
    if (HasEncryptedHyperlocalSet) hash ^= EncryptedHyperlocalSet.GetHashCode();
    if (HasHyperlocalSet) hash ^= HyperlocalSet.GetHashCode();
    if (HasTimezoneOffset) hash ^= TimezoneOffset.GetHashCode();
    hash ^= userVertical_.GetHashCode();
    hash ^= userList_.GetHashCode();
    if (HasPublisherId) hash ^= PublisherId.GetHashCode();
    if (HasSellerNetworkId) hash ^= SellerNetworkId.GetHashCode();
    if (HasPartnerId) hash ^= PartnerId.GetHashCode();
    if (HasUrl) hash ^= Url.GetHashCode();
    if (HasAnonymousId) hash ^= AnonymousId.GetHashCode();
    hash ^= detectedLanguage_.GetHashCode();
    hash ^= detectedVertical_.GetHashCode();
    hash ^= detectedContentLabel_.GetHashCode();
    if (HasGoogleQueryId) hash ^= GoogleQueryId.GetHashCode();
    if (HasAuctionType) hash ^= AuctionType.GetHashCode();
    if (HasDevice) hash ^= Device.GetHashCode();
    hash ^= keyValue_.GetHashCode();
    if (HasMobile) hash ^= Mobile.GetHashCode();
    if (HasVideo) hash ^= Video.GetHashCode();
    if (HasPublisherSettingsListId) hash ^= PublisherSettingsListId.GetHashCode();
    if (HasPublisherType) hash ^= PublisherType.GetHashCode();
    hash ^= adslot_.GetHashCode();
    hash ^= bidResponseFeedback_.GetHashCode();
    if (HasResponseDeadlineMs) hash ^= ResponseDeadlineMs.GetHashCode();
    if (HasIsTest) hash ^= IsTest.GetHashCode();
    if (HasIsPing) hash ^= IsPing.GetHashCode();
    if (HasIsPredictedToBeIgnored) hash ^= IsPredictedToBeIgnored.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HasId) {
      output.WriteRawTag(18);
      output.WriteBytes(Id);
    }
    if (HasIp) {
      output.WriteRawTag(34);
      output.WriteBytes(Ip);
    }
    if (HasUserAgent) {
      output.WriteRawTag(50);
      output.WriteString(UserAgent);
    }
    if (HasUrl) {
      output.WriteRawTag(90);
      output.WriteString(Url);
    }
    detectedLanguage_.WriteTo(output, _repeated_detectedLanguage_codec);
    detectedVertical_.WriteTo(output, _repeated_detectedVertical_codec);
    adslot_.WriteTo(output, _repeated_adslot_codec);
    if (HasIsTest) {
      output.WriteRawTag(120);
      output.WriteBool(IsTest);
    }
    if (HasIsPing) {
      output.WriteRawTag(136, 1);
      output.WriteBool(IsPing);
    }
    if (HasAnonymousId) {
      output.WriteRawTag(154, 1);
      output.WriteString(AnonymousId);
    }
    if (HasCookieVersion) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(CookieVersion);
    }
    if (HasGoogleUserId) {
      output.WriteRawTag(170, 1);
      output.WriteString(GoogleUserId);
    }
    if (HasTimezoneOffset) {
      output.WriteRawTag(200, 1);
      output.WriteInt32(TimezoneOffset);
    }
    detectedContentLabel_.WriteTo(output, _repeated_detectedContentLabel_codec);
    if (HasMobile) {
      output.WriteRawTag(226, 1);
      output.WriteMessage(Mobile);
    }
    if (HasVideo) {
      output.WriteRawTag(234, 1);
      output.WriteMessage(Video);
    }
    userVertical_.WriteTo(output, _repeated_userVertical_codec);
    if (HasCookieAgeSeconds) {
      output.WriteRawTag(248, 1);
      output.WriteInt32(CookieAgeSeconds);
    }
    userList_.WriteTo(output, _repeated_userList_codec);
    if (HasPostalCode) {
      output.WriteRawTag(138, 2);
      output.WriteString(PostalCode);
    }
    if (HasPostalCodePrefix) {
      output.WriteRawTag(146, 2);
      output.WriteString(PostalCodePrefix);
    }
    if (HasHostedMatchData) {
      output.WriteRawTag(170, 2);
      output.WriteBytes(HostedMatchData);
    }
    keyValue_.WriteTo(output, _repeated_keyValue_codec);
    if (HasGeoCriteriaId) {
      output.WriteRawTag(184, 2);
      output.WriteInt32(GeoCriteriaId);
    }
    if (HasEncryptedHyperlocalSet) {
      output.WriteRawTag(194, 2);
      output.WriteBytes(EncryptedHyperlocalSet);
    }
    if (HasSellerNetworkId) {
      output.WriteRawTag(200, 2);
      output.WriteInt32(SellerNetworkId);
    }
    if (HasPublisherSettingsListId) {
      output.WriteRawTag(209, 2);
      output.WriteFixed64(PublisherSettingsListId);
    }
    bidResponseFeedback_.WriteTo(output, _repeated_bidResponseFeedback_codec);
    if (HasIsPredictedToBeIgnored) {
      output.WriteRawTag(232, 2);
      output.WriteBool(IsPredictedToBeIgnored);
    }
    userDataTreatment_.WriteTo(output, _repeated_userDataTreatment_codec);
    if (HasPublisherType) {
      output.WriteRawTag(152, 3);
      output.WriteEnum((int) PublisherType);
    }
    if (HasPartnerId) {
      output.WriteRawTag(161, 3);
      output.WriteFixed64(PartnerId);
    }
    if (HasHyperlocalSet) {
      output.WriteRawTag(170, 3);
      output.WriteMessage(HyperlocalSet);
    }
    if (HasDevice) {
      output.WriteRawTag(178, 3);
      output.WriteMessage(Device);
    }
    if (HasPublisherCountry) {
      output.WriteRawTag(186, 3);
      output.WriteString(PublisherCountry);
    }
    if (HasPublisherId) {
      output.WriteRawTag(194, 3);
      output.WriteString(PublisherId);
    }
    if (HasResponseDeadlineMs) {
      output.WriteRawTag(200, 3);
      output.WriteInt32(ResponseDeadlineMs);
    }
    if (HasGoogleQueryId) {
      output.WriteRawTag(218, 3);
      output.WriteString(GoogleQueryId);
    }
    if (HasAuctionType) {
      output.WriteRawTag(224, 3);
      output.WriteEnum((int) AuctionType);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HasId) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Id);
    }
    if (HasIp) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Ip);
    }
    size += userDataTreatment_.CalculateSize(_repeated_userDataTreatment_codec);
    if (HasGoogleUserId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GoogleUserId);
    }
    if (HasCookieVersion) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(CookieVersion);
    }
    if (HasCookieAgeSeconds) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(CookieAgeSeconds);
    }
    if (HasHostedMatchData) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(HostedMatchData);
    }
    if (HasUserAgent) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserAgent);
    }
    if (HasPublisherCountry) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PublisherCountry);
    }
    if (HasGeoCriteriaId) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(GeoCriteriaId);
    }
    if (HasPostalCode) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PostalCode);
    }
    if (HasPostalCodePrefix) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PostalCodePrefix);
    }
    if (HasEncryptedHyperlocalSet) {
      size += 2 + pb::CodedOutputStream.ComputeBytesSize(EncryptedHyperlocalSet);
    }
    if (HasHyperlocalSet) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(HyperlocalSet);
    }
    if (HasTimezoneOffset) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimezoneOffset);
    }
    size += userVertical_.CalculateSize(_repeated_userVertical_codec);
    size += userList_.CalculateSize(_repeated_userList_codec);
    if (HasPublisherId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(PublisherId);
    }
    if (HasSellerNetworkId) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(SellerNetworkId);
    }
    if (HasPartnerId) {
      size += 2 + 8;
    }
    if (HasUrl) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (HasAnonymousId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(AnonymousId);
    }
    size += detectedLanguage_.CalculateSize(_repeated_detectedLanguage_codec);
    size += detectedVertical_.CalculateSize(_repeated_detectedVertical_codec);
    size += detectedContentLabel_.CalculateSize(_repeated_detectedContentLabel_codec);
    if (HasGoogleQueryId) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GoogleQueryId);
    }
    if (HasAuctionType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AuctionType);
    }
    if (HasDevice) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    size += keyValue_.CalculateSize(_repeated_keyValue_codec);
    if (HasMobile) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Mobile);
    }
    if (HasVideo) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Video);
    }
    if (HasPublisherSettingsListId) {
      size += 2 + 8;
    }
    if (HasPublisherType) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) PublisherType);
    }
    size += adslot_.CalculateSize(_repeated_adslot_codec);
    size += bidResponseFeedback_.CalculateSize(_repeated_bidResponseFeedback_codec);
    if (HasResponseDeadlineMs) {
      size += 2 + pb::CodedOutputStream.ComputeInt32Size(ResponseDeadlineMs);
    }
    if (HasIsTest) {
      size += 1 + 1;
    }
    if (HasIsPing) {
      size += 2 + 1;
    }
    if (HasIsPredictedToBeIgnored) {
      size += 2 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BidRequest other) {
    if (other == null) {
      return;
    }
    if (other.HasId) {
      Id = other.Id;
    }
    if (other.HasIp) {
      Ip = other.Ip;
    }
    userDataTreatment_.Add(other.userDataTreatment_);
    if (other.HasGoogleUserId) {
      GoogleUserId = other.GoogleUserId;
    }
    if (other.HasCookieVersion) {
      CookieVersion = other.CookieVersion;
    }
    if (other.HasCookieAgeSeconds) {
      CookieAgeSeconds = other.CookieAgeSeconds;
    }
    if (other.HasHostedMatchData) {
      HostedMatchData = other.HostedMatchData;
    }
    if (other.HasUserAgent) {
      UserAgent = other.UserAgent;
    }
    if (other.HasPublisherCountry) {
      PublisherCountry = other.PublisherCountry;
    }
    if (other.HasGeoCriteriaId) {
      GeoCriteriaId = other.GeoCriteriaId;
    }
    if (other.HasPostalCode) {
      PostalCode = other.PostalCode;
    }
    if (other.HasPostalCodePrefix) {
      PostalCodePrefix = other.PostalCodePrefix;
    }
    if (other.HasEncryptedHyperlocalSet) {
      EncryptedHyperlocalSet = other.EncryptedHyperlocalSet;
    }
    if (other.HasHyperlocalSet) {
      if (!HasHyperlocalSet) {
        HyperlocalSet = new global::BidRequest.Types.HyperlocalSet();
      }
      HyperlocalSet.MergeFrom(other.HyperlocalSet);
    }
    if (other.HasTimezoneOffset) {
      TimezoneOffset = other.TimezoneOffset;
    }
    userVertical_.Add(other.userVertical_);
    userList_.Add(other.userList_);
    if (other.HasPublisherId) {
      PublisherId = other.PublisherId;
    }
    if (other.HasSellerNetworkId) {
      SellerNetworkId = other.SellerNetworkId;
    }
    if (other.HasPartnerId) {
      PartnerId = other.PartnerId;
    }
    if (other.HasUrl) {
      Url = other.Url;
    }
    if (other.HasAnonymousId) {
      AnonymousId = other.AnonymousId;
    }
    detectedLanguage_.Add(other.detectedLanguage_);
    detectedVertical_.Add(other.detectedVertical_);
    detectedContentLabel_.Add(other.detectedContentLabel_);
    if (other.HasGoogleQueryId) {
      GoogleQueryId = other.GoogleQueryId;
    }
    if (other.HasAuctionType) {
      AuctionType = other.AuctionType;
    }
    if (other.HasDevice) {
      if (!HasDevice) {
        Device = new global::BidRequest.Types.Device();
      }
      Device.MergeFrom(other.Device);
    }
    keyValue_.Add(other.keyValue_);
    if (other.HasMobile) {
      if (!HasMobile) {
        Mobile = new global::BidRequest.Types.Mobile();
      }
      Mobile.MergeFrom(other.Mobile);
    }
    if (other.HasVideo) {
      if (!HasVideo) {
        Video = new global::BidRequest.Types.Video();
      }
      Video.MergeFrom(other.Video);
    }
    if (other.HasPublisherSettingsListId) {
      PublisherSettingsListId = other.PublisherSettingsListId;
    }
    if (other.HasPublisherType) {
      PublisherType = other.PublisherType;
    }
    adslot_.Add(other.adslot_);
    bidResponseFeedback_.Add(other.bidResponseFeedback_);
    if (other.HasResponseDeadlineMs) {
      ResponseDeadlineMs = other.ResponseDeadlineMs;
    }
    if (other.HasIsTest) {
      IsTest = other.IsTest;
    }
    if (other.HasIsPing) {
      IsPing = other.IsPing;
    }
    if (other.HasIsPredictedToBeIgnored) {
      IsPredictedToBeIgnored = other.IsPredictedToBeIgnored;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          Id = input.ReadBytes();
          break;
        }
        case 34: {
          Ip = input.ReadBytes();
          break;
        }
        case 50: {
          UserAgent = input.ReadString();
          break;
        }
        case 90: {
          Url = input.ReadString();
          break;
        }
        case 98: {
          detectedLanguage_.AddEntriesFrom(input, _repeated_detectedLanguage_codec);
          break;
        }
        case 106: {
          detectedVertical_.AddEntriesFrom(input, _repeated_detectedVertical_codec);
          break;
        }
        case 114: {
          adslot_.AddEntriesFrom(input, _repeated_adslot_codec);
          break;
        }
        case 120: {
          IsTest = input.ReadBool();
          break;
        }
        case 136: {
          IsPing = input.ReadBool();
          break;
        }
        case 154: {
          AnonymousId = input.ReadString();
          break;
        }
        case 160: {
          CookieVersion = input.ReadUInt32();
          break;
        }
        case 170: {
          GoogleUserId = input.ReadString();
          break;
        }
        case 200: {
          TimezoneOffset = input.ReadInt32();
          break;
        }
        case 210:
        case 208: {
          detectedContentLabel_.AddEntriesFrom(input, _repeated_detectedContentLabel_codec);
          break;
        }
        case 226: {
          if (!HasMobile) {
            Mobile = new global::BidRequest.Types.Mobile();
          }
          input.ReadMessage(Mobile);
          break;
        }
        case 234: {
          if (!HasVideo) {
            Video = new global::BidRequest.Types.Video();
          }
          input.ReadMessage(Video);
          break;
        }
        case 242:
        case 240: {
          userVertical_.AddEntriesFrom(input, _repeated_userVertical_codec);
          break;
        }
        case 248: {
          CookieAgeSeconds = input.ReadInt32();
          break;
        }
        case 258: {
          userList_.AddEntriesFrom(input, _repeated_userList_codec);
          break;
        }
        case 266: {
          PostalCode = input.ReadString();
          break;
        }
        case 274: {
          PostalCodePrefix = input.ReadString();
          break;
        }
        case 298: {
          HostedMatchData = input.ReadBytes();
          break;
        }
        case 306: {
          keyValue_.AddEntriesFrom(input, _repeated_keyValue_codec);
          break;
        }
        case 312: {
          GeoCriteriaId = input.ReadInt32();
          break;
        }
        case 322: {
          EncryptedHyperlocalSet = input.ReadBytes();
          break;
        }
        case 328: {
          SellerNetworkId = input.ReadInt32();
          break;
        }
        case 337: {
          PublisherSettingsListId = input.ReadFixed64();
          break;
        }
        case 354: {
          bidResponseFeedback_.AddEntriesFrom(input, _repeated_bidResponseFeedback_codec);
          break;
        }
        case 360: {
          IsPredictedToBeIgnored = input.ReadBool();
          break;
        }
        case 394:
        case 392: {
          userDataTreatment_.AddEntriesFrom(input, _repeated_userDataTreatment_codec);
          break;
        }
        case 408: {
          PublisherType = (global::BidRequest.Types.PublisherType) input.ReadEnum();
          break;
        }
        case 417: {
          PartnerId = input.ReadFixed64();
          break;
        }
        case 426: {
          if (!HasHyperlocalSet) {
            HyperlocalSet = new global::BidRequest.Types.HyperlocalSet();
          }
          input.ReadMessage(HyperlocalSet);
          break;
        }
        case 434: {
          if (!HasDevice) {
            Device = new global::BidRequest.Types.Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 442: {
          PublisherCountry = input.ReadString();
          break;
        }
        case 450: {
          PublisherId = input.ReadString();
          break;
        }
        case 456: {
          ResponseDeadlineMs = input.ReadInt32();
          break;
        }
        case 474: {
          GoogleQueryId = input.ReadString();
          break;
        }
        case 480: {
          AuctionType = (global::BidRequest.Types.AuctionType) input.ReadEnum();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BidRequest message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    /// <summary>
    /// Reasons for special treatment of user data (google_user_id,
    /// hosted_match_data, IDFA, etc).
    /// </summary>
    public enum UserDataTreatment {
      /// <summary>
      /// The current request should be treated as child-directed for purposes of
      /// the Children's Online Privacy Protection Act. See
      /// https://support.google.com/admanager/answer/4442399 for more information.
      /// </summary>
      [pbr::OriginalName("TAG_FOR_CHILD_DIRECTED_TREATMENT")] TagForChildDirectedTreatment = 0,
    }

    /// <summary>
    /// The type of auction that will be run for this query.
    /// </summary>
    public enum AuctionType {
      [pbr::OriginalName("UNKNOWN_AUCTION_TYPE")] UnknownAuctionType = 0,
      [pbr::OriginalName("FIRST_PRICE")] FirstPrice = 1,
      [pbr::OriginalName("SECOND_PRICE")] SecondPrice = 2,
      [pbr::OriginalName("FIXED_PRICE")] FixedPrice = 3,
    }

    /// <summary>
    /// Publisher type of the inventory where the ad will be shown. For an AdX
    /// publisher, its inventory can be either owned and operated (O&amp;O),
    /// represented by the publisher, or of unknown status. AdSense and AdMob
    /// inventory is represented by Google.
    /// </summary>
    public enum PublisherType {
      [pbr::OriginalName("UNKNOWN_PUBLISHER_TYPE")] UnknownPublisherType = 0,
      [pbr::OriginalName("ADX_PUBLISHER_OWNED_AND_OPERATED")] AdxPublisherOwnedAndOperated = 1,
      [pbr::OriginalName("ADX_PUBLISHER_REPRESENTED")] AdxPublisherRepresented = 2,
      [pbr::OriginalName("GOOGLE_REPRESENTED")] GoogleRepresented = 3,
    }

    /// <summary>
    /// A hyperlocal targeting location when available.
    /// </summary>
    public sealed partial class Hyperlocal : pb::IMessage<Hyperlocal> {
      private static readonly pb::MessageParser<Hyperlocal> _parser = new pb::MessageParser<Hyperlocal>(() => new Hyperlocal());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Hyperlocal> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Hyperlocal() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Hyperlocal(Hyperlocal other) : this() {
        corners_ = other.corners_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Hyperlocal Clone() {
        return new Hyperlocal(this);
      }

      /// <summary>Field number for the "corners" field.</summary>
      public const int CornersFieldNumber = 1;
      private static readonly pb::FieldCodec<global::BidRequest.Types.Hyperlocal.Types.Point> _repeated_corners_codec
          = pb::FieldCodec.ForMessage(10, global::BidRequest.Types.Hyperlocal.Types.Point.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.Hyperlocal.Types.Point> corners_ = new pbc::RepeatedField<global::BidRequest.Types.Hyperlocal.Types.Point>();
      /// <summary>
      /// The mobile device can be at any point inside the geofence polygon defined
      /// by a list of corners. Currently, the polygon is always a parallelogram
      /// with 4 corners.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.Hyperlocal.Types.Point> Corners {
        get { return corners_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Hyperlocal);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Hyperlocal other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!corners_.Equals(other.corners_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= corners_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        corners_.WriteTo(output, _repeated_corners_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        size += corners_.CalculateSize(_repeated_corners_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Hyperlocal other) {
        if (other == null) {
          return;
        }
        corners_.Add(other.corners_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              corners_.AddEntriesFrom(input, _repeated_corners_codec);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Hyperlocal message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        /// <summary>
        /// A location on the Earth's surface.
        /// </summary>
        public sealed partial class Point : pb::IMessage<Point> {
          private static readonly pb::MessageParser<Point> _parser = new pb::MessageParser<Point>(() => new Point());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<Point> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.Hyperlocal.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Point() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Point(Point other) : this() {
            _hasBits0 = other._hasBits0;
            latitude_ = other.latitude_;
            longitude_ = other.longitude_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public Point Clone() {
            return new Point(this);
          }

          /// <summary>Field number for the "latitude" field.</summary>
          public const int LatitudeFieldNumber = 1;
          private readonly static float LatitudeDefaultValue = 0F;

          private float latitude_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public float Latitude {
            get { if ((_hasBits0 & 1) != 0) { return latitude_; } else { return LatitudeDefaultValue; } }
            set {
              _hasBits0 |= 1;
              latitude_ = value;
            }
          }
          /// <summary>Gets whether the "latitude" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasLatitude {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "latitude" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearLatitude() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "longitude" field.</summary>
          public const int LongitudeFieldNumber = 2;
          private readonly static float LongitudeDefaultValue = 0F;

          private float longitude_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public float Longitude {
            get { if ((_hasBits0 & 2) != 0) { return longitude_; } else { return LongitudeDefaultValue; } }
            set {
              _hasBits0 |= 2;
              longitude_ = value;
            }
          }
          /// <summary>Gets whether the "longitude" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasLongitude {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "longitude" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearLongitude() {
            _hasBits0 &= ~2;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as Point);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(Point other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasLatitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
            if (HasLongitude) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasLatitude) {
              output.WriteRawTag(13);
              output.WriteFloat(Latitude);
            }
            if (HasLongitude) {
              output.WriteRawTag(21);
              output.WriteFloat(Longitude);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasLatitude) {
              size += 1 + 4;
            }
            if (HasLongitude) {
              size += 1 + 4;
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(Point other) {
            if (other == null) {
              return;
            }
            if (other.HasLatitude) {
              Latitude = other.Latitude;
            }
            if (other.HasLongitude) {
              Longitude = other.Longitude;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 13: {
                  Latitude = input.ReadFloat();
                  break;
                }
                case 21: {
                  Longitude = input.ReadFloat();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    public sealed partial class HyperlocalSet : pb::IMessage<HyperlocalSet> {
      private static readonly pb::MessageParser<HyperlocalSet> _parser = new pb::MessageParser<HyperlocalSet>(() => new HyperlocalSet());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<HyperlocalSet> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[1]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public HyperlocalSet() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public HyperlocalSet(HyperlocalSet other) : this() {
        hyperlocal_ = other.hyperlocal_.Clone();
        centerPoint_ = other.HasCenterPoint ? other.centerPoint_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public HyperlocalSet Clone() {
        return new HyperlocalSet(this);
      }

      /// <summary>Field number for the "hyperlocal" field.</summary>
      public const int HyperlocalFieldNumber = 1;
      private static readonly pb::FieldCodec<global::BidRequest.Types.Hyperlocal> _repeated_hyperlocal_codec
          = pb::FieldCodec.ForMessage(10, global::BidRequest.Types.Hyperlocal.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.Hyperlocal> hyperlocal_ = new pbc::RepeatedField<global::BidRequest.Types.Hyperlocal>();
      /// <summary>
      /// This field currently contains at most one hyperlocal polygon.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.Hyperlocal> Hyperlocal {
        get { return hyperlocal_; }
      }

      /// <summary>Field number for the "center_point" field.</summary>
      public const int CenterPointFieldNumber = 2;
      private global::BidRequest.Types.Hyperlocal.Types.Point centerPoint_;
      /// <summary>
      /// The approximate geometric center of the geofence area. It is calculated
      /// exclusively based on the geometric shape of the geofence area and in no
      /// way indicates the mobile device's actual location within the geofence
      /// area. If multiple hyperlocal polygons are specified above then
      /// center_point is the geometric center of all hyperlocal polygons.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Hyperlocal.Types.Point CenterPoint {
        get { return centerPoint_; }
        set {
          centerPoint_ = value;
        }
      }
      /// <summary>Gets whether the center_point field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasCenterPoint {
        get { return centerPoint_ != null; }
      }
      /// <summary>Clears the value of the center_point field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearCenterPoint() {
        centerPoint_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as HyperlocalSet);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(HyperlocalSet other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if(!hyperlocal_.Equals(other.hyperlocal_)) return false;
        if (!object.Equals(CenterPoint, other.CenterPoint)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        hash ^= hyperlocal_.GetHashCode();
        if (HasCenterPoint) hash ^= CenterPoint.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        hyperlocal_.WriteTo(output, _repeated_hyperlocal_codec);
        if (HasCenterPoint) {
          output.WriteRawTag(18);
          output.WriteMessage(CenterPoint);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        size += hyperlocal_.CalculateSize(_repeated_hyperlocal_codec);
        if (HasCenterPoint) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(CenterPoint);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(HyperlocalSet other) {
        if (other == null) {
          return;
        }
        hyperlocal_.Add(other.hyperlocal_);
        if (other.HasCenterPoint) {
          if (!HasCenterPoint) {
            CenterPoint = new global::BidRequest.Types.Hyperlocal.Types.Point();
          }
          CenterPoint.MergeFrom(other.CenterPoint);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              hyperlocal_.AddEntriesFrom(input, _repeated_hyperlocal_codec);
              break;
            }
            case 18: {
              if (!HasCenterPoint) {
                CenterPoint = new global::BidRequest.Types.Hyperlocal.Types.Point();
              }
              input.ReadMessage(CenterPoint);
              break;
            }
          }
        }
      }

    }

    /// <summary>
    /// This field is not populated by default. We recommend that bidders instead
    /// store and look up list ids using either google_user_id or hosted_match_data
    /// as keys.
    /// </summary>
    public sealed partial class UserList : pb::IMessage<UserList> {
      private static readonly pb::MessageParser<UserList> _parser = new pb::MessageParser<UserList>(() => new UserList());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<UserList> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[2]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public UserList() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public UserList(UserList other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        ageSeconds_ = other.ageSeconds_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public UserList Clone() {
        return new UserList(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static long IdDefaultValue = 0L;

      private long id_;
      /// <summary>
      /// The user list id.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "age_seconds" field.</summary>
      public const int AgeSecondsFieldNumber = 2;
      private readonly static int AgeSecondsDefaultValue = 0;

      private int ageSeconds_;
      /// <summary>
      /// The time in seconds since the user was added to the list.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int AgeSeconds {
        get { if ((_hasBits0 & 2) != 0) { return ageSeconds_; } else { return AgeSecondsDefaultValue; } }
        set {
          _hasBits0 |= 2;
          ageSeconds_ = value;
        }
      }
      /// <summary>Gets whether the "age_seconds" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAgeSeconds {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "age_seconds" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAgeSeconds() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as UserList);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(UserList other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (AgeSeconds != other.AgeSeconds) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasAgeSeconds) hash ^= AgeSeconds.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteInt64(Id);
        }
        if (HasAgeSeconds) {
          output.WriteRawTag(16);
          output.WriteInt32(AgeSeconds);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
        }
        if (HasAgeSeconds) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(AgeSeconds);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(UserList other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAgeSeconds) {
          AgeSeconds = other.AgeSeconds;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadInt64();
              break;
            }
            case 16: {
              AgeSeconds = input.ReadInt32();
              break;
            }
          }
        }
      }

    }

    /// <summary>
    /// One or more detected verticals for the page as determined by Google.
    /// </summary>
    public sealed partial class Vertical : pb::IMessage<Vertical> {
      private static readonly pb::MessageParser<Vertical> _parser = new pb::MessageParser<Vertical>(() => new Vertical());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Vertical> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[3]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vertical() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vertical(Vertical other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        weight_ = other.weight_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Vertical Clone() {
        return new Vertical(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static int IdDefaultValue = 0;

      private int id_;
      /// <summary>
      /// The vertical id. See the publisher-verticals.txt file in the technical
      /// documentation for a list of ids.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "weight" field.</summary>
      public const int WeightFieldNumber = 2;
      private readonly static float WeightDefaultValue = 0F;

      private float weight_;
      /// <summary>
      /// Weight for this vertical, in the (0.0, 1.0] range. More relevant
      /// verticals have higher weights.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Weight {
        get { if ((_hasBits0 & 2) != 0) { return weight_; } else { return WeightDefaultValue; } }
        set {
          _hasBits0 |= 2;
          weight_ = value;
        }
      }
      /// <summary>Gets whether the "weight" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasWeight {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "weight" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearWeight() {
        _hasBits0 &= ~2;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Vertical);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Vertical other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Weight, other.Weight)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasWeight) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Weight);
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteInt32(Id);
        }
        if (HasWeight) {
          output.WriteRawTag(21);
          output.WriteFloat(Weight);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
        }
        if (HasWeight) {
          size += 1 + 4;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Vertical other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasWeight) {
          Weight = other.Weight;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadInt32();
              break;
            }
            case 21: {
              Weight = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

    /// <summary>
    /// Information about the device.
    /// </summary>
    public sealed partial class Device : pb::IMessage<Device> {
      private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Device> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[4]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Device() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Device(Device other) : this() {
        _hasBits0 = other._hasBits0;
        deviceType_ = other.deviceType_;
        platform_ = other.platform_;
        brand_ = other.brand_;
        model_ = other.model_;
        osVersion_ = other.HasOsVersion ? other.osVersion_.Clone() : null;
        carrierId_ = other.carrierId_;
        screenWidth_ = other.screenWidth_;
        screenHeight_ = other.screenHeight_;
        screenPixelRatioMillis_ = other.screenPixelRatioMillis_;
        screenOrientation_ = other.screenOrientation_;
        hardwareVersion_ = other.hardwareVersion_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Device Clone() {
        return new Device(this);
      }

      /// <summary>Field number for the "device_type" field.</summary>
      public const int DeviceTypeFieldNumber = 1;
      private readonly static global::BidRequest.Types.Device.Types.DeviceType DeviceTypeDefaultValue = global::BidRequest.Types.Device.Types.DeviceType.UnknownDevice;

      private global::BidRequest.Types.Device.Types.DeviceType deviceType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Device.Types.DeviceType DeviceType {
        get { if ((_hasBits0 & 1) != 0) { return deviceType_; } else { return DeviceTypeDefaultValue; } }
        set {
          _hasBits0 |= 1;
          deviceType_ = value;
        }
      }
      /// <summary>Gets whether the "device_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDeviceType {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "device_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDeviceType() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "platform" field.</summary>
      public const int PlatformFieldNumber = 2;
      private readonly static string PlatformDefaultValue = "";

      private string platform_;
      /// <summary>
      /// The platform of the device. Examples: android, iphone, palm
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Platform {
        get { return platform_ ?? PlatformDefaultValue; }
        set {
          platform_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "platform" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasPlatform {
        get { return platform_ != null; }
      }
      /// <summary>Clears the value of the "platform" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearPlatform() {
        platform_ = null;
      }

      /// <summary>Field number for the "brand" field.</summary>
      public const int BrandFieldNumber = 3;
      private readonly static string BrandDefaultValue = "";

      private string brand_;
      /// <summary>
      /// The brand of the device, e.g. Nokia, Samsung.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Brand {
        get { return brand_ ?? BrandDefaultValue; }
        set {
          brand_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "brand" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBrand {
        get { return brand_ != null; }
      }
      /// <summary>Clears the value of the "brand" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBrand() {
        brand_ = null;
      }

      /// <summary>Field number for the "model" field.</summary>
      public const int ModelFieldNumber = 4;
      private readonly static string ModelDefaultValue = "";

      private string model_;
      /// <summary>
      /// The model of the device, e.g. N70, Galaxy.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Model {
        get { return model_ ?? ModelDefaultValue; }
        set {
          model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "model" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasModel {
        get { return model_ != null; }
      }
      /// <summary>Clears the value of the "model" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearModel() {
        model_ = null;
      }

      /// <summary>Field number for the "os_version" field.</summary>
      public const int OsVersionFieldNumber = 5;
      private global::BidRequest.Types.Device.Types.OsVersion osVersion_;
      /// <summary>
      /// The OS version; e.g. 2 for Android 2.1, or 3.3 for iOS 3.3.1.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Device.Types.OsVersion OsVersion {
        get { return osVersion_; }
        set {
          osVersion_ = value;
        }
      }
      /// <summary>Gets whether the os_version field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasOsVersion {
        get { return osVersion_ != null; }
      }
      /// <summary>Clears the value of the os_version field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearOsVersion() {
        osVersion_ = null;
      }

      /// <summary>Field number for the "carrier_id" field.</summary>
      public const int CarrierIdFieldNumber = 6;
      private readonly static long CarrierIdDefaultValue = 0L;

      private long carrierId_;
      /// <summary>
      /// Unique identifier for the mobile carrier if the device is connected to
      /// the internet via a carrier (as opposed to via WiFi). To look up carrier
      /// name and country from carrier ID, please refer to:
      /// https://developers.google.com/adwords/api/docs/appendix/mobilecarriers.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long CarrierId {
        get { if ((_hasBits0 & 2) != 0) { return carrierId_; } else { return CarrierIdDefaultValue; } }
        set {
          _hasBits0 |= 2;
          carrierId_ = value;
        }
      }
      /// <summary>Gets whether the "carrier_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasCarrierId {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "carrier_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearCarrierId() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "screen_width" field.</summary>
      public const int ScreenWidthFieldNumber = 7;
      private readonly static int ScreenWidthDefaultValue = 0;

      private int screenWidth_;
      /// <summary>
      /// The width of the device screen in pixels.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ScreenWidth {
        get { if ((_hasBits0 & 4) != 0) { return screenWidth_; } else { return ScreenWidthDefaultValue; } }
        set {
          _hasBits0 |= 4;
          screenWidth_ = value;
        }
      }
      /// <summary>Gets whether the "screen_width" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasScreenWidth {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "screen_width" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearScreenWidth() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "screen_height" field.</summary>
      public const int ScreenHeightFieldNumber = 8;
      private readonly static int ScreenHeightDefaultValue = 0;

      private int screenHeight_;
      /// <summary>
      /// The height of the device screen in pixels.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ScreenHeight {
        get { if ((_hasBits0 & 8) != 0) { return screenHeight_; } else { return ScreenHeightDefaultValue; } }
        set {
          _hasBits0 |= 8;
          screenHeight_ = value;
        }
      }
      /// <summary>Gets whether the "screen_height" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasScreenHeight {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "screen_height" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearScreenHeight() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "screen_pixel_ratio_millis" field.</summary>
      public const int ScreenPixelRatioMillisFieldNumber = 9;
      private readonly static int ScreenPixelRatioMillisDefaultValue = 0;

      private int screenPixelRatioMillis_;
      /// <summary>
      /// Used for high-density devices (e.g. iOS retina displays). A non-default
      /// value indicates that the nominal screen size (with pixels as the unit)
      /// does not describe the actual number of pixels in the screen. For example,
      /// nominal width and height may be 320x640 for a screen that actually has
      /// 640x1080 pixels, in which case screen_width=320, screen_height=640, and
      /// screen_pixel_ratio_millis=2000, since each axis has twice as many pixels
      /// as its dimensions would indicate.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int ScreenPixelRatioMillis {
        get { if ((_hasBits0 & 16) != 0) { return screenPixelRatioMillis_; } else { return ScreenPixelRatioMillisDefaultValue; } }
        set {
          _hasBits0 |= 16;
          screenPixelRatioMillis_ = value;
        }
      }
      /// <summary>Gets whether the "screen_pixel_ratio_millis" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasScreenPixelRatioMillis {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "screen_pixel_ratio_millis" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearScreenPixelRatioMillis() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "screen_orientation" field.</summary>
      public const int ScreenOrientationFieldNumber = 10;
      private readonly static global::BidRequest.Types.Device.Types.ScreenOrientation ScreenOrientationDefaultValue = global::BidRequest.Types.Device.Types.ScreenOrientation.UnknownOrientation;

      private global::BidRequest.Types.Device.Types.ScreenOrientation screenOrientation_;
      /// <summary>
      /// The screen orientation of the device when the ad request is sent.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Device.Types.ScreenOrientation ScreenOrientation {
        get { if ((_hasBits0 & 32) != 0) { return screenOrientation_; } else { return ScreenOrientationDefaultValue; } }
        set {
          _hasBits0 |= 32;
          screenOrientation_ = value;
        }
      }
      /// <summary>Gets whether the "screen_orientation" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasScreenOrientation {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "screen_orientation" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearScreenOrientation() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "hardware_version" field.</summary>
      public const int HardwareVersionFieldNumber = 11;
      private readonly static string HardwareVersionDefaultValue = "";

      private string hardwareVersion_;
      /// <summary>
      /// Apple iOS device model, e.g., "iphone 5s", "iphone 6+", "ipad 4".
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string HardwareVersion {
        get { return hardwareVersion_ ?? HardwareVersionDefaultValue; }
        set {
          hardwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "hardware_version" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasHardwareVersion {
        get { return hardwareVersion_ != null; }
      }
      /// <summary>Clears the value of the "hardware_version" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearHardwareVersion() {
        hardwareVersion_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Device);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Device other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (DeviceType != other.DeviceType) return false;
        if (Platform != other.Platform) return false;
        if (Brand != other.Brand) return false;
        if (Model != other.Model) return false;
        if (!object.Equals(OsVersion, other.OsVersion)) return false;
        if (CarrierId != other.CarrierId) return false;
        if (ScreenWidth != other.ScreenWidth) return false;
        if (ScreenHeight != other.ScreenHeight) return false;
        if (ScreenPixelRatioMillis != other.ScreenPixelRatioMillis) return false;
        if (ScreenOrientation != other.ScreenOrientation) return false;
        if (HardwareVersion != other.HardwareVersion) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasDeviceType) hash ^= DeviceType.GetHashCode();
        if (HasPlatform) hash ^= Platform.GetHashCode();
        if (HasBrand) hash ^= Brand.GetHashCode();
        if (HasModel) hash ^= Model.GetHashCode();
        if (HasOsVersion) hash ^= OsVersion.GetHashCode();
        if (HasCarrierId) hash ^= CarrierId.GetHashCode();
        if (HasScreenWidth) hash ^= ScreenWidth.GetHashCode();
        if (HasScreenHeight) hash ^= ScreenHeight.GetHashCode();
        if (HasScreenPixelRatioMillis) hash ^= ScreenPixelRatioMillis.GetHashCode();
        if (HasScreenOrientation) hash ^= ScreenOrientation.GetHashCode();
        if (HasHardwareVersion) hash ^= HardwareVersion.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasDeviceType) {
          output.WriteRawTag(8);
          output.WriteEnum((int) DeviceType);
        }
        if (HasPlatform) {
          output.WriteRawTag(18);
          output.WriteString(Platform);
        }
        if (HasBrand) {
          output.WriteRawTag(26);
          output.WriteString(Brand);
        }
        if (HasModel) {
          output.WriteRawTag(34);
          output.WriteString(Model);
        }
        if (HasOsVersion) {
          output.WriteRawTag(42);
          output.WriteMessage(OsVersion);
        }
        if (HasCarrierId) {
          output.WriteRawTag(48);
          output.WriteInt64(CarrierId);
        }
        if (HasScreenWidth) {
          output.WriteRawTag(56);
          output.WriteInt32(ScreenWidth);
        }
        if (HasScreenHeight) {
          output.WriteRawTag(64);
          output.WriteInt32(ScreenHeight);
        }
        if (HasScreenPixelRatioMillis) {
          output.WriteRawTag(72);
          output.WriteInt32(ScreenPixelRatioMillis);
        }
        if (HasScreenOrientation) {
          output.WriteRawTag(80);
          output.WriteEnum((int) ScreenOrientation);
        }
        if (HasHardwareVersion) {
          output.WriteRawTag(90);
          output.WriteString(HardwareVersion);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasDeviceType) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
        }
        if (HasPlatform) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Platform);
        }
        if (HasBrand) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Brand);
        }
        if (HasModel) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
        }
        if (HasOsVersion) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(OsVersion);
        }
        if (HasCarrierId) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(CarrierId);
        }
        if (HasScreenWidth) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScreenWidth);
        }
        if (HasScreenHeight) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScreenHeight);
        }
        if (HasScreenPixelRatioMillis) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScreenPixelRatioMillis);
        }
        if (HasScreenOrientation) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ScreenOrientation);
        }
        if (HasHardwareVersion) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareVersion);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Device other) {
        if (other == null) {
          return;
        }
        if (other.HasDeviceType) {
          DeviceType = other.DeviceType;
        }
        if (other.HasPlatform) {
          Platform = other.Platform;
        }
        if (other.HasBrand) {
          Brand = other.Brand;
        }
        if (other.HasModel) {
          Model = other.Model;
        }
        if (other.HasOsVersion) {
          if (!HasOsVersion) {
            OsVersion = new global::BidRequest.Types.Device.Types.OsVersion();
          }
          OsVersion.MergeFrom(other.OsVersion);
        }
        if (other.HasCarrierId) {
          CarrierId = other.CarrierId;
        }
        if (other.HasScreenWidth) {
          ScreenWidth = other.ScreenWidth;
        }
        if (other.HasScreenHeight) {
          ScreenHeight = other.ScreenHeight;
        }
        if (other.HasScreenPixelRatioMillis) {
          ScreenPixelRatioMillis = other.ScreenPixelRatioMillis;
        }
        if (other.HasScreenOrientation) {
          ScreenOrientation = other.ScreenOrientation;
        }
        if (other.HasHardwareVersion) {
          HardwareVersion = other.HardwareVersion;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              DeviceType = (global::BidRequest.Types.Device.Types.DeviceType) input.ReadEnum();
              break;
            }
            case 18: {
              Platform = input.ReadString();
              break;
            }
            case 26: {
              Brand = input.ReadString();
              break;
            }
            case 34: {
              Model = input.ReadString();
              break;
            }
            case 42: {
              if (!HasOsVersion) {
                OsVersion = new global::BidRequest.Types.Device.Types.OsVersion();
              }
              input.ReadMessage(OsVersion);
              break;
            }
            case 48: {
              CarrierId = input.ReadInt64();
              break;
            }
            case 56: {
              ScreenWidth = input.ReadInt32();
              break;
            }
            case 64: {
              ScreenHeight = input.ReadInt32();
              break;
            }
            case 72: {
              ScreenPixelRatioMillis = input.ReadInt32();
              break;
            }
            case 80: {
              ScreenOrientation = (global::BidRequest.Types.Device.Types.ScreenOrientation) input.ReadEnum();
              break;
            }
            case 90: {
              HardwareVersion = input.ReadString();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Device message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        /// <summary>
        /// The type of device on which the ad will be shown.
        /// </summary>
        public enum DeviceType {
          [pbr::OriginalName("UNKNOWN_DEVICE")] UnknownDevice = 0,
          [pbr::OriginalName("HIGHEND_PHONE")] HighendPhone = 1,
          [pbr::OriginalName("TABLET")] Tablet = 2,
          /// <summary>
          /// Desktop or laptop devices.
          /// </summary>
          [pbr::OriginalName("PERSONAL_COMPUTER")] PersonalComputer = 3,
          /// <summary>
          /// Both connected TVs (that is, smart TVs) and connected devices
          /// (such as Roku and Apple TV).
          /// </summary>
          [pbr::OriginalName("CONNECTED_TV")] ConnectedTv = 4,
          [pbr::OriginalName("GAME_CONSOLE")] GameConsole = 5,
          [pbr::OriginalName("SET_TOP_BOX")] SetTopBox = 6,
        }

        public enum ScreenOrientation {
          [pbr::OriginalName("UNKNOWN_ORIENTATION")] UnknownOrientation = 0,
          [pbr::OriginalName("PORTRAIT")] Portrait = 1,
          [pbr::OriginalName("LANDSCAPE")] Landscape = 2,
        }

        /// <summary>
        /// Contains the OS version of the platform. For instance, for Android 2,
        /// major=2, minor=0. For iPhone 3.3.1, major=3 and minor=3.
        /// </summary>
        public sealed partial class OsVersion : pb::IMessage<OsVersion> {
          private static readonly pb::MessageParser<OsVersion> _parser = new pb::MessageParser<OsVersion>(() => new OsVersion());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<OsVersion> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.Device.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public OsVersion() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public OsVersion(OsVersion other) : this() {
            _hasBits0 = other._hasBits0;
            major_ = other.major_;
            minor_ = other.minor_;
            micro_ = other.micro_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public OsVersion Clone() {
            return new OsVersion(this);
          }

          /// <summary>Field number for the "major" field.</summary>
          public const int MajorFieldNumber = 1;
          private readonly static int MajorDefaultValue = -1;

          private int major_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int Major {
            get { if ((_hasBits0 & 1) != 0) { return major_; } else { return MajorDefaultValue; } }
            set {
              _hasBits0 |= 1;
              major_ = value;
            }
          }
          /// <summary>Gets whether the "major" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMajor {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "major" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMajor() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "minor" field.</summary>
          public const int MinorFieldNumber = 2;
          private readonly static int MinorDefaultValue = -1;

          private int minor_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int Minor {
            get { if ((_hasBits0 & 2) != 0) { return minor_; } else { return MinorDefaultValue; } }
            set {
              _hasBits0 |= 2;
              minor_ = value;
            }
          }
          /// <summary>Gets whether the "minor" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMinor {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "minor" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMinor() {
            _hasBits0 &= ~2;
          }

          /// <summary>Field number for the "micro" field.</summary>
          public const int MicroFieldNumber = 3;
          private readonly static int MicroDefaultValue = -1;

          private int micro_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int Micro {
            get { if ((_hasBits0 & 4) != 0) { return micro_; } else { return MicroDefaultValue; } }
            set {
              _hasBits0 |= 4;
              micro_ = value;
            }
          }
          /// <summary>Gets whether the "micro" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMicro {
            get { return (_hasBits0 & 4) != 0; }
          }
          /// <summary>Clears the value of the "micro" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMicro() {
            _hasBits0 &= ~4;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as OsVersion);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(OsVersion other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Major != other.Major) return false;
            if (Minor != other.Minor) return false;
            if (Micro != other.Micro) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasMajor) hash ^= Major.GetHashCode();
            if (HasMinor) hash ^= Minor.GetHashCode();
            if (HasMicro) hash ^= Micro.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasMajor) {
              output.WriteRawTag(8);
              output.WriteInt32(Major);
            }
            if (HasMinor) {
              output.WriteRawTag(16);
              output.WriteInt32(Minor);
            }
            if (HasMicro) {
              output.WriteRawTag(24);
              output.WriteInt32(Micro);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasMajor) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
            }
            if (HasMinor) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
            }
            if (HasMicro) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Micro);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(OsVersion other) {
            if (other == null) {
              return;
            }
            if (other.HasMajor) {
              Major = other.Major;
            }
            if (other.HasMinor) {
              Minor = other.Minor;
            }
            if (other.HasMicro) {
              Micro = other.Micro;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  Major = input.ReadInt32();
                  break;
                }
                case 16: {
                  Minor = input.ReadInt32();
                  break;
                }
                case 24: {
                  Micro = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    /// <summary>
    /// Additional key-value attributes. Currently unused.
    /// </summary>
    public sealed partial class KeyValue : pb::IMessage<KeyValue> {
      private static readonly pb::MessageParser<KeyValue> _parser = new pb::MessageParser<KeyValue>(() => new KeyValue());
      private pb::UnknownFieldSet _unknownFields;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<KeyValue> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[5]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public KeyValue() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public KeyValue(KeyValue other) : this() {
        key_ = other.key_;
        value_ = other.value_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public KeyValue Clone() {
        return new KeyValue(this);
      }

      /// <summary>Field number for the "key" field.</summary>
      public const int KeyFieldNumber = 1;
      private readonly static string KeyDefaultValue = "";

      private string key_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Key {
        get { return key_ ?? KeyDefaultValue; }
        set {
          key_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "key" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasKey {
        get { return key_ != null; }
      }
      /// <summary>Clears the value of the "key" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearKey() {
        key_ = null;
      }

      /// <summary>Field number for the "value" field.</summary>
      public const int ValueFieldNumber = 2;
      private readonly static string ValueDefaultValue = "";

      private string value_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Value {
        get { return value_ ?? ValueDefaultValue; }
        set {
          value_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "value" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasValue {
        get { return value_ != null; }
      }
      /// <summary>Clears the value of the "value" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearValue() {
        value_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as KeyValue);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(KeyValue other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Key != other.Key) return false;
        if (Value != other.Value) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasKey) hash ^= Key.GetHashCode();
        if (HasValue) hash ^= Value.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasKey) {
          output.WriteRawTag(10);
          output.WriteString(Key);
        }
        if (HasValue) {
          output.WriteRawTag(18);
          output.WriteString(Value);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasKey) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Key);
        }
        if (HasValue) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Value);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(KeyValue other) {
        if (other == null) {
          return;
        }
        if (other.HasKey) {
          Key = other.Key;
        }
        if (other.HasValue) {
          Value = other.Value;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              Key = input.ReadString();
              break;
            }
            case 18: {
              Value = input.ReadString();
              break;
            }
          }
        }
      }

    }

    /// <summary>
    /// Information for ad queries coming from mobile devices. A mobile device is
    /// either a smartphone or a tablet. This is present for ad queries both from
    /// mobile devices browsing the web and from mobile apps.
    /// </summary>
    public sealed partial class Mobile : pb::IMessage<Mobile> {
      private static readonly pb::MessageParser<Mobile> _parser = new pb::MessageParser<Mobile>(() => new Mobile());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Mobile> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[6]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Mobile() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Mobile(Mobile other) : this() {
        _hasBits0 = other._hasBits0;
        isApp_ = other.isApp_;
        appId_ = other.appId_;
        isInterstitialRequest_ = other.isInterstitialRequest_;
        appCategoryIds_ = other.appCategoryIds_.Clone();
        isMobileWebOptimized_ = other.isMobileWebOptimized_;
        encryptedAdvertisingId_ = other.encryptedAdvertisingId_;
        advertisingId_ = other.advertisingId_;
        encryptedHashedIdfa_ = other.encryptedHashedIdfa_;
        hashedIdfa_ = other.hashedIdfa_;
        appName_ = other.appName_;
        appRating_ = other.appRating_;
        installedSdk_ = other.installedSdk_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Mobile Clone() {
        return new Mobile(this);
      }

      /// <summary>Field number for the "is_app" field.</summary>
      public const int IsAppFieldNumber = 7;
      private readonly static bool IsAppDefaultValue = false;

      private bool isApp_;
      /// <summary>
      /// If true, then this request is from a mobile application. For branded
      /// requests, app_id will also be filled in. If the request is from a mobile
      /// web page contained inside an app, is_app will still be false, but app_id
      /// could be filled in with the app identifier. is_app may also be true for
      /// anonymous inventory, in which case anonymous_id will be set. For SDK-less
      /// requests (mostly from connected TVs), this will be true if an app ID is
      /// provided directly in the request.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsApp {
        get { if ((_hasBits0 & 1) != 0) { return isApp_; } else { return IsAppDefaultValue; } }
        set {
          _hasBits0 |= 1;
          isApp_ = value;
        }
      }
      /// <summary>Gets whether the "is_app" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsApp {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "is_app" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsApp() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "app_id" field.</summary>
      public const int AppIdFieldNumber = 6;
      private readonly static string AppIdDefaultValue = "";

      private string appId_;
      /// <summary>
      /// The identifier of the mobile app when this ad query comes from a mobile
      /// app, or from a mobile web page contained inside an app. If the app was
      /// downloaded from the Apple iTunes app store, then this is the app-store
      /// id, e.g., 343200656. For Android devices, this is the fully qualified
      /// package name, e.g., com.rovio.angrybirds. For Windows devices it's the
      /// App ID, e.g., f15abcde-f6gh-47i0-j3k8-37l93817mn3o. For SDK-less requests
      /// (mostly from connected TVs), the app ID provided by the publisher
      /// directly in the request.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string AppId {
        get { return appId_ ?? AppIdDefaultValue; }
        set {
          appId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "app_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAppId {
        get { return appId_ != null; }
      }
      /// <summary>Clears the value of the "app_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAppId() {
        appId_ = null;
      }

      /// <summary>Field number for the "is_interstitial_request" field.</summary>
      public const int IsInterstitialRequestFieldNumber = 10;
      private readonly static bool IsInterstitialRequestDefaultValue = false;

      private bool isInterstitialRequest_;
      /// <summary>
      /// If true, then this is a mobile full screen ad request.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsInterstitialRequest {
        get { if ((_hasBits0 & 2) != 0) { return isInterstitialRequest_; } else { return IsInterstitialRequestDefaultValue; } }
        set {
          _hasBits0 |= 2;
          isInterstitialRequest_ = value;
        }
      }
      /// <summary>Gets whether the "is_interstitial_request" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsInterstitialRequest {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "is_interstitial_request" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsInterstitialRequest() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "app_category_ids" field.</summary>
      public const int AppCategoryIdsFieldNumber = 11;
      private static readonly pb::FieldCodec<int> _repeated_appCategoryIds_codec
          = pb::FieldCodec.ForInt32(88);
      private readonly pbc::RepeatedField<int> appCategoryIds_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// This field contains the IDs of categories to which the current mobile app
      /// belongs. This field will be empty if is_app is false. The mapping between
      /// mobile apps and categories is defined by the Google Play Store for
      /// Android apps, or the Apple iTunes Store for iOS apps. To look up category
      /// name from category ID, please refer to
      /// https://developers.google.com/adwords/api/docs/appendix/mobileappcategories
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> AppCategoryIds {
        get { return appCategoryIds_; }
      }

      /// <summary>Field number for the "is_mobile_web_optimized" field.</summary>
      public const int IsMobileWebOptimizedFieldNumber = 17;
      private readonly static bool IsMobileWebOptimizedDefaultValue = false;

      private bool isMobileWebOptimized_;
      /// <summary>
      /// For a mobile web request, this field indicates whether the page is
      /// optimized for mobile browsers on high-end mobile phones.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsMobileWebOptimized {
        get { if ((_hasBits0 & 4) != 0) { return isMobileWebOptimized_; } else { return IsMobileWebOptimizedDefaultValue; } }
        set {
          _hasBits0 |= 4;
          isMobileWebOptimized_ = value;
        }
      }
      /// <summary>Gets whether the "is_mobile_web_optimized" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsMobileWebOptimized {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "is_mobile_web_optimized" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsMobileWebOptimized() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "encrypted_advertising_id" field.</summary>
      public const int EncryptedAdvertisingIdFieldNumber = 20;
      private readonly static pb::ByteString EncryptedAdvertisingIdDefaultValue = pb::ByteString.Empty;

      private pb::ByteString encryptedAdvertisingId_;
      /// <summary>
      /// This field is used for advertising identifiers for
      /// 1) iOS devices (This is called Identifier for Advertising, or IDFA, as
      /// described at https://support.google.com/authorizedbuyers/answer/3221407),
      /// 2) Android devices,
      /// 3) Roku devices,
      /// 4) Microsoft Xbox devices,
      /// 5) Amazon devices (i.e. Amazon Fire).
      ///
      /// When the encrypted_advertising_id is an IDFA, the plaintext after
      /// decrypting the ciphertext is the IDFA (16 byte UUID) returned by iOS's
      /// [ASIdentifierManager advertisingIdentifier]. For encrypted_hashed_idfa,
      /// the plaintext is the 16 byte MD5 hash of the IDFA. Only one of the two
      /// fields will be available, depending on the version of the SDK making the
      /// request. Later SDKs provide unhashed values. They are not set if there is
      /// one or more user_data_treatment value in the BidRequest.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString EncryptedAdvertisingId {
        get { return encryptedAdvertisingId_ ?? EncryptedAdvertisingIdDefaultValue; }
        set {
          encryptedAdvertisingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "encrypted_advertising_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasEncryptedAdvertisingId {
        get { return encryptedAdvertisingId_ != null; }
      }
      /// <summary>Clears the value of the "encrypted_advertising_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearEncryptedAdvertisingId() {
        encryptedAdvertisingId_ = null;
      }

      /// <summary>Field number for the "advertising_id" field.</summary>
      public const int AdvertisingIdFieldNumber = 27;
      private readonly static pb::ByteString AdvertisingIdDefaultValue = pb::ByteString.Empty;

      private pb::ByteString advertisingId_;
      /// <summary>
      /// Unencrypted version of encrypted_advertising_id. This field is only set
      /// when using an SSL connection. This field is a 16 byte UUID (binary form)
      /// or a 32 byte alphanumeric id (such as Samsung ID).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString AdvertisingId {
        get { return advertisingId_ ?? AdvertisingIdDefaultValue; }
        set {
          advertisingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "advertising_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAdvertisingId {
        get { return advertisingId_ != null; }
      }
      /// <summary>Clears the value of the "advertising_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAdvertisingId() {
        advertisingId_ = null;
      }

      /// <summary>Field number for the "encrypted_hashed_idfa" field.</summary>
      public const int EncryptedHashedIdfaFieldNumber = 21;
      private readonly static pb::ByteString EncryptedHashedIdfaDefaultValue = pb::ByteString.Empty;

      private pb::ByteString encryptedHashedIdfa_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString EncryptedHashedIdfa {
        get { return encryptedHashedIdfa_ ?? EncryptedHashedIdfaDefaultValue; }
        set {
          encryptedHashedIdfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "encrypted_hashed_idfa" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasEncryptedHashedIdfa {
        get { return encryptedHashedIdfa_ != null; }
      }
      /// <summary>Clears the value of the "encrypted_hashed_idfa" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearEncryptedHashedIdfa() {
        encryptedHashedIdfa_ = null;
      }

      /// <summary>Field number for the "hashed_idfa" field.</summary>
      public const int HashedIdfaFieldNumber = 28;
      private readonly static pb::ByteString HashedIdfaDefaultValue = pb::ByteString.Empty;

      private pb::ByteString hashedIdfa_;
      /// <summary>
      /// Unencrypted version of encrypted_hashed_idfa. This field is only set
      /// when using an SSL connection. This field is a 16 byte MD5.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString HashedIdfa {
        get { return hashedIdfa_ ?? HashedIdfaDefaultValue; }
        set {
          hashedIdfa_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "hashed_idfa" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasHashedIdfa {
        get { return hashedIdfa_ != null; }
      }
      /// <summary>Clears the value of the "hashed_idfa" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearHashedIdfa() {
        hashedIdfa_ = null;
      }

      /// <summary>Field number for the "app_name" field.</summary>
      public const int AppNameFieldNumber = 24;
      private readonly static string AppNameDefaultValue = "";

      private string appName_;
      /// <summary>
      /// App names for Android apps are from the Google Play store.
      /// App names for iOS apps are provided by App Annie
      /// (https://www.appannie.com). App names for SDK-less requests (mostly from
      /// connected TVs) are provided by the publisher directly in the request.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string AppName {
        get { return appName_ ?? AppNameDefaultValue; }
        set {
          appName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "app_name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAppName {
        get { return appName_ != null; }
      }
      /// <summary>Clears the value of the "app_name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAppName() {
        appName_ = null;
      }

      /// <summary>Field number for the "app_rating" field.</summary>
      public const int AppRatingFieldNumber = 25;
      private readonly static float AppRatingDefaultValue = 0F;

      private float appRating_;
      /// <summary>
      /// Average user rating for the app. The range of user rating is between 1.0
      /// and 5.0. Currently only available for apps in Google Play store.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float AppRating {
        get { if ((_hasBits0 & 8) != 0) { return appRating_; } else { return AppRatingDefaultValue; } }
        set {
          _hasBits0 |= 8;
          appRating_ = value;
        }
      }
      /// <summary>Gets whether the "app_rating" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAppRating {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "app_rating" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAppRating() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "installed_sdk" field.</summary>
      public const int InstalledSdkFieldNumber = 32;
      private static readonly pb::FieldCodec<global::BidRequest.Types.Mobile.Types.InstalledSdk> _repeated_installedSdk_codec
          = pb::FieldCodec.ForMessage(258, global::BidRequest.Types.Mobile.Types.InstalledSdk.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.Mobile.Types.InstalledSdk> installedSdk_ = new pbc::RepeatedField<global::BidRequest.Types.Mobile.Types.InstalledSdk>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.Mobile.Types.InstalledSdk> InstalledSdk {
        get { return installedSdk_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Mobile);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Mobile other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (IsApp != other.IsApp) return false;
        if (AppId != other.AppId) return false;
        if (IsInterstitialRequest != other.IsInterstitialRequest) return false;
        if(!appCategoryIds_.Equals(other.appCategoryIds_)) return false;
        if (IsMobileWebOptimized != other.IsMobileWebOptimized) return false;
        if (EncryptedAdvertisingId != other.EncryptedAdvertisingId) return false;
        if (AdvertisingId != other.AdvertisingId) return false;
        if (EncryptedHashedIdfa != other.EncryptedHashedIdfa) return false;
        if (HashedIdfa != other.HashedIdfa) return false;
        if (AppName != other.AppName) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(AppRating, other.AppRating)) return false;
        if(!installedSdk_.Equals(other.installedSdk_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasIsApp) hash ^= IsApp.GetHashCode();
        if (HasAppId) hash ^= AppId.GetHashCode();
        if (HasIsInterstitialRequest) hash ^= IsInterstitialRequest.GetHashCode();
        hash ^= appCategoryIds_.GetHashCode();
        if (HasIsMobileWebOptimized) hash ^= IsMobileWebOptimized.GetHashCode();
        if (HasEncryptedAdvertisingId) hash ^= EncryptedAdvertisingId.GetHashCode();
        if (HasAdvertisingId) hash ^= AdvertisingId.GetHashCode();
        if (HasEncryptedHashedIdfa) hash ^= EncryptedHashedIdfa.GetHashCode();
        if (HasHashedIdfa) hash ^= HashedIdfa.GetHashCode();
        if (HasAppName) hash ^= AppName.GetHashCode();
        if (HasAppRating) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(AppRating);
        hash ^= installedSdk_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasAppId) {
          output.WriteRawTag(50);
          output.WriteString(AppId);
        }
        if (HasIsApp) {
          output.WriteRawTag(56);
          output.WriteBool(IsApp);
        }
        if (HasIsInterstitialRequest) {
          output.WriteRawTag(80);
          output.WriteBool(IsInterstitialRequest);
        }
        appCategoryIds_.WriteTo(output, _repeated_appCategoryIds_codec);
        if (HasIsMobileWebOptimized) {
          output.WriteRawTag(136, 1);
          output.WriteBool(IsMobileWebOptimized);
        }
        if (HasEncryptedAdvertisingId) {
          output.WriteRawTag(162, 1);
          output.WriteBytes(EncryptedAdvertisingId);
        }
        if (HasEncryptedHashedIdfa) {
          output.WriteRawTag(170, 1);
          output.WriteBytes(EncryptedHashedIdfa);
        }
        if (HasAppName) {
          output.WriteRawTag(194, 1);
          output.WriteString(AppName);
        }
        if (HasAppRating) {
          output.WriteRawTag(205, 1);
          output.WriteFloat(AppRating);
        }
        if (HasAdvertisingId) {
          output.WriteRawTag(218, 1);
          output.WriteBytes(AdvertisingId);
        }
        if (HasHashedIdfa) {
          output.WriteRawTag(226, 1);
          output.WriteBytes(HashedIdfa);
        }
        installedSdk_.WriteTo(output, _repeated_installedSdk_codec);
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasIsApp) {
          size += 1 + 1;
        }
        if (HasAppId) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(AppId);
        }
        if (HasIsInterstitialRequest) {
          size += 1 + 1;
        }
        size += appCategoryIds_.CalculateSize(_repeated_appCategoryIds_codec);
        if (HasIsMobileWebOptimized) {
          size += 2 + 1;
        }
        if (HasEncryptedAdvertisingId) {
          size += 2 + pb::CodedOutputStream.ComputeBytesSize(EncryptedAdvertisingId);
        }
        if (HasAdvertisingId) {
          size += 2 + pb::CodedOutputStream.ComputeBytesSize(AdvertisingId);
        }
        if (HasEncryptedHashedIdfa) {
          size += 2 + pb::CodedOutputStream.ComputeBytesSize(EncryptedHashedIdfa);
        }
        if (HasHashedIdfa) {
          size += 2 + pb::CodedOutputStream.ComputeBytesSize(HashedIdfa);
        }
        if (HasAppName) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(AppName);
        }
        if (HasAppRating) {
          size += 2 + 4;
        }
        size += installedSdk_.CalculateSize(_repeated_installedSdk_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Mobile other) {
        if (other == null) {
          return;
        }
        if (other.HasIsApp) {
          IsApp = other.IsApp;
        }
        if (other.HasAppId) {
          AppId = other.AppId;
        }
        if (other.HasIsInterstitialRequest) {
          IsInterstitialRequest = other.IsInterstitialRequest;
        }
        appCategoryIds_.Add(other.appCategoryIds_);
        if (other.HasIsMobileWebOptimized) {
          IsMobileWebOptimized = other.IsMobileWebOptimized;
        }
        if (other.HasEncryptedAdvertisingId) {
          EncryptedAdvertisingId = other.EncryptedAdvertisingId;
        }
        if (other.HasAdvertisingId) {
          AdvertisingId = other.AdvertisingId;
        }
        if (other.HasEncryptedHashedIdfa) {
          EncryptedHashedIdfa = other.EncryptedHashedIdfa;
        }
        if (other.HasHashedIdfa) {
          HashedIdfa = other.HashedIdfa;
        }
        if (other.HasAppName) {
          AppName = other.AppName;
        }
        if (other.HasAppRating) {
          AppRating = other.AppRating;
        }
        installedSdk_.Add(other.installedSdk_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 50: {
              AppId = input.ReadString();
              break;
            }
            case 56: {
              IsApp = input.ReadBool();
              break;
            }
            case 80: {
              IsInterstitialRequest = input.ReadBool();
              break;
            }
            case 90:
            case 88: {
              appCategoryIds_.AddEntriesFrom(input, _repeated_appCategoryIds_codec);
              break;
            }
            case 136: {
              IsMobileWebOptimized = input.ReadBool();
              break;
            }
            case 162: {
              EncryptedAdvertisingId = input.ReadBytes();
              break;
            }
            case 170: {
              EncryptedHashedIdfa = input.ReadBytes();
              break;
            }
            case 194: {
              AppName = input.ReadString();
              break;
            }
            case 205: {
              AppRating = input.ReadFloat();
              break;
            }
            case 218: {
              AdvertisingId = input.ReadBytes();
              break;
            }
            case 226: {
              HashedIdfa = input.ReadBytes();
              break;
            }
            case 258: {
              installedSdk_.AddEntriesFrom(input, _repeated_installedSdk_codec);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Mobile message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        /// <summary>
        /// Identification of and information about an SDK installed in the
        /// publisher's app that the bidder has access to, often because it's the
        /// bidder's SDK.
        /// </summary>
        public sealed partial class InstalledSdk : pb::IMessage<InstalledSdk> {
          private static readonly pb::MessageParser<InstalledSdk> _parser = new pb::MessageParser<InstalledSdk>(() => new InstalledSdk());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<InstalledSdk> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.Mobile.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public InstalledSdk() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public InstalledSdk(InstalledSdk other) : this() {
            id_ = other.id_;
            sdkVersion_ = other.HasSdkVersion ? other.sdkVersion_.Clone() : null;
            adapterVersion_ = other.HasAdapterVersion ? other.adapterVersion_.Clone() : null;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public InstalledSdk Clone() {
            return new InstalledSdk(this);
          }

          /// <summary>Field number for the "id" field.</summary>
          public const int IdFieldNumber = 1;
          private readonly static string IdDefaultValue = "";

          private string id_;
          /// <summary>
          /// Identifier for the installed SDK.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Id {
            get { return id_ ?? IdDefaultValue; }
            set {
              id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasId {
            get { return id_ != null; }
          }
          /// <summary>Clears the value of the "id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearId() {
            id_ = null;
          }

          /// <summary>Field number for the "sdk_version" field.</summary>
          public const int SdkVersionFieldNumber = 2;
          private global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version sdkVersion_;
          /// <summary>
          /// The version of the installed SDK.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version SdkVersion {
            get { return sdkVersion_; }
            set {
              sdkVersion_ = value;
            }
          }
          /// <summary>Gets whether the sdk_version field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasSdkVersion {
            get { return sdkVersion_ != null; }
          }
          /// <summary>Clears the value of the sdk_version field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearSdkVersion() {
            sdkVersion_ = null;
          }

          /// <summary>Field number for the "adapter_version" field.</summary>
          public const int AdapterVersionFieldNumber = 3;
          private global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version adapterVersion_;
          /// <summary>
          /// The version of the adapter that communicates with the installed SDK.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version AdapterVersion {
            get { return adapterVersion_; }
            set {
              adapterVersion_ = value;
            }
          }
          /// <summary>Gets whether the adapter_version field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasAdapterVersion {
            get { return adapterVersion_ != null; }
          }
          /// <summary>Clears the value of the adapter_version field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearAdapterVersion() {
            adapterVersion_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as InstalledSdk);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(InstalledSdk other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Id != other.Id) return false;
            if (!object.Equals(SdkVersion, other.SdkVersion)) return false;
            if (!object.Equals(AdapterVersion, other.AdapterVersion)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasId) hash ^= Id.GetHashCode();
            if (HasSdkVersion) hash ^= SdkVersion.GetHashCode();
            if (HasAdapterVersion) hash ^= AdapterVersion.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasId) {
              output.WriteRawTag(10);
              output.WriteString(Id);
            }
            if (HasSdkVersion) {
              output.WriteRawTag(18);
              output.WriteMessage(SdkVersion);
            }
            if (HasAdapterVersion) {
              output.WriteRawTag(26);
              output.WriteMessage(AdapterVersion);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasId) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (HasSdkVersion) {
              size += 1 + pb::CodedOutputStream.ComputeMessageSize(SdkVersion);
            }
            if (HasAdapterVersion) {
              size += 1 + pb::CodedOutputStream.ComputeMessageSize(AdapterVersion);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(InstalledSdk other) {
            if (other == null) {
              return;
            }
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasSdkVersion) {
              if (!HasSdkVersion) {
                SdkVersion = new global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version();
              }
              SdkVersion.MergeFrom(other.SdkVersion);
            }
            if (other.HasAdapterVersion) {
              if (!HasAdapterVersion) {
                AdapterVersion = new global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version();
              }
              AdapterVersion.MergeFrom(other.AdapterVersion);
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Id = input.ReadString();
                  break;
                }
                case 18: {
                  if (!HasSdkVersion) {
                    SdkVersion = new global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version();
                  }
                  input.ReadMessage(SdkVersion);
                  break;
                }
                case 26: {
                  if (!HasAdapterVersion) {
                    AdapterVersion = new global::BidRequest.Types.Mobile.Types.InstalledSdk.Types.Version();
                  }
                  input.ReadMessage(AdapterVersion);
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the InstalledSdk message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// Semantic version of the installed SDK and the adapter that communicates
            /// between the installed SDK and Google's SDK.
            /// </summary>
            public sealed partial class Version : pb::IMessage<Version> {
              private static readonly pb::MessageParser<Version> _parser = new pb::MessageParser<Version>(() => new Version());
              private pb::UnknownFieldSet _unknownFields;
              private int _hasBits0;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pb::MessageParser<Version> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::BidRequest.Types.Mobile.Types.InstalledSdk.Descriptor.NestedTypes[0]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public Version() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public Version(Version other) : this() {
                _hasBits0 = other._hasBits0;
                major_ = other.major_;
                minor_ = other.minor_;
                micro_ = other.micro_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public Version Clone() {
                return new Version(this);
              }

              /// <summary>Field number for the "major" field.</summary>
              public const int MajorFieldNumber = 1;
              private readonly static int MajorDefaultValue = -1;

              private int major_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int Major {
                get { if ((_hasBits0 & 1) != 0) { return major_; } else { return MajorDefaultValue; } }
                set {
                  _hasBits0 |= 1;
                  major_ = value;
                }
              }
              /// <summary>Gets whether the "major" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMajor {
                get { return (_hasBits0 & 1) != 0; }
              }
              /// <summary>Clears the value of the "major" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMajor() {
                _hasBits0 &= ~1;
              }

              /// <summary>Field number for the "minor" field.</summary>
              public const int MinorFieldNumber = 2;
              private readonly static int MinorDefaultValue = -1;

              private int minor_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int Minor {
                get { if ((_hasBits0 & 2) != 0) { return minor_; } else { return MinorDefaultValue; } }
                set {
                  _hasBits0 |= 2;
                  minor_ = value;
                }
              }
              /// <summary>Gets whether the "minor" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMinor {
                get { return (_hasBits0 & 2) != 0; }
              }
              /// <summary>Clears the value of the "minor" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMinor() {
                _hasBits0 &= ~2;
              }

              /// <summary>Field number for the "micro" field.</summary>
              public const int MicroFieldNumber = 3;
              private readonly static int MicroDefaultValue = -1;

              private int micro_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int Micro {
                get { if ((_hasBits0 & 4) != 0) { return micro_; } else { return MicroDefaultValue; } }
                set {
                  _hasBits0 |= 4;
                  micro_ = value;
                }
              }
              /// <summary>Gets whether the "micro" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMicro {
                get { return (_hasBits0 & 4) != 0; }
              }
              /// <summary>Clears the value of the "micro" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMicro() {
                _hasBits0 &= ~4;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override bool Equals(object other) {
                return Equals(other as Version);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Equals(Version other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if (Major != other.Major) return false;
                if (Minor != other.Minor) return false;
                if (Micro != other.Micro) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override int GetHashCode() {
                int hash = 1;
                if (HasMajor) hash ^= Major.GetHashCode();
                if (HasMinor) hash ^= Minor.GetHashCode();
                if (HasMicro) hash ^= Micro.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void WriteTo(pb::CodedOutputStream output) {
                if (HasMajor) {
                  output.WriteRawTag(8);
                  output.WriteInt32(Major);
                }
                if (HasMinor) {
                  output.WriteRawTag(16);
                  output.WriteInt32(Minor);
                }
                if (HasMicro) {
                  output.WriteRawTag(24);
                  output.WriteInt32(Micro);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int CalculateSize() {
                int size = 0;
                if (HasMajor) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Major);
                }
                if (HasMinor) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Minor);
                }
                if (HasMicro) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Micro);
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(Version other) {
                if (other == null) {
                  return;
                }
                if (other.HasMajor) {
                  Major = other.Major;
                }
                if (other.HasMinor) {
                  Minor = other.Minor;
                }
                if (other.HasMicro) {
                  Micro = other.Micro;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(pb::CodedInputStream input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 8: {
                      Major = input.ReadInt32();
                      break;
                    }
                    case 16: {
                      Minor = input.ReadInt32();
                      break;
                    }
                    case 24: {
                      Micro = input.ReadInt32();
                      break;
                    }
                  }
                }
              }

            }

          }
          #endregion

        }

      }
      #endregion

    }

    /// <summary>
    /// Information about the video if this is an in-video ad request.
    /// </summary>
    public sealed partial class Video : pb::IMessage<Video> {
      private static readonly pb::MessageParser<Video> _parser = new pb::MessageParser<Video>(() => new Video());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Video> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[7]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Video() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Video(Video other) : this() {
        _hasBits0 = other._hasBits0;
        placement_ = other.placement_;
        descriptionUrl_ = other.descriptionUrl_;
        isEmbeddedOffsite_ = other.isEmbeddedOffsite_;
        playbackMethod_ = other.playbackMethod_;
        isClickable_ = other.isClickable_;
        videoadStartDelay_ = other.videoadStartDelay_;
        maxAdDuration_ = other.maxAdDuration_;
        minAdDuration_ = other.minAdDuration_;
        maxAdsInPod_ = other.maxAdsInPod_;
        videoAdSkippable_ = other.videoAdSkippable_;
        skippableMaxAdDuration_ = other.skippableMaxAdDuration_;
        protocols_ = other.protocols_.Clone();
        allowedVideoFormats_ = other.allowedVideoFormats_.Clone();
        companionSlot_ = other.companionSlot_.Clone();
        endCapSupport_ = other.endCapSupport_;
        contentAttributes_ = other.HasContentAttributes ? other.contentAttributes_.Clone() : null;
        dEPRECATEDInventoryType_ = other.dEPRECATEDInventoryType_;
        isLivestream_ = other.isLivestream_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Video Clone() {
        return new Video(this);
      }

      /// <summary>Field number for the "placement" field.</summary>
      public const int PlacementFieldNumber = 16;
      private readonly static global::BidRequest.Types.Video.Types.Placement PlacementDefaultValue = global::BidRequest.Types.Video.Types.Placement.UnknownPlacement;

      private global::BidRequest.Types.Video.Types.Placement placement_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Video.Types.Placement Placement {
        get { if ((_hasBits0 & 2048) != 0) { return placement_; } else { return PlacementDefaultValue; } }
        set {
          _hasBits0 |= 2048;
          placement_ = value;
        }
      }
      /// <summary>Gets whether the "placement" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasPlacement {
        get { return (_hasBits0 & 2048) != 0; }
      }
      /// <summary>Clears the value of the "placement" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearPlacement() {
        _hasBits0 &= ~2048;
      }

      /// <summary>Field number for the "description_url" field.</summary>
      public const int DescriptionUrlFieldNumber = 10;
      private readonly static string DescriptionUrlDefaultValue = "";

      private string descriptionUrl_;
      /// <summary>
      /// The URL of the page that the publisher gives Google to describe the video
      /// content, with parameters removed.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DescriptionUrl {
        get { return descriptionUrl_ ?? DescriptionUrlDefaultValue; }
        set {
          descriptionUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "description_url" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDescriptionUrl {
        get { return descriptionUrl_ != null; }
      }
      /// <summary>Clears the value of the "description_url" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDescriptionUrl() {
        descriptionUrl_ = null;
      }

      /// <summary>Field number for the "is_embedded_offsite" field.</summary>
      public const int IsEmbeddedOffsiteFieldNumber = 11;
      private readonly static bool IsEmbeddedOffsiteDefaultValue = false;

      private bool isEmbeddedOffsite_;
      /// <summary>
      /// If true, the video is embedded on a page outside the publisher's domain.
      /// When this is set, description_url points to a description of the video
      /// (as it always does), and the url field in BidRequest is the page in which
      /// the video is embedded. For example, a request for an in-stream ad in a
      /// Vimeo video shared on Facebook has is_embedded_offsite set. The url field
      /// is for a Facebook page and the description_url points to the video on
      /// Vimeo.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsEmbeddedOffsite {
        get { if ((_hasBits0 & 64) != 0) { return isEmbeddedOffsite_; } else { return IsEmbeddedOffsiteDefaultValue; } }
        set {
          _hasBits0 |= 64;
          isEmbeddedOffsite_ = value;
        }
      }
      /// <summary>Gets whether the "is_embedded_offsite" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsEmbeddedOffsite {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "is_embedded_offsite" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsEmbeddedOffsite() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "playback_method" field.</summary>
      public const int PlaybackMethodFieldNumber = 14;
      private readonly static global::BidRequest.Types.Video.Types.VideoPlaybackMethod PlaybackMethodDefaultValue = global::BidRequest.Types.Video.Types.VideoPlaybackMethod.MethodUnknown;

      private global::BidRequest.Types.Video.Types.VideoPlaybackMethod playbackMethod_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Video.Types.VideoPlaybackMethod PlaybackMethod {
        get { if ((_hasBits0 & 512) != 0) { return playbackMethod_; } else { return PlaybackMethodDefaultValue; } }
        set {
          _hasBits0 |= 512;
          playbackMethod_ = value;
        }
      }
      /// <summary>Gets whether the "playback_method" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasPlaybackMethod {
        get { return (_hasBits0 & 512) != 0; }
      }
      /// <summary>Clears the value of the "playback_method" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearPlaybackMethod() {
        _hasBits0 &= ~512;
      }

      /// <summary>Field number for the "is_clickable" field.</summary>
      public const int IsClickableFieldNumber = 15;
      private readonly static bool IsClickableDefaultValue = false;

      private bool isClickable_;
      /// <summary>
      /// Whether the inventory allows clicking on the video ad to take the user to
      /// an advertiser site. Some platforms, notably connected TVs, do not
      /// support clicking on video ads, in which case this field is set to false.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsClickable {
        get { if ((_hasBits0 & 1024) != 0) { return isClickable_; } else { return IsClickableDefaultValue; } }
        set {
          _hasBits0 |= 1024;
          isClickable_ = value;
        }
      }
      /// <summary>Gets whether the "is_clickable" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsClickable {
        get { return (_hasBits0 & 1024) != 0; }
      }
      /// <summary>Clears the value of the "is_clickable" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsClickable() {
        _hasBits0 &= ~1024;
      }

      /// <summary>Field number for the "videoad_start_delay" field.</summary>
      public const int VideoadStartDelayFieldNumber = 1;
      private readonly static int VideoadStartDelayDefaultValue = 0;

      private int videoadStartDelay_;
      /// <summary>
      /// The time in milliseconds from the start of the video when the ad will be
      /// displayed. 0 means pre-roll and -1 means post-roll. The value is valid
      /// only if this param is set. When not set, the display position is unknown.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int VideoadStartDelay {
        get { if ((_hasBits0 & 1) != 0) { return videoadStartDelay_; } else { return VideoadStartDelayDefaultValue; } }
        set {
          _hasBits0 |= 1;
          videoadStartDelay_ = value;
        }
      }
      /// <summary>Gets whether the "videoad_start_delay" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasVideoadStartDelay {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "videoad_start_delay" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearVideoadStartDelay() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "max_ad_duration" field.</summary>
      public const int MaxAdDurationFieldNumber = 2;
      private readonly static int MaxAdDurationDefaultValue = 0;

      private int maxAdDuration_;
      /// <summary>
      /// The maximum duration in milliseconds of the ad that you should return.
      /// If this is not set or has value &lt;= 0, any duration is allowed.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int MaxAdDuration {
        get { if ((_hasBits0 & 2) != 0) { return maxAdDuration_; } else { return MaxAdDurationDefaultValue; } }
        set {
          _hasBits0 |= 2;
          maxAdDuration_ = value;
        }
      }
      /// <summary>Gets whether the "max_ad_duration" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasMaxAdDuration {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "max_ad_duration" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearMaxAdDuration() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "min_ad_duration" field.</summary>
      public const int MinAdDurationFieldNumber = 8;
      private readonly static int MinAdDurationDefaultValue = 0;

      private int minAdDuration_;
      /// <summary>
      /// The minimum duration in milliseconds of the ad that you should return.
      /// If this is not set or has value &lt;= 0, there is no minimum duration.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int MinAdDuration {
        get { if ((_hasBits0 & 32) != 0) { return minAdDuration_; } else { return MinAdDurationDefaultValue; } }
        set {
          _hasBits0 |= 32;
          minAdDuration_ = value;
        }
      }
      /// <summary>Gets whether the "min_ad_duration" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasMinAdDuration {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "min_ad_duration" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearMinAdDuration() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "max_ads_in_pod" field.</summary>
      public const int MaxAdsInPodFieldNumber = 12;
      private readonly static int MaxAdsInPodDefaultValue = 0;

      private int maxAdsInPod_;
      /// <summary>
      /// The maximum number of ads in an Adx video pod. A non-zero value indicates
      /// that the current ad slot is a video pod that can show multiple video
      /// ads. Actual number of video ads shown can be less than or equal to this
      /// value but cannot exceed it.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int MaxAdsInPod {
        get { if ((_hasBits0 & 128) != 0) { return maxAdsInPod_; } else { return MaxAdsInPodDefaultValue; } }
        set {
          _hasBits0 |= 128;
          maxAdsInPod_ = value;
        }
      }
      /// <summary>Gets whether the "max_ads_in_pod" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasMaxAdsInPod {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "max_ads_in_pod" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearMaxAdsInPod() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "video_ad_skippable" field.</summary>
      public const int VideoAdSkippableFieldNumber = 4;
      private readonly static global::BidRequest.Types.Video.Types.SkippableBidRequestType VideoAdSkippableDefaultValue = global::BidRequest.Types.Video.Types.SkippableBidRequestType.AllowSkippable;

      private global::BidRequest.Types.Video.Types.SkippableBidRequestType videoAdSkippable_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Video.Types.SkippableBidRequestType VideoAdSkippable {
        get { if ((_hasBits0 & 8) != 0) { return videoAdSkippable_; } else { return VideoAdSkippableDefaultValue; } }
        set {
          _hasBits0 |= 8;
          videoAdSkippable_ = value;
        }
      }
      /// <summary>Gets whether the "video_ad_skippable" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasVideoAdSkippable {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "video_ad_skippable" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearVideoAdSkippable() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "skippable_max_ad_duration" field.</summary>
      public const int SkippableMaxAdDurationFieldNumber = 5;
      private readonly static int SkippableMaxAdDurationDefaultValue = 0;

      private int skippableMaxAdDuration_;
      /// <summary>
      /// The maximum duration in milliseconds for the ad you should return, if
      /// this ad is skippable (this generally differs from the maximum duration
      /// allowed for non-skippable ads). If this is not set or has value &lt;= 0, any
      /// duration is allowed.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int SkippableMaxAdDuration {
        get { if ((_hasBits0 & 16) != 0) { return skippableMaxAdDuration_; } else { return SkippableMaxAdDurationDefaultValue; } }
        set {
          _hasBits0 |= 16;
          skippableMaxAdDuration_ = value;
        }
      }
      /// <summary>Gets whether the "skippable_max_ad_duration" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasSkippableMaxAdDuration {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "skippable_max_ad_duration" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearSkippableMaxAdDuration() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "protocols" field.</summary>
      public const int ProtocolsFieldNumber = 17;
      private static readonly pb::FieldCodec<global::BidRequest.Types.Video.Types.VideoProtocol> _repeated_protocols_codec
          = pb::FieldCodec.ForEnum(138, x => (int) x, x => (global::BidRequest.Types.Video.Types.VideoProtocol) x);
      private readonly pbc::RepeatedField<global::BidRequest.Types.Video.Types.VideoProtocol> protocols_ = new pbc::RepeatedField<global::BidRequest.Types.Video.Types.VideoProtocol>();
      /// <summary>
      /// Array of supported video bid response protocols.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.Video.Types.VideoProtocol> Protocols {
        get { return protocols_; }
      }

      /// <summary>Field number for the "allowed_video_formats" field.</summary>
      public const int AllowedVideoFormatsFieldNumber = 6;
      private static readonly pb::FieldCodec<global::BidRequest.Types.Video.Types.VideoFormat> _repeated_allowedVideoFormats_codec
          = pb::FieldCodec.ForEnum(48, x => (int) x, x => (global::BidRequest.Types.Video.Types.VideoFormat) x);
      private readonly pbc::RepeatedField<global::BidRequest.Types.Video.Types.VideoFormat> allowedVideoFormats_ = new pbc::RepeatedField<global::BidRequest.Types.Video.Types.VideoFormat>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.Video.Types.VideoFormat> AllowedVideoFormats {
        get { return allowedVideoFormats_; }
      }

      /// <summary>Field number for the "companion_slot" field.</summary>
      public const int CompanionSlotFieldNumber = 7;
      private static readonly pb::FieldCodec<global::BidRequest.Types.Video.Types.CompanionSlot> _repeated_companionSlot_codec
          = pb::FieldCodec.ForMessage(58, global::BidRequest.Types.Video.Types.CompanionSlot.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.Video.Types.CompanionSlot> companionSlot_ = new pbc::RepeatedField<global::BidRequest.Types.Video.Types.CompanionSlot>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.Video.Types.CompanionSlot> CompanionSlot {
        get { return companionSlot_; }
      }

      /// <summary>Field number for the "end_cap_support" field.</summary>
      public const int EndCapSupportFieldNumber = 13;
      private readonly static global::BidRequest.Types.Video.Types.EndCapSupport EndCapSupportDefaultValue = global::BidRequest.Types.Video.Types.EndCapSupport.EndCapNotEnabled;

      private global::BidRequest.Types.Video.Types.EndCapSupport endCapSupport_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Video.Types.EndCapSupport EndCapSupport {
        get { if ((_hasBits0 & 256) != 0) { return endCapSupport_; } else { return EndCapSupportDefaultValue; } }
        set {
          _hasBits0 |= 256;
          endCapSupport_ = value;
        }
      }
      /// <summary>Gets whether the "end_cap_support" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasEndCapSupport {
        get { return (_hasBits0 & 256) != 0; }
      }
      /// <summary>Clears the value of the "end_cap_support" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearEndCapSupport() {
        _hasBits0 &= ~256;
      }

      /// <summary>Field number for the "content_attributes" field.</summary>
      public const int ContentAttributesFieldNumber = 9;
      private global::BidRequest.Types.Video.Types.ContentAttributes contentAttributes_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Video.Types.ContentAttributes ContentAttributes {
        get { return contentAttributes_; }
        set {
          contentAttributes_ = value;
        }
      }
      /// <summary>Gets whether the content_attributes field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasContentAttributes {
        get { return contentAttributes_ != null; }
      }
      /// <summary>Clears the value of the content_attributes field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearContentAttributes() {
        contentAttributes_ = null;
      }

      /// <summary>Field number for the "DEPRECATED_inventory_type" field.</summary>
      public const int DEPRECATEDInventoryTypeFieldNumber = 3;
      private readonly static global::BidRequest.Types.Video.Types.InventoryType DEPRECATEDInventoryTypeDefaultValue = global::BidRequest.Types.Video.Types.InventoryType.WebVideo;

      private global::BidRequest.Types.Video.Types.InventoryType dEPRECATEDInventoryType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.Video.Types.InventoryType DEPRECATEDInventoryType {
        get { if ((_hasBits0 & 4) != 0) { return dEPRECATEDInventoryType_; } else { return DEPRECATEDInventoryTypeDefaultValue; } }
        set {
          _hasBits0 |= 4;
          dEPRECATEDInventoryType_ = value;
        }
      }
      /// <summary>Gets whether the "DEPRECATED_inventory_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDEPRECATEDInventoryType {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "DEPRECATED_inventory_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDEPRECATEDInventoryType() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "is_livestream" field.</summary>
      public const int IsLivestreamFieldNumber = 18;
      private readonly static bool IsLivestreamDefaultValue = false;

      private bool isLivestream_;
      /// <summary>
      /// Identify whether or not the ad request is being served from a live video
      /// stream (0 = is not live, 1 = is live).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsLivestream {
        get { if ((_hasBits0 & 4096) != 0) { return isLivestream_; } else { return IsLivestreamDefaultValue; } }
        set {
          _hasBits0 |= 4096;
          isLivestream_ = value;
        }
      }
      /// <summary>Gets whether the "is_livestream" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsLivestream {
        get { return (_hasBits0 & 4096) != 0; }
      }
      /// <summary>Clears the value of the "is_livestream" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsLivestream() {
        _hasBits0 &= ~4096;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Video);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Video other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Placement != other.Placement) return false;
        if (DescriptionUrl != other.DescriptionUrl) return false;
        if (IsEmbeddedOffsite != other.IsEmbeddedOffsite) return false;
        if (PlaybackMethod != other.PlaybackMethod) return false;
        if (IsClickable != other.IsClickable) return false;
        if (VideoadStartDelay != other.VideoadStartDelay) return false;
        if (MaxAdDuration != other.MaxAdDuration) return false;
        if (MinAdDuration != other.MinAdDuration) return false;
        if (MaxAdsInPod != other.MaxAdsInPod) return false;
        if (VideoAdSkippable != other.VideoAdSkippable) return false;
        if (SkippableMaxAdDuration != other.SkippableMaxAdDuration) return false;
        if(!protocols_.Equals(other.protocols_)) return false;
        if(!allowedVideoFormats_.Equals(other.allowedVideoFormats_)) return false;
        if(!companionSlot_.Equals(other.companionSlot_)) return false;
        if (EndCapSupport != other.EndCapSupport) return false;
        if (!object.Equals(ContentAttributes, other.ContentAttributes)) return false;
        if (DEPRECATEDInventoryType != other.DEPRECATEDInventoryType) return false;
        if (IsLivestream != other.IsLivestream) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasPlacement) hash ^= Placement.GetHashCode();
        if (HasDescriptionUrl) hash ^= DescriptionUrl.GetHashCode();
        if (HasIsEmbeddedOffsite) hash ^= IsEmbeddedOffsite.GetHashCode();
        if (HasPlaybackMethod) hash ^= PlaybackMethod.GetHashCode();
        if (HasIsClickable) hash ^= IsClickable.GetHashCode();
        if (HasVideoadStartDelay) hash ^= VideoadStartDelay.GetHashCode();
        if (HasMaxAdDuration) hash ^= MaxAdDuration.GetHashCode();
        if (HasMinAdDuration) hash ^= MinAdDuration.GetHashCode();
        if (HasMaxAdsInPod) hash ^= MaxAdsInPod.GetHashCode();
        if (HasVideoAdSkippable) hash ^= VideoAdSkippable.GetHashCode();
        if (HasSkippableMaxAdDuration) hash ^= SkippableMaxAdDuration.GetHashCode();
        hash ^= protocols_.GetHashCode();
        hash ^= allowedVideoFormats_.GetHashCode();
        hash ^= companionSlot_.GetHashCode();
        if (HasEndCapSupport) hash ^= EndCapSupport.GetHashCode();
        if (HasContentAttributes) hash ^= ContentAttributes.GetHashCode();
        if (HasDEPRECATEDInventoryType) hash ^= DEPRECATEDInventoryType.GetHashCode();
        if (HasIsLivestream) hash ^= IsLivestream.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasVideoadStartDelay) {
          output.WriteRawTag(8);
          output.WriteInt32(VideoadStartDelay);
        }
        if (HasMaxAdDuration) {
          output.WriteRawTag(16);
          output.WriteInt32(MaxAdDuration);
        }
        if (HasDEPRECATEDInventoryType) {
          output.WriteRawTag(24);
          output.WriteEnum((int) DEPRECATEDInventoryType);
        }
        if (HasVideoAdSkippable) {
          output.WriteRawTag(32);
          output.WriteEnum((int) VideoAdSkippable);
        }
        if (HasSkippableMaxAdDuration) {
          output.WriteRawTag(40);
          output.WriteInt32(SkippableMaxAdDuration);
        }
        allowedVideoFormats_.WriteTo(output, _repeated_allowedVideoFormats_codec);
        companionSlot_.WriteTo(output, _repeated_companionSlot_codec);
        if (HasMinAdDuration) {
          output.WriteRawTag(64);
          output.WriteInt32(MinAdDuration);
        }
        if (HasContentAttributes) {
          output.WriteRawTag(74);
          output.WriteMessage(ContentAttributes);
        }
        if (HasDescriptionUrl) {
          output.WriteRawTag(82);
          output.WriteString(DescriptionUrl);
        }
        if (HasIsEmbeddedOffsite) {
          output.WriteRawTag(88);
          output.WriteBool(IsEmbeddedOffsite);
        }
        if (HasMaxAdsInPod) {
          output.WriteRawTag(96);
          output.WriteInt32(MaxAdsInPod);
        }
        if (HasEndCapSupport) {
          output.WriteRawTag(104);
          output.WriteEnum((int) EndCapSupport);
        }
        if (HasPlaybackMethod) {
          output.WriteRawTag(112);
          output.WriteEnum((int) PlaybackMethod);
        }
        if (HasIsClickable) {
          output.WriteRawTag(120);
          output.WriteBool(IsClickable);
        }
        if (HasPlacement) {
          output.WriteRawTag(128, 1);
          output.WriteEnum((int) Placement);
        }
        protocols_.WriteTo(output, _repeated_protocols_codec);
        if (HasIsLivestream) {
          output.WriteRawTag(144, 1);
          output.WriteBool(IsLivestream);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasPlacement) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Placement);
        }
        if (HasDescriptionUrl) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(DescriptionUrl);
        }
        if (HasIsEmbeddedOffsite) {
          size += 1 + 1;
        }
        if (HasPlaybackMethod) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PlaybackMethod);
        }
        if (HasIsClickable) {
          size += 1 + 1;
        }
        if (HasVideoadStartDelay) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(VideoadStartDelay);
        }
        if (HasMaxAdDuration) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAdDuration);
        }
        if (HasMinAdDuration) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinAdDuration);
        }
        if (HasMaxAdsInPod) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxAdsInPod);
        }
        if (HasVideoAdSkippable) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VideoAdSkippable);
        }
        if (HasSkippableMaxAdDuration) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkippableMaxAdDuration);
        }
        size += protocols_.CalculateSize(_repeated_protocols_codec);
        size += allowedVideoFormats_.CalculateSize(_repeated_allowedVideoFormats_codec);
        size += companionSlot_.CalculateSize(_repeated_companionSlot_codec);
        if (HasEndCapSupport) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) EndCapSupport);
        }
        if (HasContentAttributes) {
          size += 1 + pb::CodedOutputStream.ComputeMessageSize(ContentAttributes);
        }
        if (HasDEPRECATEDInventoryType) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DEPRECATEDInventoryType);
        }
        if (HasIsLivestream) {
          size += 2 + 1;
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Video other) {
        if (other == null) {
          return;
        }
        if (other.HasPlacement) {
          Placement = other.Placement;
        }
        if (other.HasDescriptionUrl) {
          DescriptionUrl = other.DescriptionUrl;
        }
        if (other.HasIsEmbeddedOffsite) {
          IsEmbeddedOffsite = other.IsEmbeddedOffsite;
        }
        if (other.HasPlaybackMethod) {
          PlaybackMethod = other.PlaybackMethod;
        }
        if (other.HasIsClickable) {
          IsClickable = other.IsClickable;
        }
        if (other.HasVideoadStartDelay) {
          VideoadStartDelay = other.VideoadStartDelay;
        }
        if (other.HasMaxAdDuration) {
          MaxAdDuration = other.MaxAdDuration;
        }
        if (other.HasMinAdDuration) {
          MinAdDuration = other.MinAdDuration;
        }
        if (other.HasMaxAdsInPod) {
          MaxAdsInPod = other.MaxAdsInPod;
        }
        if (other.HasVideoAdSkippable) {
          VideoAdSkippable = other.VideoAdSkippable;
        }
        if (other.HasSkippableMaxAdDuration) {
          SkippableMaxAdDuration = other.SkippableMaxAdDuration;
        }
        protocols_.Add(other.protocols_);
        allowedVideoFormats_.Add(other.allowedVideoFormats_);
        companionSlot_.Add(other.companionSlot_);
        if (other.HasEndCapSupport) {
          EndCapSupport = other.EndCapSupport;
        }
        if (other.HasContentAttributes) {
          if (!HasContentAttributes) {
            ContentAttributes = new global::BidRequest.Types.Video.Types.ContentAttributes();
          }
          ContentAttributes.MergeFrom(other.ContentAttributes);
        }
        if (other.HasDEPRECATEDInventoryType) {
          DEPRECATEDInventoryType = other.DEPRECATEDInventoryType;
        }
        if (other.HasIsLivestream) {
          IsLivestream = other.IsLivestream;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              VideoadStartDelay = input.ReadInt32();
              break;
            }
            case 16: {
              MaxAdDuration = input.ReadInt32();
              break;
            }
            case 24: {
              DEPRECATEDInventoryType = (global::BidRequest.Types.Video.Types.InventoryType) input.ReadEnum();
              break;
            }
            case 32: {
              VideoAdSkippable = (global::BidRequest.Types.Video.Types.SkippableBidRequestType) input.ReadEnum();
              break;
            }
            case 40: {
              SkippableMaxAdDuration = input.ReadInt32();
              break;
            }
            case 50:
            case 48: {
              allowedVideoFormats_.AddEntriesFrom(input, _repeated_allowedVideoFormats_codec);
              break;
            }
            case 58: {
              companionSlot_.AddEntriesFrom(input, _repeated_companionSlot_codec);
              break;
            }
            case 64: {
              MinAdDuration = input.ReadInt32();
              break;
            }
            case 74: {
              if (!HasContentAttributes) {
                ContentAttributes = new global::BidRequest.Types.Video.Types.ContentAttributes();
              }
              input.ReadMessage(ContentAttributes);
              break;
            }
            case 82: {
              DescriptionUrl = input.ReadString();
              break;
            }
            case 88: {
              IsEmbeddedOffsite = input.ReadBool();
              break;
            }
            case 96: {
              MaxAdsInPod = input.ReadInt32();
              break;
            }
            case 104: {
              EndCapSupport = (global::BidRequest.Types.Video.Types.EndCapSupport) input.ReadEnum();
              break;
            }
            case 112: {
              PlaybackMethod = (global::BidRequest.Types.Video.Types.VideoPlaybackMethod) input.ReadEnum();
              break;
            }
            case 120: {
              IsClickable = input.ReadBool();
              break;
            }
            case 128: {
              Placement = (global::BidRequest.Types.Video.Types.Placement) input.ReadEnum();
              break;
            }
            case 138:
            case 136: {
              protocols_.AddEntriesFrom(input, _repeated_protocols_codec);
              break;
            }
            case 144: {
              IsLivestream = input.ReadBool();
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Video message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        /// <summary>
        /// Describes where the video ad will play.
        /// </summary>
        public enum Placement {
          [pbr::OriginalName("UNKNOWN_PLACEMENT")] UnknownPlacement = 0,
          /// <summary>
          /// Instream means the ad plays before, during, or after other video
          /// content. This is similar to a traditional TV commercial. The video
          /// content the user is watching does not play while the ad is playing.
          /// </summary>
          [pbr::OriginalName("INSTREAM")] Instream = 1,
          /// <summary>
          /// Interstitial means the video ad plays in front of non-video content,
          /// (e.g., a news article or video game). The ad covers all or nearly all
          /// of the space on the screen occupied by the content and the user is not
          /// able to proceed to the content until the ad has finished or been
          /// skipped.
          /// </summary>
          [pbr::OriginalName("INTERSTITIAL")] Interstitial = 2,
          /// <summary>
          /// The in-feed video format is a video creative that shows within a feed
          /// of content, typically a social app feed, a list of editorial content
          /// items, etc, as the user is scrolling. It renders centered and not to
          /// the side.
          /// </summary>
          [pbr::OriginalName("IN_FEED")] InFeed = 3,
          /// <summary>
          /// Audio is a request for an ad that is an audio stream.  It is distinct
          /// from INSTREAM above as that is exclusive to video requests.
          /// </summary>
          [pbr::OriginalName("AUDIO")] Audio = 4,
          /// <summary>
          /// The in-article video format is a video creative that loads and plays
          /// between paragraphs of editorial content as a standalone video player.
          /// </summary>
          [pbr::OriginalName("IN_ARTICLE")] InArticle = 5,
        }

        /// <summary>
        /// Describes how the video ad will be played. The playback method is
        /// determined to be auto-play, click-to-play or mouse-over based on the best
        /// measurement available. This includes things like how recently the user
        /// interacted with a web page. For auto-play, ads can start playing with the
        /// sound on or off. Some ads (e.g. in-feed ads) are muted until the user
        /// interacts with the ad. Alternatively, if an ad would normally play with
        /// the sound on but the device is muted then the value will be set to sound
        /// off. For devices where it is not possible to determine if the device is
        /// muted (e.g. desktop), we assume that sound is on.
        /// </summary>
        public enum VideoPlaybackMethod {
          [pbr::OriginalName("METHOD_UNKNOWN")] MethodUnknown = 0,
          [pbr::OriginalName("AUTO_PLAY_SOUND_ON")] AutoPlaySoundOn = 1,
          [pbr::OriginalName("AUTO_PLAY_SOUND_OFF")] AutoPlaySoundOff = 2,
          [pbr::OriginalName("CLICK_TO_PLAY")] ClickToPlay = 3,
          [pbr::OriginalName("MOUSE_OVER")] MouseOver = 4,
          [pbr::OriginalName("INITIATE_ON_ENTERING_VIEWPORT_SOUND_ON")] InitiateOnEnteringViewportSoundOn = 5,
          [pbr::OriginalName("INITIATE_ON_ENTERING_VIEWPORT_SOUND_OFF")] InitiateOnEnteringViewportSoundOff = 6,
        }

        /// <summary>
        /// Does the publisher allow/require/block skippable video ads?
        /// </summary>
        public enum SkippableBidRequestType {
          [pbr::OriginalName("ALLOW_SKIPPABLE")] AllowSkippable = 0,
          [pbr::OriginalName("REQUIRE_SKIPPABLE")] RequireSkippable = 1,
          [pbr::OriginalName("BLOCK_SKIPPABLE")] BlockSkippable = 2,
        }

        /// <summary>
        /// Supported video protocols.
        /// </summary>
        public enum VideoProtocol {
          [pbr::OriginalName("UNKNOWN_VIDEO_PROTOCOL")] UnknownVideoProtocol = 0,
          [pbr::OriginalName("VAST_1_0")] Vast10 = 1,
          [pbr::OriginalName("VAST_2_0")] Vast20 = 2,
          [pbr::OriginalName("VAST_3_0")] Vast30 = 3,
          [pbr::OriginalName("VAST_1_0_WRAPPER")] Vast10Wrapper = 4,
          [pbr::OriginalName("VAST_2_0_WRAPPER")] Vast20Wrapper = 5,
          [pbr::OriginalName("VAST_3_0_WRAPPER")] Vast30Wrapper = 6,
          [pbr::OriginalName("VAST_4_0")] Vast40 = 7,
          [pbr::OriginalName("VAST_4_0_WRAPPER")] Vast40Wrapper = 8,
          [pbr::OriginalName("DAAST_1_0")] Daast10 = 9,
          [pbr::OriginalName("DAAST_1_0_WRAPPER")] Daast10Wrapper = 10,
        }

        /// <summary>
        /// The video file formats that are allowed for this request. The response
        /// should support at least one of them.
        /// </summary>
        public enum VideoFormat {
          [pbr::OriginalName("UNKNOWN_VIDEO_FORMAT")] UnknownVideoFormat = -1,
          /// <summary>
          /// Flash video files are accepted (FLV).
          /// </summary>
          [pbr::OriginalName("VIDEO_FLV")] VideoFlv = 0,
          [pbr::OriginalName("VIDEO_MP4")] VideoMp4 = 1,
          /// <summary>
          /// Valid VAST ads with at least one media file hosted
          /// </summary>
          [pbr::OriginalName("YT_HOSTED")] YtHosted = 2,
          /// <summary>
          /// on youtube.com.
          /// </summary>
          [pbr::OriginalName("VPAID_FLASH")] VpaidFlash = 3,
          /// <summary>
          /// JavaScript VPAID.
          /// </summary>
          [pbr::OriginalName("VPAID_JS")] VpaidJs = 4,
          [pbr::OriginalName("AUDIO_MP3")] AudioMp3 = 5,
          [pbr::OriginalName("AUDIO_OGG")] AudioOgg = 6,
          /// <summary>
          /// Requires both MP3 &amp; OGG as Google does not know
          /// </summary>
          [pbr::OriginalName("AUDIO_MP3_OGG")] AudioMp3Ogg = 7,
          /// <summary>
          /// which codecs are installed on the player.
          /// </summary>
          [pbr::OriginalName("VIDEO_WEBM")] VideoWebm = 8,
          [pbr::OriginalName("VIDEO_MOV")] VideoMov = 9,
          [pbr::OriginalName("VIDEO_3GPP")] Video3Gpp = 10,
          [pbr::OriginalName("VIDEO_HLS")] VideoHls = 11,
          [pbr::OriginalName("VIDEO_DASH")] VideoDash = 12,
          /// <summary>
          /// Audio version of MP4.
          /// </summary>
          [pbr::OriginalName("AUDIO_MP4A")] AudioMp4A = 13,
        }

        /// <summary>
        /// End cap support. When enabled, the companion ad can be picked to be
        /// rendered as an end cap (info card) in the video slot after the video
        /// ad finishes playing. If multiple companion ads are returned, IMA SDK
        /// chooses one which best matches the device screen size. End cap is
        /// supported only on mobile video interstitial inventory.
        /// </summary>
        public enum EndCapSupport {
          /// <summary>
          /// Companion ad won't be rendered as end cap.
          /// </summary>
          [pbr::OriginalName("END_CAP_NOT_ENABLED")] EndCapNotEnabled = 0,
          /// <summary>
          /// End cap will be rendered if response contains
          /// </summary>
          [pbr::OriginalName("END_CAP_OPTIONAL")] EndCapOptional = 1,
          /// <summary>
          /// Not used at this time.
          /// </summary>
          [pbr::OriginalName("END_CAP_FORBIDDEN")] EndCapForbidden = 2,
          /// <summary>
          /// Not used at this time.
          /// </summary>
          [pbr::OriginalName("END_CAP_REQUIRED")] EndCapRequired = 3,
        }

        /// <summary>
        /// The type of inventory from which request is sent.
        /// Deprecated but will continue to be filled in until January 2017.
        /// Use the placement field to determine if inventory is interstitial or
        /// instream. Use Device.device_type to determine if the request comes from
        /// a mobile device and Mobile.is_app to determine if the request comes from
        /// an app.
        /// WEB_VIDEO is INSTREAM placements from web browsers.
        /// GAMES consists of INTERSTITIAL placements from both apps and web
        /// browsers.
        /// MOBILE_INTERSTITIAL is INTERSTITIAL placements from apps only.
        /// This inventory also allows display ads. You can tell if an adslot allows
        /// display ads if adslot->excluded_attributes does not contain 21
        /// (CreativeType: Html)
        /// MOBILE_APP_VIDEO is INSTREAM placement from apps only.
        /// </summary>
        public enum InventoryType {
          [pbr::OriginalName("WEB_VIDEO")] WebVideo = 0,
          [pbr::OriginalName("GAMES")] Games = 1,
          [pbr::OriginalName("MOBILE_INTERSTITIAL")] MobileInterstitial = 2,
          [pbr::OriginalName("MOBILE_APP_VIDEO")] MobileAppVideo = 3,
        }

        /// <summary>
        /// Information about the companion ad slots that can be shown with the
        /// video. While this is a repeated field there will only be one value in
        /// most cases. If there are no companion ads available this field will not
        /// be set.
        /// </summary>
        public sealed partial class CompanionSlot : pb::IMessage<CompanionSlot> {
          private static readonly pb::MessageParser<CompanionSlot> _parser = new pb::MessageParser<CompanionSlot>(() => new CompanionSlot());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<CompanionSlot> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.Video.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CompanionSlot() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CompanionSlot(CompanionSlot other) : this() {
            height_ = other.height_.Clone();
            width_ = other.width_.Clone();
            creativeFormat_ = other.creativeFormat_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public CompanionSlot Clone() {
            return new CompanionSlot(this);
          }

          /// <summary>Field number for the "height" field.</summary>
          public const int HeightFieldNumber = 1;
          private static readonly pb::FieldCodec<int> _repeated_height_codec
              = pb::FieldCodec.ForInt32(10);
          private readonly pbc::RepeatedField<int> height_ = new pbc::RepeatedField<int>();
          /// <summary>
          /// These fields represent the available heights and widths in this slot.
          /// There will always be the same number heights and widths fields.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<int> Height {
            get { return height_; }
          }

          /// <summary>Field number for the "width" field.</summary>
          public const int WidthFieldNumber = 2;
          private static readonly pb::FieldCodec<int> _repeated_width_codec
              = pb::FieldCodec.ForInt32(18);
          private readonly pbc::RepeatedField<int> width_ = new pbc::RepeatedField<int>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<int> Width {
            get { return width_; }
          }

          /// <summary>Field number for the "creative_format" field.</summary>
          public const int CreativeFormatFieldNumber = 3;
          private static readonly pb::FieldCodec<global::BidRequest.Types.Video.Types.CompanionSlot.Types.CreativeFormat> _repeated_creativeFormat_codec
              = pb::FieldCodec.ForEnum(24, x => (int) x, x => (global::BidRequest.Types.Video.Types.CompanionSlot.Types.CreativeFormat) x);
          private readonly pbc::RepeatedField<global::BidRequest.Types.Video.Types.CompanionSlot.Types.CreativeFormat> creativeFormat_ = new pbc::RepeatedField<global::BidRequest.Types.Video.Types.CompanionSlot.Types.CreativeFormat>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<global::BidRequest.Types.Video.Types.CompanionSlot.Types.CreativeFormat> CreativeFormat {
            get { return creativeFormat_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as CompanionSlot);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(CompanionSlot other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if(!height_.Equals(other.height_)) return false;
            if(!width_.Equals(other.width_)) return false;
            if(!creativeFormat_.Equals(other.creativeFormat_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            hash ^= height_.GetHashCode();
            hash ^= width_.GetHashCode();
            hash ^= creativeFormat_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            height_.WriteTo(output, _repeated_height_codec);
            width_.WriteTo(output, _repeated_width_codec);
            creativeFormat_.WriteTo(output, _repeated_creativeFormat_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            size += height_.CalculateSize(_repeated_height_codec);
            size += width_.CalculateSize(_repeated_width_codec);
            size += creativeFormat_.CalculateSize(_repeated_creativeFormat_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(CompanionSlot other) {
            if (other == null) {
              return;
            }
            height_.Add(other.height_);
            width_.Add(other.width_);
            creativeFormat_.Add(other.creativeFormat_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10:
                case 8: {
                  height_.AddEntriesFrom(input, _repeated_height_codec);
                  break;
                }
                case 18:
                case 16: {
                  width_.AddEntriesFrom(input, _repeated_width_codec);
                  break;
                }
                case 26:
                case 24: {
                  creativeFormat_.AddEntriesFrom(input, _repeated_creativeFormat_codec);
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the CompanionSlot message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// These are the formats of the creatives allowed in this companion ad
            /// slot.
            /// </summary>
            public enum CreativeFormat {
              [pbr::OriginalName("UNKNOWN_CREATIVE_FORMAT")] UnknownCreativeFormat = -1,
              [pbr::OriginalName("IMAGE_CREATIVE")] ImageCreative = 0,
              [pbr::OriginalName("FLASH_CREATIVE")] FlashCreative = 1,
              [pbr::OriginalName("HTML_CREATIVE")] HtmlCreative = 2,
            }

          }
          #endregion

        }

        /// <summary>
        /// Attributes of the video that the user is viewing, not the video ad.
        /// These fields are based on the availability of the video metadata from the
        /// video publisher and may not always be populated.
        /// </summary>
        public sealed partial class ContentAttributes : pb::IMessage<ContentAttributes> {
          private static readonly pb::MessageParser<ContentAttributes> _parser = new pb::MessageParser<ContentAttributes>(() => new ContentAttributes());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ContentAttributes> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.Video.Descriptor.NestedTypes[1]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ContentAttributes() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ContentAttributes(ContentAttributes other) : this() {
            _hasBits0 = other._hasBits0;
            title_ = other.title_;
            durationSeconds_ = other.durationSeconds_;
            keywords_ = other.keywords_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ContentAttributes Clone() {
            return new ContentAttributes(this);
          }

          /// <summary>Field number for the "title" field.</summary>
          public const int TitleFieldNumber = 1;
          private readonly static string TitleDefaultValue = "";

          private string title_;
          /// <summary>
          /// The title of the video.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Title {
            get { return title_ ?? TitleDefaultValue; }
            set {
              title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "title" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasTitle {
            get { return title_ != null; }
          }
          /// <summary>Clears the value of the "title" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearTitle() {
            title_ = null;
          }

          /// <summary>Field number for the "duration_seconds" field.</summary>
          public const int DurationSecondsFieldNumber = 2;
          private readonly static int DurationSecondsDefaultValue = 0;

          private int durationSeconds_;
          /// <summary>
          /// The duration of the video, in seconds.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int DurationSeconds {
            get { if ((_hasBits0 & 1) != 0) { return durationSeconds_; } else { return DurationSecondsDefaultValue; } }
            set {
              _hasBits0 |= 1;
              durationSeconds_ = value;
            }
          }
          /// <summary>Gets whether the "duration_seconds" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasDurationSeconds {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "duration_seconds" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearDurationSeconds() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "keywords" field.</summary>
          public const int KeywordsFieldNumber = 3;
          private static readonly pb::FieldCodec<string> _repeated_keywords_codec
              = pb::FieldCodec.ForString(26);
          private readonly pbc::RepeatedField<string> keywords_ = new pbc::RepeatedField<string>();
          /// <summary>
          /// A list of keywords describing the video, extracted from the content
          /// management system of the video publisher. There will be no more than 10
          /// keywords in this list.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<string> Keywords {
            get { return keywords_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ContentAttributes);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ContentAttributes other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Title != other.Title) return false;
            if (DurationSeconds != other.DurationSeconds) return false;
            if(!keywords_.Equals(other.keywords_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasTitle) hash ^= Title.GetHashCode();
            if (HasDurationSeconds) hash ^= DurationSeconds.GetHashCode();
            hash ^= keywords_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasTitle) {
              output.WriteRawTag(10);
              output.WriteString(Title);
            }
            if (HasDurationSeconds) {
              output.WriteRawTag(16);
              output.WriteInt32(DurationSeconds);
            }
            keywords_.WriteTo(output, _repeated_keywords_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasTitle) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
            }
            if (HasDurationSeconds) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(DurationSeconds);
            }
            size += keywords_.CalculateSize(_repeated_keywords_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ContentAttributes other) {
            if (other == null) {
              return;
            }
            if (other.HasTitle) {
              Title = other.Title;
            }
            if (other.HasDurationSeconds) {
              DurationSeconds = other.DurationSeconds;
            }
            keywords_.Add(other.keywords_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Title = input.ReadString();
                  break;
                }
                case 16: {
                  DurationSeconds = input.ReadInt32();
                  break;
                }
                case 26: {
                  keywords_.AddEntriesFrom(input, _repeated_keywords_codec);
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

    /// <summary>
    /// -----------------------------------------------------------
    /// Information about the adslots on the page.
    /// </summary>
    public sealed partial class AdSlot : pb::IMessage<AdSlot> {
      private static readonly pb::MessageParser<AdSlot> _parser = new pb::MessageParser<AdSlot>(() => new AdSlot());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<AdSlot> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[8]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AdSlot() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AdSlot(AdSlot other) : this() {
        _hasBits0 = other._hasBits0;
        id_ = other.id_;
        adBlockKey_ = other.adBlockKey_;
        targetableChannel_ = other.targetableChannel_.Clone();
        width_ = other.width_.Clone();
        height_ = other.height_.Clone();
        flexibleAdslotSettings_ = other.HasFlexibleAdslotSettings ? other.flexibleAdslotSettings_.Clone() : null;
        excludedAttribute_ = other.excludedAttribute_.Clone();
        allowedVendorType_ = other.allowedVendorType_.Clone();
        consentedProvidersSettings_ = other.HasConsentedProvidersSettings ? other.consentedProvidersSettings_.Clone() : null;
        regsGdpr_ = other.regsGdpr_;
        excludedSensitiveCategory_ = other.excludedSensitiveCategory_.Clone();
        allowedRestrictedCategory_ = other.allowedRestrictedCategory_.Clone();
        allowedRestrictedCategoryForDeals_ = other.allowedRestrictedCategoryForDeals_.Clone();
        allowedLanguages_ = other.allowedLanguages_.Clone();
        excludedProductCategory_ = other.excludedProductCategory_.Clone();
        excludedCreatives_ = other.excludedCreatives_.Clone();
        onlyDealBidsAccepted_ = other.onlyDealBidsAccepted_;
        matchingAdData_ = other.matchingAdData_.Clone();
        publisherSettingsListId_ = other.publisherSettingsListId_.Clone();
        exchangeBidding_ = other.HasExchangeBidding ? other.exchangeBidding_.Clone() : null;
        openBidding_ = other.HasOpenBidding ? other.openBidding_.Clone() : null;
        dfpAdUnitCode_ = other.dfpAdUnitCode_;
        slotVisibility_ = other.slotVisibility_;
        viewability_ = other.viewability_;
        clickThroughRate_ = other.clickThroughRate_;
        videoCompletionRate_ = other.videoCompletionRate_;
        iframingState_ = other.iframingState_;
        iframingDepth_ = other.iframingDepth_;
        nativeAdTemplate_ = other.nativeAdTemplate_.Clone();
        nativePlacementType_ = other.nativePlacementType_;
        mediationStatus_ = other.mediationStatus_;
        autoRefresh_ = other.HasAutoRefresh ? other.autoRefresh_.Clone() : null;
        stickySettings_ = other.HasStickySettings ? other.stickySettings_.Clone() : null;
        nonBrowserSlotSource_ = other.nonBrowserSlotSource_;
        renderer_ = other.renderer_;
        ampAdRequestType_ = other.ampAdRequestType_;
        isAmpPage_ = other.isAmpPage_;
        ampAdRequirementType_ = other.ampAdRequirementType_;
        isRewarded_ = other.isRewarded_;
        allowedAdTypes_ = other.allowedAdTypes_.Clone();
        sessionDepth_ = other.sessionDepth_;
        buyerGeneratedRequestData_ = other.buyerGeneratedRequestData_.Clone();
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public AdSlot Clone() {
        return new AdSlot(this);
      }

      /// <summary>Field number for the "id" field.</summary>
      public const int IdFieldNumber = 1;
      private readonly static int IdDefaultValue = 0;

      private int id_;
      /// <summary>
      /// An arbitrarily assigned slot id that is unique on a given page and
      /// usually starts counting from 1. You use this to identify which slot to
      /// bid on in the BidResponse.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Id {
        get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
        set {
          _hasBits0 |= 1;
          id_ = value;
        }
      }
      /// <summary>Gets whether the "id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasId {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearId() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "ad_block_key" field.</summary>
      public const int AdBlockKeyFieldNumber = 14;
      private readonly static ulong AdBlockKeyDefaultValue = 0UL;

      private ulong adBlockKey_;
      /// <summary>
      /// A stable identifier for the combination of publisher, ad slot, and page.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public ulong AdBlockKey {
        get { if ((_hasBits0 & 4) != 0) { return adBlockKey_; } else { return AdBlockKeyDefaultValue; } }
        set {
          _hasBits0 |= 4;
          adBlockKey_ = value;
        }
      }
      /// <summary>Gets whether the "ad_block_key" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAdBlockKey {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "ad_block_key" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAdBlockKey() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "targetable_channel" field.</summary>
      public const int TargetableChannelFieldNumber = 10;
      private static readonly pb::FieldCodec<string> _repeated_targetableChannel_codec
          = pb::FieldCodec.ForString(82);
      private readonly pbc::RepeatedField<string> targetableChannel_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// Set of channels of which this ad slot is a member. A channel is a set of
      /// ad slots on a site. You can target a channel (like "the sports section",
      /// or "all top banners") to get more fine-grained control over where your ad
      /// shows. Channel names are provided by the publisher.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> TargetableChannel {
        get { return targetableChannel_; }
      }

      /// <summary>Field number for the "width" field.</summary>
      public const int WidthFieldNumber = 2;
      private static readonly pb::FieldCodec<int> _repeated_width_codec
          = pb::FieldCodec.ForInt32(16);
      private readonly pbc::RepeatedField<int> width_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The width and height in pixels of the allowed ad sizes. Most requests
      /// allow only a single size, but some allow more than one. Widths and
      /// heights are at the same index. For example, if the width values are
      /// [728, 300, 468] and the height values are [90, 250, 60], then the allowed
      /// formats are 728x90, 300x250, and 468x60.
      ///
      /// For VAST video ad requests a single width/height pair specifies the
      /// Google-detected video player size. If Google cannot detect the player
      /// size the publisher-provided player size, if available, is used. For
      /// VAST video ads, this size is informational; there is no restriction on
      /// the size of the video ad that you can return.
      ///
      /// For mobile interstitial ads (including ones where video ads are eligible)
      /// the first width height pair is the slot size (this is also the video
      /// player size for VAST video ads). For many interstitials, this is the
      /// screen size. Subsequent pairs are recommended interstitial ad sizes that
      /// also meet the requirements for this interstitial.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> Width {
        get { return width_; }
      }

      /// <summary>Field number for the "height" field.</summary>
      public const int HeightFieldNumber = 3;
      private static readonly pb::FieldCodec<int> _repeated_height_codec
          = pb::FieldCodec.ForInt32(24);
      private readonly pbc::RepeatedField<int> height_ = new pbc::RepeatedField<int>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> Height {
        get { return height_; }
      }

      /// <summary>Field number for the "flexible_adslot_settings" field.</summary>
      public const int FlexibleAdslotSettingsFieldNumber = 50;
      private global::BidRequest.Types.AdSlot.Types.FlexibleAdSlotSettings flexibleAdslotSettings_;
      /// <summary>
      /// If the adslot is flexible, this contains settings on how the slot
      /// may be resized.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.FlexibleAdSlotSettings FlexibleAdslotSettings {
        get { return flexibleAdslotSettings_; }
        set {
          flexibleAdslotSettings_ = value;
        }
      }
      /// <summary>Gets whether the flexible_adslot_settings field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasFlexibleAdslotSettings {
        get { return flexibleAdslotSettings_ != null; }
      }
      /// <summary>Clears the value of the flexible_adslot_settings field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearFlexibleAdslotSettings() {
        flexibleAdslotSettings_ = null;
      }

      /// <summary>Field number for the "excluded_attribute" field.</summary>
      public const int ExcludedAttributeFieldNumber = 4;
      private static readonly pb::FieldCodec<int> _repeated_excludedAttribute_codec
          = pb::FieldCodec.ForInt32(34);
      private readonly pbc::RepeatedField<int> excludedAttribute_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The disallowed attribute ids for the ads that can show in this slot. See
      /// the publisher-excludable-creative-attributes.txt file in the technical
      /// documentation for a list of ids.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> ExcludedAttribute {
        get { return excludedAttribute_; }
      }

      /// <summary>Field number for the "allowed_vendor_type" field.</summary>
      public const int AllowedVendorTypeFieldNumber = 6;
      private static readonly pb::FieldCodec<int> _repeated_allowedVendorType_codec
          = pb::FieldCodec.ForInt32(50);
      private readonly pbc::RepeatedField<int> allowedVendorType_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The allowed vendor types. See the vendors.txt file in the technical
      /// documentation for a list of ids. This field does not apply to deals with
      /// block overrides (see
      /// https://support.google.com/authorizedbuyers/answer/6114194).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> AllowedVendorType {
        get { return allowedVendorType_; }
      }

      /// <summary>Field number for the "consented_providers_settings" field.</summary>
      public const int ConsentedProvidersSettingsFieldNumber = 42;
      private global::BidRequest.Types.AdSlot.Types.ConsentedProvidersSettings consentedProvidersSettings_;
      /// <summary>
      /// Information about the providers for whom the publisher has told Google
      /// that its EEA users have consented to the use of their personal data for
      /// ads personalization. This field will only be populated when regs_gdpr is
      /// true.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.ConsentedProvidersSettings ConsentedProvidersSettings {
        get { return consentedProvidersSettings_; }
        set {
          consentedProvidersSettings_ = value;
        }
      }
      /// <summary>Gets whether the consented_providers_settings field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasConsentedProvidersSettings {
        get { return consentedProvidersSettings_ != null; }
      }
      /// <summary>Clears the value of the consented_providers_settings field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearConsentedProvidersSettings() {
        consentedProvidersSettings_ = null;
      }

      /// <summary>Field number for the "regs_gdpr" field.</summary>
      public const int RegsGdprFieldNumber = 43;
      private readonly static bool RegsGdprDefaultValue = false;

      private bool regsGdpr_;
      /// <summary>
      /// AdX fills this field solely based on whether the impression will serve to
      /// an EEA user, based on information available to Google. It does not
      /// constitute legal guidance on GDPR.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool RegsGdpr {
        get { if ((_hasBits0 & 32768) != 0) { return regsGdpr_; } else { return RegsGdprDefaultValue; } }
        set {
          _hasBits0 |= 32768;
          regsGdpr_ = value;
        }
      }
      /// <summary>Gets whether the "regs_gdpr" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasRegsGdpr {
        get { return (_hasBits0 & 32768) != 0; }
      }
      /// <summary>Clears the value of the "regs_gdpr" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearRegsGdpr() {
        _hasBits0 &= ~32768;
      }

      /// <summary>Field number for the "excluded_sensitive_category" field.</summary>
      public const int ExcludedSensitiveCategoryFieldNumber = 7;
      private static readonly pb::FieldCodec<int> _repeated_excludedSensitiveCategory_codec
          = pb::FieldCodec.ForInt32(58);
      private readonly pbc::RepeatedField<int> excludedSensitiveCategory_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The disallowed sensitive ad categories. See the
      /// ad-sensitive-categories.txt file in the technical documentation for a
      /// list of ids. You should enforce these exclusions if you have the ability
      /// to classify ads into the listed categories. This field does not apply to
      /// deals with block overrides (see
      /// https://support.google.com/authorizedbuyers/answer/6114194).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> ExcludedSensitiveCategory {
        get { return excludedSensitiveCategory_; }
      }

      /// <summary>Field number for the "allowed_restricted_category" field.</summary>
      public const int AllowedRestrictedCategoryFieldNumber = 16;
      private static readonly pb::FieldCodec<int> _repeated_allowedRestrictedCategory_codec
          = pb::FieldCodec.ForInt32(130);
      private readonly pbc::RepeatedField<int> allowedRestrictedCategory_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The allowed restricted ad categories for private and open auctions. See
      /// the ad-restricted-categories.txt file in the technical documentation for
      /// a list of ids. These only apply for private and open auction bids. See
      /// the allowed_restricted_category_for_deals field for preferred deals or
      /// programmatic guarantees. If you bid with an ad in a restricted category,
      /// you MUST ALWAYS declare the category in the bid response regardless of
      /// the values in this field.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> AllowedRestrictedCategory {
        get { return allowedRestrictedCategory_; }
      }

      /// <summary>Field number for the "allowed_restricted_category_for_deals" field.</summary>
      public const int AllowedRestrictedCategoryForDealsFieldNumber = 22;
      private static readonly pb::FieldCodec<int> _repeated_allowedRestrictedCategoryForDeals_codec
          = pb::FieldCodec.ForInt32(178);
      private readonly pbc::RepeatedField<int> allowedRestrictedCategoryForDeals_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The allowed restricted ad categories for preferred deals or programmatic
      /// guarantees. See the ad-restricted-categories.txt file in the technical
      /// documentation for a list of ids. These only apply for preferred deals or
      /// programmatic guarantees. See the allowed_restricted_category field for
      /// private and open auctions. In some cases, restricted categories are only
      /// allowed on preferred deals or programmatic guarantees, so this field
      /// lists all categories in allowed_restricted_category, and additionally,
      /// restricted categories that are only allowed for preferred deals or
      /// programmatic guarantees. If you bid with an ad in a restricted category,
      /// you MUST ALWAYS declare the category in the bid response regardless of
      /// the values in this field.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> AllowedRestrictedCategoryForDeals {
        get { return allowedRestrictedCategoryForDeals_; }
      }

      /// <summary>Field number for the "allowed_languages" field.</summary>
      public const int AllowedLanguagesFieldNumber = 27;
      private static readonly pb::FieldCodec<string> _repeated_allowedLanguages_codec
          = pb::FieldCodec.ForString(218);
      private readonly pbc::RepeatedField<string> allowedLanguages_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// List of creative languages allowed by the publisher. The order is
      /// arbitrary. The codes are 2 or 5 characters and are documented at
      /// https://developers.google.com/adwords/api/docs/appendix/languagecodes.
      /// When not set, all languages are allowed.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> AllowedLanguages {
        get { return allowedLanguages_; }
      }

      /// <summary>Field number for the "excluded_product_category" field.</summary>
      public const int ExcludedProductCategoryFieldNumber = 13;
      private static readonly pb::FieldCodec<int> _repeated_excludedProductCategory_codec
          = pb::FieldCodec.ForInt32(106);
      private readonly pbc::RepeatedField<int> excludedProductCategory_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// The disallowed ad product categories. See the ad-product-categories.txt
      /// file in the technical documentation for a list of ids. You should enforce
      /// these exclusions if you have the ability to classify ads into the listed
      /// categories. This field does not apply to deals with block overrides (see
      /// https://support.google.com/authorizedbuyers/answer/6114194).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> ExcludedProductCategory {
        get { return excludedProductCategory_; }
      }

      /// <summary>Field number for the "excluded_creatives" field.</summary>
      public const int ExcludedCreativesFieldNumber = 18;
      private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.ExcludedCreative> _repeated_excludedCreatives_codec
          = pb::FieldCodec.ForMessage(146, global::BidRequest.Types.AdSlot.Types.ExcludedCreative.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.ExcludedCreative> excludedCreatives_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.ExcludedCreative>();
      /// <summary>
      /// Creatives that are disallowed for the impression. Submitting a bid with
      /// one of the creatives in this list will result in such bid being filtered
      /// before the auction. Please contact your account manager if you would like
      /// to enable this feature.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.ExcludedCreative> ExcludedCreatives {
        get { return excludedCreatives_; }
      }

      /// <summary>Field number for the "only_deal_bids_accepted" field.</summary>
      public const int OnlyDealBidsAcceptedFieldNumber = 49;
      private readonly static bool OnlyDealBidsAcceptedDefaultValue = false;

      private bool onlyDealBidsAccepted_;
      /// <summary>
      /// Whether the adslot is only eligible for deals bids. Bids for the open
      /// auction will be filtered when this field is set to true. Bidders can bid
      /// on the open auction or deals when this field is set to false.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool OnlyDealBidsAccepted {
        get { if ((_hasBits0 & 131072) != 0) { return onlyDealBidsAccepted_; } else { return OnlyDealBidsAcceptedDefaultValue; } }
        set {
          _hasBits0 |= 131072;
          onlyDealBidsAccepted_ = value;
        }
      }
      /// <summary>Gets whether the "only_deal_bids_accepted" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasOnlyDealBidsAccepted {
        get { return (_hasBits0 & 131072) != 0; }
      }
      /// <summary>Clears the value of the "only_deal_bids_accepted" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearOnlyDealBidsAccepted() {
        _hasBits0 &= ~131072;
      }

      /// <summary>Field number for the "matching_ad_data" field.</summary>
      public const int MatchingAdDataFieldNumber = 9;
      private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.MatchingAdData> _repeated_matchingAdData_codec
          = pb::FieldCodec.ForMessage(74, global::BidRequest.Types.AdSlot.Types.MatchingAdData.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData> matchingAdData_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData> MatchingAdData {
        get { return matchingAdData_; }
      }

      /// <summary>Field number for the "publisher_settings_list_id" field.</summary>
      public const int PublisherSettingsListIdFieldNumber = 15;
      private static readonly pb::FieldCodec<ulong> _repeated_publisherSettingsListId_codec
          = pb::FieldCodec.ForFixed64(121);
      private readonly pbc::RepeatedField<ulong> publisherSettingsListId_ = new pbc::RepeatedField<ulong>();
      /// <summary>
      /// The publisher settings list ids that apply to this slot. See the RTB
      /// Publisher Settings guide at
      /// https://developers.google.com/authorized-buyers/rtb/pub-settings-guide
      /// for details.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<ulong> PublisherSettingsListId {
        get { return publisherSettingsListId_; }
      }

      /// <summary>Field number for the "exchange_bidding" field.</summary>
      public const int ExchangeBiddingFieldNumber = 28;
      private global::BidRequest.Types.AdSlot.Types.ExchangeBidding exchangeBidding_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.ExchangeBidding ExchangeBidding {
        get { return exchangeBidding_; }
        set {
          exchangeBidding_ = value;
        }
      }
      /// <summary>Gets whether the exchange_bidding field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasExchangeBidding {
        get { return exchangeBidding_ != null; }
      }
      /// <summary>Clears the value of the exchange_bidding field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearExchangeBidding() {
        exchangeBidding_ = null;
      }

      /// <summary>Field number for the "open_bidding" field.</summary>
      public const int OpenBiddingFieldNumber = 53;
      private global::BidRequest.Types.AdSlot.Types.OpenBidding openBidding_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.OpenBidding OpenBidding {
        get { return openBidding_; }
        set {
          openBidding_ = value;
        }
      }
      /// <summary>Gets whether the open_bidding field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasOpenBidding {
        get { return openBidding_ != null; }
      }
      /// <summary>Clears the value of the open_bidding field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearOpenBidding() {
        openBidding_ = null;
      }

      /// <summary>Field number for the "dfp_ad_unit_code" field.</summary>
      public const int DfpAdUnitCodeFieldNumber = 33;
      private readonly static string DfpAdUnitCodeDefaultValue = "";

      private string dfpAdUnitCode_;
      /// <summary>
      /// The ad unit code (https://support.google.com/admanager/topic/4426071)
      /// This is currently only set for exchange bidding requests.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string DfpAdUnitCode {
        get { return dfpAdUnitCode_ ?? DfpAdUnitCodeDefaultValue; }
        set {
          dfpAdUnitCode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "dfp_ad_unit_code" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasDfpAdUnitCode {
        get { return dfpAdUnitCode_ != null; }
      }
      /// <summary>Clears the value of the "dfp_ad_unit_code" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearDfpAdUnitCode() {
        dfpAdUnitCode_ = null;
      }

      /// <summary>Field number for the "slot_visibility" field.</summary>
      public const int SlotVisibilityFieldNumber = 12;
      private readonly static global::BidRequest.Types.AdSlot.Types.SlotVisibility SlotVisibilityDefaultValue = global::BidRequest.Types.AdSlot.Types.SlotVisibility.NoDetection;

      private global::BidRequest.Types.AdSlot.Types.SlotVisibility slotVisibility_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.SlotVisibility SlotVisibility {
        get { if ((_hasBits0 & 2) != 0) { return slotVisibility_; } else { return SlotVisibilityDefaultValue; } }
        set {
          _hasBits0 |= 2;
          slotVisibility_ = value;
        }
      }
      /// <summary>Gets whether the "slot_visibility" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasSlotVisibility {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "slot_visibility" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearSlotVisibility() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "viewability" field.</summary>
      public const int ViewabilityFieldNumber = 21;
      private readonly static int ViewabilityDefaultValue = -1;

      private int viewability_;
      /// <summary>
      /// Viewability percentage for the ad slot. This is an estimate of the
      /// likelihood that this slot will be viewable by the end user based on
      /// historical and environment data. It is expressed as a percentage in the
      /// range of [0, 100]. The default value -1 indicates that viewability could
      /// not be estimated.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Viewability {
        get { if ((_hasBits0 & 32) != 0) { return viewability_; } else { return ViewabilityDefaultValue; } }
        set {
          _hasBits0 |= 32;
          viewability_ = value;
        }
      }
      /// <summary>Gets whether the "viewability" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasViewability {
        get { return (_hasBits0 & 32) != 0; }
      }
      /// <summary>Clears the value of the "viewability" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearViewability() {
        _hasBits0 &= ~32;
      }

      /// <summary>Field number for the "click_through_rate" field.</summary>
      public const int ClickThroughRateFieldNumber = 25;
      private readonly static float ClickThroughRateDefaultValue = -1F;

      private float clickThroughRate_;
      /// <summary>
      /// Historical click-through rate for ads served in the ad slot. This is
      /// expressed as a fraction in the range [0.0, 1.0]. The default value of
      /// -1.0 indicates that historical click-through rate data is not available.
      /// This figure does not include data aggregated from AdWords.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float ClickThroughRate {
        get { if ((_hasBits0 & 64) != 0) { return clickThroughRate_; } else { return ClickThroughRateDefaultValue; } }
        set {
          _hasBits0 |= 64;
          clickThroughRate_ = value;
        }
      }
      /// <summary>Gets whether the "click_through_rate" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasClickThroughRate {
        get { return (_hasBits0 & 64) != 0; }
      }
      /// <summary>Clears the value of the "click_through_rate" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearClickThroughRate() {
        _hasBits0 &= ~64;
      }

      /// <summary>Field number for the "video_completion_rate" field.</summary>
      public const int VideoCompletionRateFieldNumber = 30;
      private readonly static float VideoCompletionRateDefaultValue = -1F;

      private float videoCompletionRate_;
      /// <summary>
      /// Historical completion rate for video ads served in the ad slot. This is
      /// expressed as a fraction in the range [0.0, 1.0]. The default value of
      /// -1.0 indicates that historical completion rate data is not available.
      /// This field is only applicable to video inventory, and does not include
      /// data aggregated from AdWords.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float VideoCompletionRate {
        get { if ((_hasBits0 & 512) != 0) { return videoCompletionRate_; } else { return VideoCompletionRateDefaultValue; } }
        set {
          _hasBits0 |= 512;
          videoCompletionRate_ = value;
        }
      }
      /// <summary>Gets whether the "video_completion_rate" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasVideoCompletionRate {
        get { return (_hasBits0 & 512) != 0; }
      }
      /// <summary>Clears the value of the "video_completion_rate" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearVideoCompletionRate() {
        _hasBits0 &= ~512;
      }

      /// <summary>Field number for the "iframing_state" field.</summary>
      public const int IframingStateFieldNumber = 19;
      private readonly static global::BidRequest.Types.AdSlot.Types.IFramingState IframingStateDefaultValue = global::BidRequest.Types.AdSlot.Types.IFramingState.UnknownIframeState;

      private global::BidRequest.Types.AdSlot.Types.IFramingState iframingState_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.IFramingState IframingState {
        get { if ((_hasBits0 & 8) != 0) { return iframingState_; } else { return IframingStateDefaultValue; } }
        set {
          _hasBits0 |= 8;
          iframingState_ = value;
        }
      }
      /// <summary>Gets whether the "iframing_state" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIframingState {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "iframing_state" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIframingState() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "iframing_depth" field.</summary>
      public const int IframingDepthFieldNumber = 20;
      private readonly static global::BidRequest.Types.AdSlot.Types.IFramingDepth IframingDepthDefaultValue = global::BidRequest.Types.AdSlot.Types.IFramingDepth.UnknownIframeDepth;

      private global::BidRequest.Types.AdSlot.Types.IFramingDepth iframingDepth_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.IFramingDepth IframingDepth {
        get { if ((_hasBits0 & 16) != 0) { return iframingDepth_; } else { return IframingDepthDefaultValue; } }
        set {
          _hasBits0 |= 16;
          iframingDepth_ = value;
        }
      }
      /// <summary>Gets whether the "iframing_depth" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIframingDepth {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "iframing_depth" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIframingDepth() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "native_ad_template" field.</summary>
      public const int NativeAdTemplateFieldNumber = 51;
      private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.NativeAdTemplate> _repeated_nativeAdTemplate_codec
          = pb::FieldCodec.ForMessage(410, global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.NativeAdTemplate> nativeAdTemplate_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.NativeAdTemplate>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.NativeAdTemplate> NativeAdTemplate {
        get { return nativeAdTemplate_; }
      }

      /// <summary>Field number for the "native_placement_type" field.</summary>
      public const int NativePlacementTypeFieldNumber = 45;
      private readonly static global::BidRequest.Types.AdSlot.Types.NativePlacementType NativePlacementTypeDefaultValue = global::BidRequest.Types.AdSlot.Types.NativePlacementType.PlacementUnknown;

      private global::BidRequest.Types.AdSlot.Types.NativePlacementType nativePlacementType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.NativePlacementType NativePlacementType {
        get { if ((_hasBits0 & 65536) != 0) { return nativePlacementType_; } else { return NativePlacementTypeDefaultValue; } }
        set {
          _hasBits0 |= 65536;
          nativePlacementType_ = value;
        }
      }
      /// <summary>Gets whether the "native_placement_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasNativePlacementType {
        get { return (_hasBits0 & 65536) != 0; }
      }
      /// <summary>Clears the value of the "native_placement_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearNativePlacementType() {
        _hasBits0 &= ~65536;
      }

      /// <summary>Field number for the "mediation_status" field.</summary>
      public const int MediationStatusFieldNumber = 52;
      private readonly static global::BidRequest.Types.AdSlot.Types.MediationStatus MediationStatusDefaultValue = global::BidRequest.Types.AdSlot.Types.MediationStatus.Unknown;

      private global::BidRequest.Types.AdSlot.Types.MediationStatus mediationStatus_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.MediationStatus MediationStatus {
        get { if ((_hasBits0 & 262144) != 0) { return mediationStatus_; } else { return MediationStatusDefaultValue; } }
        set {
          _hasBits0 |= 262144;
          mediationStatus_ = value;
        }
      }
      /// <summary>Gets whether the "mediation_status" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasMediationStatus {
        get { return (_hasBits0 & 262144) != 0; }
      }
      /// <summary>Clears the value of the "mediation_status" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearMediationStatus() {
        _hasBits0 &= ~262144;
      }

      /// <summary>Field number for the "auto_refresh" field.</summary>
      public const int AutoRefreshFieldNumber = 23;
      private global::BidRequest.Types.AdSlot.Types.AutoRefresh autoRefresh_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.AutoRefresh AutoRefresh {
        get { return autoRefresh_; }
        set {
          autoRefresh_ = value;
        }
      }
      /// <summary>Gets whether the auto_refresh field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAutoRefresh {
        get { return autoRefresh_ != null; }
      }
      /// <summary>Clears the value of the auto_refresh field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAutoRefresh() {
        autoRefresh_ = null;
      }

      /// <summary>Field number for the "sticky_settings" field.</summary>
      public const int StickySettingsFieldNumber = 31;
      private global::BidRequest.Types.AdSlot.Types.StickySettings stickySettings_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.StickySettings StickySettings {
        get { return stickySettings_; }
        set {
          stickySettings_ = value;
        }
      }
      /// <summary>Gets whether the sticky_settings field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasStickySettings {
        get { return stickySettings_ != null; }
      }
      /// <summary>Clears the value of the sticky_settings field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearStickySettings() {
        stickySettings_ = null;
      }

      /// <summary>Field number for the "non_browser_slot_source" field.</summary>
      public const int NonBrowserSlotSourceFieldNumber = 34;
      private readonly static global::BidRequest.Types.AdSlot.Types.NonBrowserSource NonBrowserSlotSourceDefaultValue = global::BidRequest.Types.AdSlot.Types.NonBrowserSource.UndeclaredSource;

      private global::BidRequest.Types.AdSlot.Types.NonBrowserSource nonBrowserSlotSource_;
      /// <summary>
      /// Publisher declaration stating that this ad slot may serve on
      /// non-browser inventory, like desktop apps.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.NonBrowserSource NonBrowserSlotSource {
        get { if ((_hasBits0 & 2048) != 0) { return nonBrowserSlotSource_; } else { return NonBrowserSlotSourceDefaultValue; } }
        set {
          _hasBits0 |= 2048;
          nonBrowserSlotSource_ = value;
        }
      }
      /// <summary>Gets whether the "non_browser_slot_source" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasNonBrowserSlotSource {
        get { return (_hasBits0 & 2048) != 0; }
      }
      /// <summary>Clears the value of the "non_browser_slot_source" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearNonBrowserSlotSource() {
        _hasBits0 &= ~2048;
      }

      /// <summary>Field number for the "renderer" field.</summary>
      public const int RendererFieldNumber = 26;
      private readonly static global::BidRequest.Types.AdSlot.Types.Renderer RendererDefaultValue = global::BidRequest.Types.AdSlot.Types.Renderer.UnknownRenderer;

      private global::BidRequest.Types.AdSlot.Types.Renderer renderer_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.Renderer Renderer {
        get { if ((_hasBits0 & 128) != 0) { return renderer_; } else { return RendererDefaultValue; } }
        set {
          _hasBits0 |= 128;
          renderer_ = value;
        }
      }
      /// <summary>Gets whether the "renderer" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasRenderer {
        get { return (_hasBits0 & 128) != 0; }
      }
      /// <summary>Clears the value of the "renderer" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearRenderer() {
        _hasBits0 &= ~128;
      }

      /// <summary>Field number for the "amp_ad_request_type" field.</summary>
      public const int AmpAdRequestTypeFieldNumber = 29;
      private readonly static global::BidRequest.Types.AdSlot.Types.AmpAdRequestType AmpAdRequestTypeDefaultValue = global::BidRequest.Types.AdSlot.Types.AmpAdRequestType.NonAmpPage;

      private global::BidRequest.Types.AdSlot.Types.AmpAdRequestType ampAdRequestType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.AmpAdRequestType AmpAdRequestType {
        get { if ((_hasBits0 & 256) != 0) { return ampAdRequestType_; } else { return AmpAdRequestTypeDefaultValue; } }
        set {
          _hasBits0 |= 256;
          ampAdRequestType_ = value;
        }
      }
      /// <summary>Gets whether the "amp_ad_request_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAmpAdRequestType {
        get { return (_hasBits0 & 256) != 0; }
      }
      /// <summary>Clears the value of the "amp_ad_request_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAmpAdRequestType() {
        _hasBits0 &= ~256;
      }

      /// <summary>Field number for the "is_amp_page" field.</summary>
      public const int IsAmpPageFieldNumber = 38;
      private readonly static global::BidRequest.Types.AdSlot.Types.AmpPage IsAmpPageDefaultValue = global::BidRequest.Types.AdSlot.Types.AmpPage.UnknownAmpPage;

      private global::BidRequest.Types.AdSlot.Types.AmpPage isAmpPage_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.AmpPage IsAmpPage {
        get { if ((_hasBits0 & 4096) != 0) { return isAmpPage_; } else { return IsAmpPageDefaultValue; } }
        set {
          _hasBits0 |= 4096;
          isAmpPage_ = value;
        }
      }
      /// <summary>Gets whether the "is_amp_page" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsAmpPage {
        get { return (_hasBits0 & 4096) != 0; }
      }
      /// <summary>Clears the value of the "is_amp_page" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsAmpPage() {
        _hasBits0 &= ~4096;
      }

      /// <summary>Field number for the "amp_ad_requirement_type" field.</summary>
      public const int AmpAdRequirementTypeFieldNumber = 39;
      private readonly static global::BidRequest.Types.AdSlot.Types.AmpAdRequirementType AmpAdRequirementTypeDefaultValue = global::BidRequest.Types.AdSlot.Types.AmpAdRequirementType.UnknownAmpAdRequirementType;

      private global::BidRequest.Types.AdSlot.Types.AmpAdRequirementType ampAdRequirementType_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidRequest.Types.AdSlot.Types.AmpAdRequirementType AmpAdRequirementType {
        get { if ((_hasBits0 & 8192) != 0) { return ampAdRequirementType_; } else { return AmpAdRequirementTypeDefaultValue; } }
        set {
          _hasBits0 |= 8192;
          ampAdRequirementType_ = value;
        }
      }
      /// <summary>Gets whether the "amp_ad_requirement_type" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAmpAdRequirementType {
        get { return (_hasBits0 & 8192) != 0; }
      }
      /// <summary>Clears the value of the "amp_ad_requirement_type" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAmpAdRequirementType() {
        _hasBits0 &= ~8192;
      }

      /// <summary>Field number for the "is_rewarded" field.</summary>
      public const int IsRewardedFieldNumber = 32;
      private readonly static bool IsRewardedDefaultValue = false;

      private bool isRewarded_;
      /// <summary>
      /// Whether the user receives a reward for viewing the ad. For video ads,
      /// typical implementations allow users to read an additional news article
      /// for free, receive an extra life in a game, or get a sponsored ad-free
      /// music session. The reward is typically distributed after the video ad is
      /// completed.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool IsRewarded {
        get { if ((_hasBits0 & 1024) != 0) { return isRewarded_; } else { return IsRewardedDefaultValue; } }
        set {
          _hasBits0 |= 1024;
          isRewarded_ = value;
        }
      }
      /// <summary>Gets whether the "is_rewarded" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasIsRewarded {
        get { return (_hasBits0 & 1024) != 0; }
      }
      /// <summary>Clears the value of the "is_rewarded" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearIsRewarded() {
        _hasBits0 &= ~1024;
      }

      /// <summary>Field number for the "allowed_ad_types" field.</summary>
      public const int AllowedAdTypesFieldNumber = 36;
      private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.AllowedAdType> _repeated_allowedAdTypes_codec
          = pb::FieldCodec.ForEnum(290, x => (int) x, x => (global::BidRequest.Types.AdSlot.Types.AllowedAdType) x);
      private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.AllowedAdType> allowedAdTypes_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.AllowedAdType>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.AllowedAdType> AllowedAdTypes {
        get { return allowedAdTypes_; }
      }

      /// <summary>Field number for the "session_depth" field.</summary>
      public const int SessionDepthFieldNumber = 40;
      private readonly static int SessionDepthDefaultValue = -1;

      private int sessionDepth_;
      /// <summary>
      /// Total number of impressions served to this user (within this specific
      /// site or app) in this browsing session, plus 1. A session ends after 30
      /// minutes inactivity.  The default value of -1 indicates that the session
      /// depth cannot be estimated.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int SessionDepth {
        get { if ((_hasBits0 & 16384) != 0) { return sessionDepth_; } else { return SessionDepthDefaultValue; } }
        set {
          _hasBits0 |= 16384;
          sessionDepth_ = value;
        }
      }
      /// <summary>Gets whether the "session_depth" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasSessionDepth {
        get { return (_hasBits0 & 16384) != 0; }
      }
      /// <summary>Clears the value of the "session_depth" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearSessionDepth() {
        _hasBits0 &= ~16384;
      }

      /// <summary>Field number for the "buyer_generated_request_data" field.</summary>
      public const int BuyerGeneratedRequestDataFieldNumber = 41;
      private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData> _repeated_buyerGeneratedRequestData_codec
          = pb::FieldCodec.ForMessage(330, global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Parser);
      private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData> buyerGeneratedRequestData_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData> BuyerGeneratedRequestData {
        get { return buyerGeneratedRequestData_; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as AdSlot);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(AdSlot other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Id != other.Id) return false;
        if (AdBlockKey != other.AdBlockKey) return false;
        if(!targetableChannel_.Equals(other.targetableChannel_)) return false;
        if(!width_.Equals(other.width_)) return false;
        if(!height_.Equals(other.height_)) return false;
        if (!object.Equals(FlexibleAdslotSettings, other.FlexibleAdslotSettings)) return false;
        if(!excludedAttribute_.Equals(other.excludedAttribute_)) return false;
        if(!allowedVendorType_.Equals(other.allowedVendorType_)) return false;
        if (!object.Equals(ConsentedProvidersSettings, other.ConsentedProvidersSettings)) return false;
        if (RegsGdpr != other.RegsGdpr) return false;
        if(!excludedSensitiveCategory_.Equals(other.excludedSensitiveCategory_)) return false;
        if(!allowedRestrictedCategory_.Equals(other.allowedRestrictedCategory_)) return false;
        if(!allowedRestrictedCategoryForDeals_.Equals(other.allowedRestrictedCategoryForDeals_)) return false;
        if(!allowedLanguages_.Equals(other.allowedLanguages_)) return false;
        if(!excludedProductCategory_.Equals(other.excludedProductCategory_)) return false;
        if(!excludedCreatives_.Equals(other.excludedCreatives_)) return false;
        if (OnlyDealBidsAccepted != other.OnlyDealBidsAccepted) return false;
        if(!matchingAdData_.Equals(other.matchingAdData_)) return false;
        if(!publisherSettingsListId_.Equals(other.publisherSettingsListId_)) return false;
        if (!object.Equals(ExchangeBidding, other.ExchangeBidding)) return false;
        if (!object.Equals(OpenBidding, other.OpenBidding)) return false;
        if (DfpAdUnitCode != other.DfpAdUnitCode) return false;
        if (SlotVisibility != other.SlotVisibility) return false;
        if (Viewability != other.Viewability) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(ClickThroughRate, other.ClickThroughRate)) return false;
        if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(VideoCompletionRate, other.VideoCompletionRate)) return false;
        if (IframingState != other.IframingState) return false;
        if (IframingDepth != other.IframingDepth) return false;
        if(!nativeAdTemplate_.Equals(other.nativeAdTemplate_)) return false;
        if (NativePlacementType != other.NativePlacementType) return false;
        if (MediationStatus != other.MediationStatus) return false;
        if (!object.Equals(AutoRefresh, other.AutoRefresh)) return false;
        if (!object.Equals(StickySettings, other.StickySettings)) return false;
        if (NonBrowserSlotSource != other.NonBrowserSlotSource) return false;
        if (Renderer != other.Renderer) return false;
        if (AmpAdRequestType != other.AmpAdRequestType) return false;
        if (IsAmpPage != other.IsAmpPage) return false;
        if (AmpAdRequirementType != other.AmpAdRequirementType) return false;
        if (IsRewarded != other.IsRewarded) return false;
        if(!allowedAdTypes_.Equals(other.allowedAdTypes_)) return false;
        if (SessionDepth != other.SessionDepth) return false;
        if(!buyerGeneratedRequestData_.Equals(other.buyerGeneratedRequestData_)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasId) hash ^= Id.GetHashCode();
        if (HasAdBlockKey) hash ^= AdBlockKey.GetHashCode();
        hash ^= targetableChannel_.GetHashCode();
        hash ^= width_.GetHashCode();
        hash ^= height_.GetHashCode();
        if (HasFlexibleAdslotSettings) hash ^= FlexibleAdslotSettings.GetHashCode();
        hash ^= excludedAttribute_.GetHashCode();
        hash ^= allowedVendorType_.GetHashCode();
        if (HasConsentedProvidersSettings) hash ^= ConsentedProvidersSettings.GetHashCode();
        if (HasRegsGdpr) hash ^= RegsGdpr.GetHashCode();
        hash ^= excludedSensitiveCategory_.GetHashCode();
        hash ^= allowedRestrictedCategory_.GetHashCode();
        hash ^= allowedRestrictedCategoryForDeals_.GetHashCode();
        hash ^= allowedLanguages_.GetHashCode();
        hash ^= excludedProductCategory_.GetHashCode();
        hash ^= excludedCreatives_.GetHashCode();
        if (HasOnlyDealBidsAccepted) hash ^= OnlyDealBidsAccepted.GetHashCode();
        hash ^= matchingAdData_.GetHashCode();
        hash ^= publisherSettingsListId_.GetHashCode();
        if (HasExchangeBidding) hash ^= ExchangeBidding.GetHashCode();
        if (HasOpenBidding) hash ^= OpenBidding.GetHashCode();
        if (HasDfpAdUnitCode) hash ^= DfpAdUnitCode.GetHashCode();
        if (HasSlotVisibility) hash ^= SlotVisibility.GetHashCode();
        if (HasViewability) hash ^= Viewability.GetHashCode();
        if (HasClickThroughRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(ClickThroughRate);
        if (HasVideoCompletionRate) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(VideoCompletionRate);
        if (HasIframingState) hash ^= IframingState.GetHashCode();
        if (HasIframingDepth) hash ^= IframingDepth.GetHashCode();
        hash ^= nativeAdTemplate_.GetHashCode();
        if (HasNativePlacementType) hash ^= NativePlacementType.GetHashCode();
        if (HasMediationStatus) hash ^= MediationStatus.GetHashCode();
        if (HasAutoRefresh) hash ^= AutoRefresh.GetHashCode();
        if (HasStickySettings) hash ^= StickySettings.GetHashCode();
        if (HasNonBrowserSlotSource) hash ^= NonBrowserSlotSource.GetHashCode();
        if (HasRenderer) hash ^= Renderer.GetHashCode();
        if (HasAmpAdRequestType) hash ^= AmpAdRequestType.GetHashCode();
        if (HasIsAmpPage) hash ^= IsAmpPage.GetHashCode();
        if (HasAmpAdRequirementType) hash ^= AmpAdRequirementType.GetHashCode();
        if (HasIsRewarded) hash ^= IsRewarded.GetHashCode();
        hash ^= allowedAdTypes_.GetHashCode();
        if (HasSessionDepth) hash ^= SessionDepth.GetHashCode();
        hash ^= buyerGeneratedRequestData_.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasId) {
          output.WriteRawTag(8);
          output.WriteInt32(Id);
        }
        width_.WriteTo(output, _repeated_width_codec);
        height_.WriteTo(output, _repeated_height_codec);
        excludedAttribute_.WriteTo(output, _repeated_excludedAttribute_codec);
        allowedVendorType_.WriteTo(output, _repeated_allowedVendorType_codec);
        excludedSensitiveCategory_.WriteTo(output, _repeated_excludedSensitiveCategory_codec);
        matchingAdData_.WriteTo(output, _repeated_matchingAdData_codec);
        targetableChannel_.WriteTo(output, _repeated_targetableChannel_codec);
        if (HasSlotVisibility) {
          output.WriteRawTag(96);
          output.WriteEnum((int) SlotVisibility);
        }
        excludedProductCategory_.WriteTo(output, _repeated_excludedProductCategory_codec);
        if (HasAdBlockKey) {
          output.WriteRawTag(112);
          output.WriteUInt64(AdBlockKey);
        }
        publisherSettingsListId_.WriteTo(output, _repeated_publisherSettingsListId_codec);
        allowedRestrictedCategory_.WriteTo(output, _repeated_allowedRestrictedCategory_codec);
        excludedCreatives_.WriteTo(output, _repeated_excludedCreatives_codec);
        if (HasIframingState) {
          output.WriteRawTag(152, 1);
          output.WriteEnum((int) IframingState);
        }
        if (HasIframingDepth) {
          output.WriteRawTag(160, 1);
          output.WriteEnum((int) IframingDepth);
        }
        if (HasViewability) {
          output.WriteRawTag(168, 1);
          output.WriteInt32(Viewability);
        }
        allowedRestrictedCategoryForDeals_.WriteTo(output, _repeated_allowedRestrictedCategoryForDeals_codec);
        if (HasAutoRefresh) {
          output.WriteRawTag(186, 1);
          output.WriteMessage(AutoRefresh);
        }
        if (HasClickThroughRate) {
          output.WriteRawTag(205, 1);
          output.WriteFloat(ClickThroughRate);
        }
        if (HasRenderer) {
          output.WriteRawTag(208, 1);
          output.WriteEnum((int) Renderer);
        }
        allowedLanguages_.WriteTo(output, _repeated_allowedLanguages_codec);
        if (HasExchangeBidding) {
          output.WriteRawTag(226, 1);
          output.WriteMessage(ExchangeBidding);
        }
        if (HasAmpAdRequestType) {
          output.WriteRawTag(232, 1);
          output.WriteEnum((int) AmpAdRequestType);
        }
        if (HasVideoCompletionRate) {
          output.WriteRawTag(245, 1);
          output.WriteFloat(VideoCompletionRate);
        }
        if (HasStickySettings) {
          output.WriteRawTag(250, 1);
          output.WriteMessage(StickySettings);
        }
        if (HasIsRewarded) {
          output.WriteRawTag(128, 2);
          output.WriteBool(IsRewarded);
        }
        if (HasDfpAdUnitCode) {
          output.WriteRawTag(138, 2);
          output.WriteString(DfpAdUnitCode);
        }
        if (HasNonBrowserSlotSource) {
          output.WriteRawTag(144, 2);
          output.WriteEnum((int) NonBrowserSlotSource);
        }
        allowedAdTypes_.WriteTo(output, _repeated_allowedAdTypes_codec);
        if (HasIsAmpPage) {
          output.WriteRawTag(176, 2);
          output.WriteEnum((int) IsAmpPage);
        }
        if (HasAmpAdRequirementType) {
          output.WriteRawTag(184, 2);
          output.WriteEnum((int) AmpAdRequirementType);
        }
        if (HasSessionDepth) {
          output.WriteRawTag(192, 2);
          output.WriteInt32(SessionDepth);
        }
        buyerGeneratedRequestData_.WriteTo(output, _repeated_buyerGeneratedRequestData_codec);
        if (HasConsentedProvidersSettings) {
          output.WriteRawTag(210, 2);
          output.WriteMessage(ConsentedProvidersSettings);
        }
        if (HasRegsGdpr) {
          output.WriteRawTag(216, 2);
          output.WriteBool(RegsGdpr);
        }
        if (HasNativePlacementType) {
          output.WriteRawTag(232, 2);
          output.WriteEnum((int) NativePlacementType);
        }
        if (HasOnlyDealBidsAccepted) {
          output.WriteRawTag(136, 3);
          output.WriteBool(OnlyDealBidsAccepted);
        }
        if (HasFlexibleAdslotSettings) {
          output.WriteRawTag(146, 3);
          output.WriteMessage(FlexibleAdslotSettings);
        }
        nativeAdTemplate_.WriteTo(output, _repeated_nativeAdTemplate_codec);
        if (HasMediationStatus) {
          output.WriteRawTag(160, 3);
          output.WriteEnum((int) MediationStatus);
        }
        if (HasOpenBidding) {
          output.WriteRawTag(170, 3);
          output.WriteMessage(OpenBidding);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasId) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
        }
        if (HasAdBlockKey) {
          size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AdBlockKey);
        }
        size += targetableChannel_.CalculateSize(_repeated_targetableChannel_codec);
        size += width_.CalculateSize(_repeated_width_codec);
        size += height_.CalculateSize(_repeated_height_codec);
        if (HasFlexibleAdslotSettings) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(FlexibleAdslotSettings);
        }
        size += excludedAttribute_.CalculateSize(_repeated_excludedAttribute_codec);
        size += allowedVendorType_.CalculateSize(_repeated_allowedVendorType_codec);
        if (HasConsentedProvidersSettings) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(ConsentedProvidersSettings);
        }
        if (HasRegsGdpr) {
          size += 2 + 1;
        }
        size += excludedSensitiveCategory_.CalculateSize(_repeated_excludedSensitiveCategory_codec);
        size += allowedRestrictedCategory_.CalculateSize(_repeated_allowedRestrictedCategory_codec);
        size += allowedRestrictedCategoryForDeals_.CalculateSize(_repeated_allowedRestrictedCategoryForDeals_codec);
        size += allowedLanguages_.CalculateSize(_repeated_allowedLanguages_codec);
        size += excludedProductCategory_.CalculateSize(_repeated_excludedProductCategory_codec);
        size += excludedCreatives_.CalculateSize(_repeated_excludedCreatives_codec);
        if (HasOnlyDealBidsAccepted) {
          size += 2 + 1;
        }
        size += matchingAdData_.CalculateSize(_repeated_matchingAdData_codec);
        size += publisherSettingsListId_.CalculateSize(_repeated_publisherSettingsListId_codec);
        if (HasExchangeBidding) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(ExchangeBidding);
        }
        if (HasOpenBidding) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(OpenBidding);
        }
        if (HasDfpAdUnitCode) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(DfpAdUnitCode);
        }
        if (HasSlotVisibility) {
          size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) SlotVisibility);
        }
        if (HasViewability) {
          size += 2 + pb::CodedOutputStream.ComputeInt32Size(Viewability);
        }
        if (HasClickThroughRate) {
          size += 2 + 4;
        }
        if (HasVideoCompletionRate) {
          size += 2 + 4;
        }
        if (HasIframingState) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IframingState);
        }
        if (HasIframingDepth) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IframingDepth);
        }
        size += nativeAdTemplate_.CalculateSize(_repeated_nativeAdTemplate_codec);
        if (HasNativePlacementType) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NativePlacementType);
        }
        if (HasMediationStatus) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) MediationStatus);
        }
        if (HasAutoRefresh) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(AutoRefresh);
        }
        if (HasStickySettings) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(StickySettings);
        }
        if (HasNonBrowserSlotSource) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) NonBrowserSlotSource);
        }
        if (HasRenderer) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Renderer);
        }
        if (HasAmpAdRequestType) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AmpAdRequestType);
        }
        if (HasIsAmpPage) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) IsAmpPage);
        }
        if (HasAmpAdRequirementType) {
          size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) AmpAdRequirementType);
        }
        if (HasIsRewarded) {
          size += 2 + 1;
        }
        size += allowedAdTypes_.CalculateSize(_repeated_allowedAdTypes_codec);
        if (HasSessionDepth) {
          size += 2 + pb::CodedOutputStream.ComputeInt32Size(SessionDepth);
        }
        size += buyerGeneratedRequestData_.CalculateSize(_repeated_buyerGeneratedRequestData_codec);
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(AdSlot other) {
        if (other == null) {
          return;
        }
        if (other.HasId) {
          Id = other.Id;
        }
        if (other.HasAdBlockKey) {
          AdBlockKey = other.AdBlockKey;
        }
        targetableChannel_.Add(other.targetableChannel_);
        width_.Add(other.width_);
        height_.Add(other.height_);
        if (other.HasFlexibleAdslotSettings) {
          if (!HasFlexibleAdslotSettings) {
            FlexibleAdslotSettings = new global::BidRequest.Types.AdSlot.Types.FlexibleAdSlotSettings();
          }
          FlexibleAdslotSettings.MergeFrom(other.FlexibleAdslotSettings);
        }
        excludedAttribute_.Add(other.excludedAttribute_);
        allowedVendorType_.Add(other.allowedVendorType_);
        if (other.HasConsentedProvidersSettings) {
          if (!HasConsentedProvidersSettings) {
            ConsentedProvidersSettings = new global::BidRequest.Types.AdSlot.Types.ConsentedProvidersSettings();
          }
          ConsentedProvidersSettings.MergeFrom(other.ConsentedProvidersSettings);
        }
        if (other.HasRegsGdpr) {
          RegsGdpr = other.RegsGdpr;
        }
        excludedSensitiveCategory_.Add(other.excludedSensitiveCategory_);
        allowedRestrictedCategory_.Add(other.allowedRestrictedCategory_);
        allowedRestrictedCategoryForDeals_.Add(other.allowedRestrictedCategoryForDeals_);
        allowedLanguages_.Add(other.allowedLanguages_);
        excludedProductCategory_.Add(other.excludedProductCategory_);
        excludedCreatives_.Add(other.excludedCreatives_);
        if (other.HasOnlyDealBidsAccepted) {
          OnlyDealBidsAccepted = other.OnlyDealBidsAccepted;
        }
        matchingAdData_.Add(other.matchingAdData_);
        publisherSettingsListId_.Add(other.publisherSettingsListId_);
        if (other.HasExchangeBidding) {
          if (!HasExchangeBidding) {
            ExchangeBidding = new global::BidRequest.Types.AdSlot.Types.ExchangeBidding();
          }
          ExchangeBidding.MergeFrom(other.ExchangeBidding);
        }
        if (other.HasOpenBidding) {
          if (!HasOpenBidding) {
            OpenBidding = new global::BidRequest.Types.AdSlot.Types.OpenBidding();
          }
          OpenBidding.MergeFrom(other.OpenBidding);
        }
        if (other.HasDfpAdUnitCode) {
          DfpAdUnitCode = other.DfpAdUnitCode;
        }
        if (other.HasSlotVisibility) {
          SlotVisibility = other.SlotVisibility;
        }
        if (other.HasViewability) {
          Viewability = other.Viewability;
        }
        if (other.HasClickThroughRate) {
          ClickThroughRate = other.ClickThroughRate;
        }
        if (other.HasVideoCompletionRate) {
          VideoCompletionRate = other.VideoCompletionRate;
        }
        if (other.HasIframingState) {
          IframingState = other.IframingState;
        }
        if (other.HasIframingDepth) {
          IframingDepth = other.IframingDepth;
        }
        nativeAdTemplate_.Add(other.nativeAdTemplate_);
        if (other.HasNativePlacementType) {
          NativePlacementType = other.NativePlacementType;
        }
        if (other.HasMediationStatus) {
          MediationStatus = other.MediationStatus;
        }
        if (other.HasAutoRefresh) {
          if (!HasAutoRefresh) {
            AutoRefresh = new global::BidRequest.Types.AdSlot.Types.AutoRefresh();
          }
          AutoRefresh.MergeFrom(other.AutoRefresh);
        }
        if (other.HasStickySettings) {
          if (!HasStickySettings) {
            StickySettings = new global::BidRequest.Types.AdSlot.Types.StickySettings();
          }
          StickySettings.MergeFrom(other.StickySettings);
        }
        if (other.HasNonBrowserSlotSource) {
          NonBrowserSlotSource = other.NonBrowserSlotSource;
        }
        if (other.HasRenderer) {
          Renderer = other.Renderer;
        }
        if (other.HasAmpAdRequestType) {
          AmpAdRequestType = other.AmpAdRequestType;
        }
        if (other.HasIsAmpPage) {
          IsAmpPage = other.IsAmpPage;
        }
        if (other.HasAmpAdRequirementType) {
          AmpAdRequirementType = other.AmpAdRequirementType;
        }
        if (other.HasIsRewarded) {
          IsRewarded = other.IsRewarded;
        }
        allowedAdTypes_.Add(other.allowedAdTypes_);
        if (other.HasSessionDepth) {
          SessionDepth = other.SessionDepth;
        }
        buyerGeneratedRequestData_.Add(other.buyerGeneratedRequestData_);
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 8: {
              Id = input.ReadInt32();
              break;
            }
            case 18:
            case 16: {
              width_.AddEntriesFrom(input, _repeated_width_codec);
              break;
            }
            case 26:
            case 24: {
              height_.AddEntriesFrom(input, _repeated_height_codec);
              break;
            }
            case 34:
            case 32: {
              excludedAttribute_.AddEntriesFrom(input, _repeated_excludedAttribute_codec);
              break;
            }
            case 50:
            case 48: {
              allowedVendorType_.AddEntriesFrom(input, _repeated_allowedVendorType_codec);
              break;
            }
            case 58:
            case 56: {
              excludedSensitiveCategory_.AddEntriesFrom(input, _repeated_excludedSensitiveCategory_codec);
              break;
            }
            case 74: {
              matchingAdData_.AddEntriesFrom(input, _repeated_matchingAdData_codec);
              break;
            }
            case 82: {
              targetableChannel_.AddEntriesFrom(input, _repeated_targetableChannel_codec);
              break;
            }
            case 96: {
              SlotVisibility = (global::BidRequest.Types.AdSlot.Types.SlotVisibility) input.ReadEnum();
              break;
            }
            case 106:
            case 104: {
              excludedProductCategory_.AddEntriesFrom(input, _repeated_excludedProductCategory_codec);
              break;
            }
            case 112: {
              AdBlockKey = input.ReadUInt64();
              break;
            }
            case 122:
            case 121: {
              publisherSettingsListId_.AddEntriesFrom(input, _repeated_publisherSettingsListId_codec);
              break;
            }
            case 130:
            case 128: {
              allowedRestrictedCategory_.AddEntriesFrom(input, _repeated_allowedRestrictedCategory_codec);
              break;
            }
            case 146: {
              excludedCreatives_.AddEntriesFrom(input, _repeated_excludedCreatives_codec);
              break;
            }
            case 152: {
              IframingState = (global::BidRequest.Types.AdSlot.Types.IFramingState) input.ReadEnum();
              break;
            }
            case 160: {
              IframingDepth = (global::BidRequest.Types.AdSlot.Types.IFramingDepth) input.ReadEnum();
              break;
            }
            case 168: {
              Viewability = input.ReadInt32();
              break;
            }
            case 178:
            case 176: {
              allowedRestrictedCategoryForDeals_.AddEntriesFrom(input, _repeated_allowedRestrictedCategoryForDeals_codec);
              break;
            }
            case 186: {
              if (!HasAutoRefresh) {
                AutoRefresh = new global::BidRequest.Types.AdSlot.Types.AutoRefresh();
              }
              input.ReadMessage(AutoRefresh);
              break;
            }
            case 205: {
              ClickThroughRate = input.ReadFloat();
              break;
            }
            case 208: {
              Renderer = (global::BidRequest.Types.AdSlot.Types.Renderer) input.ReadEnum();
              break;
            }
            case 218: {
              allowedLanguages_.AddEntriesFrom(input, _repeated_allowedLanguages_codec);
              break;
            }
            case 226: {
              if (!HasExchangeBidding) {
                ExchangeBidding = new global::BidRequest.Types.AdSlot.Types.ExchangeBidding();
              }
              input.ReadMessage(ExchangeBidding);
              break;
            }
            case 232: {
              AmpAdRequestType = (global::BidRequest.Types.AdSlot.Types.AmpAdRequestType) input.ReadEnum();
              break;
            }
            case 245: {
              VideoCompletionRate = input.ReadFloat();
              break;
            }
            case 250: {
              if (!HasStickySettings) {
                StickySettings = new global::BidRequest.Types.AdSlot.Types.StickySettings();
              }
              input.ReadMessage(StickySettings);
              break;
            }
            case 256: {
              IsRewarded = input.ReadBool();
              break;
            }
            case 266: {
              DfpAdUnitCode = input.ReadString();
              break;
            }
            case 272: {
              NonBrowserSlotSource = (global::BidRequest.Types.AdSlot.Types.NonBrowserSource) input.ReadEnum();
              break;
            }
            case 290:
            case 288: {
              allowedAdTypes_.AddEntriesFrom(input, _repeated_allowedAdTypes_codec);
              break;
            }
            case 304: {
              IsAmpPage = (global::BidRequest.Types.AdSlot.Types.AmpPage) input.ReadEnum();
              break;
            }
            case 312: {
              AmpAdRequirementType = (global::BidRequest.Types.AdSlot.Types.AmpAdRequirementType) input.ReadEnum();
              break;
            }
            case 320: {
              SessionDepth = input.ReadInt32();
              break;
            }
            case 330: {
              buyerGeneratedRequestData_.AddEntriesFrom(input, _repeated_buyerGeneratedRequestData_codec);
              break;
            }
            case 338: {
              if (!HasConsentedProvidersSettings) {
                ConsentedProvidersSettings = new global::BidRequest.Types.AdSlot.Types.ConsentedProvidersSettings();
              }
              input.ReadMessage(ConsentedProvidersSettings);
              break;
            }
            case 344: {
              RegsGdpr = input.ReadBool();
              break;
            }
            case 360: {
              NativePlacementType = (global::BidRequest.Types.AdSlot.Types.NativePlacementType) input.ReadEnum();
              break;
            }
            case 392: {
              OnlyDealBidsAccepted = input.ReadBool();
              break;
            }
            case 402: {
              if (!HasFlexibleAdslotSettings) {
                FlexibleAdslotSettings = new global::BidRequest.Types.AdSlot.Types.FlexibleAdSlotSettings();
              }
              input.ReadMessage(FlexibleAdslotSettings);
              break;
            }
            case 410: {
              nativeAdTemplate_.AddEntriesFrom(input, _repeated_nativeAdTemplate_codec);
              break;
            }
            case 416: {
              MediationStatus = (global::BidRequest.Types.AdSlot.Types.MediationStatus) input.ReadEnum();
              break;
            }
            case 426: {
              if (!HasOpenBidding) {
                OpenBidding = new global::BidRequest.Types.AdSlot.Types.OpenBidding();
              }
              input.ReadMessage(OpenBidding);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the AdSlot message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        /// <summary>
        /// Visibility information for the slot.
        /// </summary>
        public enum SlotVisibility {
          [pbr::OriginalName("NO_DETECTION")] NoDetection = 0,
          [pbr::OriginalName("ABOVE_THE_FOLD")] AboveTheFold = 1,
          [pbr::OriginalName("BELOW_THE_FOLD")] BelowTheFold = 2,
        }

        /// <summary>
        /// iFraming state of the ad slot on the webpage where it is present.
        /// </summary>
        public enum IFramingState {
          [pbr::OriginalName("UNKNOWN_IFRAME_STATE")] UnknownIframeState = 0,
          [pbr::OriginalName("NO_IFRAME")] NoIframe = 1,
          [pbr::OriginalName("SAME_DOMAIN_IFRAME")] SameDomainIframe = 2,
          [pbr::OriginalName("CROSS_DOMAIN_IFRAME")] CrossDomainIframe = 3,
        }

        /// <summary>
        /// iFrame depth of the ad slot on the webpage where it is present.
        /// Currently only set for video ad requests.
        /// </summary>
        public enum IFramingDepth {
          [pbr::OriginalName("UNKNOWN_IFRAME_DEPTH")] UnknownIframeDepth = 0,
          [pbr::OriginalName("NOT_IN_IFRAME")] NotInIframe = 1,
          [pbr::OriginalName("ONE_IFRAME")] OneIframe = 2,
          [pbr::OriginalName("MULTIPLE_IFRAME")] MultipleIframe = 3,
        }

        /// <summary>
        /// NativePlacementType describes placement of native ad slot with respect to
        /// surrounding context.
        /// </summary>
        public enum NativePlacementType {
          [pbr::OriginalName("PLACEMENT_UNKNOWN")] PlacementUnknown = 0,
          /// <summary>
          /// In the feed of content - for example as an item inside the organic
          /// feed/grid/listing/carousel.
          /// </summary>
          [pbr::OriginalName("PLACEMENT_IN_FEED")] PlacementInFeed = 1,
          /// <summary>
          /// In the atomic unit of the content - i.e., in the article page or single
          /// image page.
          /// </summary>
          [pbr::OriginalName("PLACEMENT_ATOMIC_UNIT")] PlacementAtomicUnit = 2,
          /// <summary>
          /// Outside the core content - for example in the ads section on the right
          /// rail, as a banner-style placement near the content, etc.
          /// </summary>
          [pbr::OriginalName("PLACEMENT_OUTSIDE")] PlacementOutside = 3,
          /// <summary>
          /// Recommendation widget, most commonly presented below the article
          /// content.
          /// </summary>
          [pbr::OriginalName("PLACEMENT_RECOMMENDATION")] PlacementRecommendation = 4,
        }

        /// <summary>
        /// Whether the ad request has been determined to come directly from the
        /// publisher.
        /// </summary>
        public enum MediationStatus {
          [pbr::OriginalName("UNKNOWN")] Unknown = 0,
          [pbr::OriginalName("DIRECT_REQUEST")] DirectRequest = 1,
        }

        /// <summary>
        /// Sources for non-browser inventory.
        /// </summary>
        public enum NonBrowserSource {
          [pbr::OriginalName("UNDECLARED_SOURCE")] UndeclaredSource = 0,
          [pbr::OriginalName("DESKTOP_APP")] DesktopApp = 1,
        }

        /// <summary>
        /// Defines who controls the environment that made the ad request and will
        /// render the ad. On platforms where code written by Google will handle
        /// the ad this field is set to GOOGLE. When this field is PUBLISHER the
        /// publisher has placed their own code on the device to handle playback of
        /// the ad. There is no technical difference in how these request are
        /// handled. You may use this field to differentiate between different
        /// environments for non-technical reasons. This field is only set for
        /// requests that allow VAST video ads.
        /// </summary>
        public enum Renderer {
          [pbr::OriginalName("UNKNOWN_RENDERER")] UnknownRenderer = 0,
          [pbr::OriginalName("GOOGLE")] Google = 1,
          [pbr::OriginalName("PUBLISHER")] Publisher = 2,
        }

        /// <summary>
        /// Whether this request is for an Accelerated Mobile Page (AMP). AMP HTML
        /// pages load faster, by restricting parts of HTML, CSS and Javascript. For
        /// more information on how AMP ads render, refer to the AMP ads README:
        /// https://github.com/ampproject/amphtml/blob/master/ads/README.md
        /// </summary>
        public enum AmpAdRequestType {
          /// <summary>
          /// AMP status unknown. Request may or may not be from an AMP page.
          /// </summary>
          [pbr::OriginalName("UNKNOWN_AMP")] UnknownAmp = 0,
          /// <summary>
          /// Not an AMP page. Could be regular HTML, VAST video, etc.
          /// </summary>
          [pbr::OriginalName("NON_AMP_PAGE")] NonAmpPage = 1,
          /// <summary>
          /// Late-loading request from an AMP HTML page. Ad will render with a
          /// slight delay so it will not negatively impact page render performance.
          /// </summary>
          [pbr::OriginalName("AMP_PAGE_LATE_REQUEST")] AmpPageLateRequest = 2,
        }

        /// <summary>
        /// Whether this is an AMP page or not.
        /// </summary>
        public enum AmpPage {
          /// <summary>
          /// AMP page status unknown.
          /// </summary>
          [pbr::OriginalName("UNKNOWN_AMP_PAGE")] UnknownAmpPage = 0,
          /// <summary>
          /// This is not an AMP page.
          /// </summary>
          [pbr::OriginalName("DIALECT_HTML")] DialectHtml = 1,
          /// <summary>
          /// This is an Amp page.
          /// </summary>
          [pbr::OriginalName("DIALECT_HTML_AMP")] DialectHtmlAmp = 2,
        }

        /// <summary>
        /// Possible requirement types for AMP ads.
        /// </summary>
        public enum AmpAdRequirementType {
          /// <summary>
          /// AMP ad requirements unknown.
          /// </summary>
          [pbr::OriginalName("UNKNOWN_AMP_AD_REQUIREMENT_TYPE")] UnknownAmpAdRequirementType = 0,
          /// <summary>
          /// AMP ads are not allowed.
          /// </summary>
          [pbr::OriginalName("AMP_AD_NOT_ALLOWED")] AmpAdNotAllowed = 1,
          /// <summary>
          /// Either AMP ads or non-AMP ads are allowed;
          /// AMP ads are not early rendered.
          /// </summary>
          [pbr::OriginalName("AMP_AD_ALLOWED_AND_NOT_EARLY_RENDERED")] AmpAdAllowedAndNotEarlyRendered = 2,
          /// <summary>
          /// Either AMP ads or non-AMP ads are allowed;
          /// AMP ads are early rendered.
          /// </summary>
          [pbr::OriginalName("AMP_AD_ALLOWED_AND_EARLY_RENDERED")] AmpAdAllowedAndEarlyRendered = 3,
          /// <summary>
          /// AMP ads are required.
          /// Ads that are non-AMP may be rejected by the publisher.
          /// </summary>
          [pbr::OriginalName("AMP_AD_REQUIRED")] AmpAdRequired = 4,
        }

        /// <summary>
        /// Possible ad types that are allowed in the bid response. allowed_ad_types
        /// always contains one or more values. Interstitial slots may also support
        /// banner ads. An ad slot with ALLOWED_AD_TYPE_NATIVE may or may not support
        /// native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
        /// Likewise, an ad slot without ALLOWED_AD_TYPE_NATIVE does not support
        /// native video, regardless of whether ALLOWED_AD_TYPE_VIDEO is set.
        /// </summary>
        public enum AllowedAdType {
          [pbr::OriginalName("UNKNOWN_ALLOWED_AD_TYPE")] UnknownAllowedAdType = -1,
          [pbr::OriginalName("ALLOWED_AD_TYPE_BANNER")] Banner = 0,
          [pbr::OriginalName("ALLOWED_AD_TYPE_NATIVE")] Native = 1,
          [pbr::OriginalName("ALLOWED_AD_TYPE_VIDEO")] Video = 2,
          [pbr::OriginalName("ALLOWED_AD_TYPE_AUDIO")] Audio = 3,
        }

        public sealed partial class FlexibleAdSlotSettings : pb::IMessage<FlexibleAdSlotSettings> {
          private static readonly pb::MessageParser<FlexibleAdSlotSettings> _parser = new pb::MessageParser<FlexibleAdSlotSettings>(() => new FlexibleAdSlotSettings());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<FlexibleAdSlotSettings> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public FlexibleAdSlotSettings() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public FlexibleAdSlotSettings(FlexibleAdSlotSettings other) : this() {
            _hasBits0 = other._hasBits0;
            maxWidth_ = other.maxWidth_;
            maxHeight_ = other.maxHeight_;
            minWidth_ = other.minWidth_;
            minHeight_ = other.minHeight_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public FlexibleAdSlotSettings Clone() {
            return new FlexibleAdSlotSettings(this);
          }

          /// <summary>Field number for the "max_width" field.</summary>
          public const int MaxWidthFieldNumber = 1;
          private readonly static int MaxWidthDefaultValue = 0;

          private int maxWidth_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int MaxWidth {
            get { if ((_hasBits0 & 1) != 0) { return maxWidth_; } else { return MaxWidthDefaultValue; } }
            set {
              _hasBits0 |= 1;
              maxWidth_ = value;
            }
          }
          /// <summary>Gets whether the "max_width" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMaxWidth {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "max_width" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMaxWidth() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "max_height" field.</summary>
          public const int MaxHeightFieldNumber = 2;
          private readonly static int MaxHeightDefaultValue = 0;

          private int maxHeight_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int MaxHeight {
            get { if ((_hasBits0 & 2) != 0) { return maxHeight_; } else { return MaxHeightDefaultValue; } }
            set {
              _hasBits0 |= 2;
              maxHeight_ = value;
            }
          }
          /// <summary>Gets whether the "max_height" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMaxHeight {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "max_height" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMaxHeight() {
            _hasBits0 &= ~2;
          }

          /// <summary>Field number for the "min_width" field.</summary>
          public const int MinWidthFieldNumber = 3;
          private readonly static int MinWidthDefaultValue = 0;

          private int minWidth_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int MinWidth {
            get { if ((_hasBits0 & 4) != 0) { return minWidth_; } else { return MinWidthDefaultValue; } }
            set {
              _hasBits0 |= 4;
              minWidth_ = value;
            }
          }
          /// <summary>Gets whether the "min_width" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMinWidth {
            get { return (_hasBits0 & 4) != 0; }
          }
          /// <summary>Clears the value of the "min_width" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMinWidth() {
            _hasBits0 &= ~4;
          }

          /// <summary>Field number for the "min_height" field.</summary>
          public const int MinHeightFieldNumber = 4;
          private readonly static int MinHeightDefaultValue = 0;

          private int minHeight_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int MinHeight {
            get { if ((_hasBits0 & 8) != 0) { return minHeight_; } else { return MinHeightDefaultValue; } }
            set {
              _hasBits0 |= 8;
              minHeight_ = value;
            }
          }
          /// <summary>Gets whether the "min_height" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMinHeight {
            get { return (_hasBits0 & 8) != 0; }
          }
          /// <summary>Clears the value of the "min_height" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMinHeight() {
            _hasBits0 &= ~8;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as FlexibleAdSlotSettings);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(FlexibleAdSlotSettings other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (MaxWidth != other.MaxWidth) return false;
            if (MaxHeight != other.MaxHeight) return false;
            if (MinWidth != other.MinWidth) return false;
            if (MinHeight != other.MinHeight) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasMaxWidth) hash ^= MaxWidth.GetHashCode();
            if (HasMaxHeight) hash ^= MaxHeight.GetHashCode();
            if (HasMinWidth) hash ^= MinWidth.GetHashCode();
            if (HasMinHeight) hash ^= MinHeight.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasMaxWidth) {
              output.WriteRawTag(8);
              output.WriteInt32(MaxWidth);
            }
            if (HasMaxHeight) {
              output.WriteRawTag(16);
              output.WriteInt32(MaxHeight);
            }
            if (HasMinWidth) {
              output.WriteRawTag(24);
              output.WriteInt32(MinWidth);
            }
            if (HasMinHeight) {
              output.WriteRawTag(32);
              output.WriteInt32(MinHeight);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasMaxWidth) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxWidth);
            }
            if (HasMaxHeight) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxHeight);
            }
            if (HasMinWidth) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinWidth);
            }
            if (HasMinHeight) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinHeight);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(FlexibleAdSlotSettings other) {
            if (other == null) {
              return;
            }
            if (other.HasMaxWidth) {
              MaxWidth = other.MaxWidth;
            }
            if (other.HasMaxHeight) {
              MaxHeight = other.MaxHeight;
            }
            if (other.HasMinWidth) {
              MinWidth = other.MinWidth;
            }
            if (other.HasMinHeight) {
              MinHeight = other.MinHeight;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  MaxWidth = input.ReadInt32();
                  break;
                }
                case 16: {
                  MaxHeight = input.ReadInt32();
                  break;
                }
                case 24: {
                  MinWidth = input.ReadInt32();
                  break;
                }
                case 32: {
                  MinHeight = input.ReadInt32();
                  break;
                }
              }
            }
          }

        }

        public sealed partial class ConsentedProvidersSettings : pb::IMessage<ConsentedProvidersSettings> {
          private static readonly pb::MessageParser<ConsentedProvidersSettings> _parser = new pb::MessageParser<ConsentedProvidersSettings>(() => new ConsentedProvidersSettings());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ConsentedProvidersSettings> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[1]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ConsentedProvidersSettings() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ConsentedProvidersSettings(ConsentedProvidersSettings other) : this() {
            consentedProviders_ = other.consentedProviders_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ConsentedProvidersSettings Clone() {
            return new ConsentedProvidersSettings(this);
          }

          /// <summary>Field number for the "consented_providers" field.</summary>
          public const int ConsentedProvidersFieldNumber = 2;
          private static readonly pb::FieldCodec<long> _repeated_consentedProviders_codec
              = pb::FieldCodec.ForInt64(18);
          private readonly pbc::RepeatedField<long> consentedProviders_ = new pbc::RepeatedField<long>();
          /// <summary>
          /// Set of IDs corresponding to providers for whom the publisher has told
          /// Google that its EEA users have consented to the use of their personal
          /// data for ads personalization. A mapping of provider ID to provider name
          /// is posted at providers.csv.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<long> ConsentedProviders {
            get { return consentedProviders_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ConsentedProvidersSettings);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ConsentedProvidersSettings other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if(!consentedProviders_.Equals(other.consentedProviders_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            hash ^= consentedProviders_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            consentedProviders_.WriteTo(output, _repeated_consentedProviders_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            size += consentedProviders_.CalculateSize(_repeated_consentedProviders_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ConsentedProvidersSettings other) {
            if (other == null) {
              return;
            }
            consentedProviders_.Add(other.consentedProviders_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 18:
                case 16: {
                  consentedProviders_.AddEntriesFrom(input, _repeated_consentedProviders_codec);
                  break;
                }
              }
            }
          }

        }

        /// <summary>
        /// A creative that is disallowed to bid on this impression due to Ad
        /// Exchange policies or creative disapproval, excluded creative attributes,
        /// excluded product or sensitive categories, allowed vendor types,
        /// restricted categories or languages applicable to the bid request.
        /// </summary>
        public sealed partial class ExcludedCreative : pb::IMessage<ExcludedCreative> {
          private static readonly pb::MessageParser<ExcludedCreative> _parser = new pb::MessageParser<ExcludedCreative>(() => new ExcludedCreative());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ExcludedCreative> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[2]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ExcludedCreative() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ExcludedCreative(ExcludedCreative other) : this() {
            buyerCreativeId_ = other.buyerCreativeId_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ExcludedCreative Clone() {
            return new ExcludedCreative(this);
          }

          /// <summary>Field number for the "buyer_creative_id" field.</summary>
          public const int BuyerCreativeIdFieldNumber = 1;
          private readonly static string BuyerCreativeIdDefaultValue = "";

          private string buyerCreativeId_;
          /// <summary>
          /// Buyer creative ID of the disallowed creative.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string BuyerCreativeId {
            get { return buyerCreativeId_ ?? BuyerCreativeIdDefaultValue; }
            set {
              buyerCreativeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "buyer_creative_id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasBuyerCreativeId {
            get { return buyerCreativeId_ != null; }
          }
          /// <summary>Clears the value of the "buyer_creative_id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearBuyerCreativeId() {
            buyerCreativeId_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ExcludedCreative);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ExcludedCreative other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (BuyerCreativeId != other.BuyerCreativeId) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasBuyerCreativeId) hash ^= BuyerCreativeId.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasBuyerCreativeId) {
              output.WriteRawTag(10);
              output.WriteString(BuyerCreativeId);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasBuyerCreativeId) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyerCreativeId);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ExcludedCreative other) {
            if (other == null) {
              return;
            }
            if (other.HasBuyerCreativeId) {
              BuyerCreativeId = other.BuyerCreativeId;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  BuyerCreativeId = input.ReadString();
                  break;
                }
              }
            }
          }

        }

        /// <summary>
        /// Information about the pre-targeting configs that matched.
        /// </summary>
        public sealed partial class MatchingAdData : pb::IMessage<MatchingAdData> {
          private static readonly pb::MessageParser<MatchingAdData> _parser = new pb::MessageParser<MatchingAdData>(() => new MatchingAdData());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<MatchingAdData> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[3]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public MatchingAdData() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public MatchingAdData(MatchingAdData other) : this() {
            _hasBits0 = other._hasBits0;
            billingId_ = other.billingId_.Clone();
            minimumCpmMicros_ = other.minimumCpmMicros_;
            dEPRECATEDPricingRule_ = other.dEPRECATEDPricingRule_.Clone();
            directDeal_ = other.directDeal_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public MatchingAdData Clone() {
            return new MatchingAdData(this);
          }

          /// <summary>Field number for the "billing_id" field.</summary>
          public const int BillingIdFieldNumber = 2;
          private static readonly pb::FieldCodec<long> _repeated_billingId_codec
              = pb::FieldCodec.ForInt64(16);
          private readonly pbc::RepeatedField<long> billingId_ = new pbc::RepeatedField<long>();
          /// <summary>
          /// The billing ids corresponding to the pretargeting configs that matched.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<long> BillingId {
            get { return billingId_; }
          }

          /// <summary>Field number for the "minimum_cpm_micros" field.</summary>
          public const int MinimumCpmMicrosFieldNumber = 5;
          private readonly static long MinimumCpmMicrosDefaultValue = 0L;

          private long minimumCpmMicros_;
          /// <summary>
          /// The minimum CPM value that you can bid to not be filtered before the
          /// auction. This may be a global minimum, or it may be a minimum set by
          /// the publisher. The value is in micros of the bidding currency.
          /// The bidding currency is determined by:
          /// 1. The bidder-level currency, if configured.
          /// 2. Otherwise, the currency of the buyer accounts indicated by the
          /// billing IDs in the billing_id field.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long MinimumCpmMicros {
            get { if ((_hasBits0 & 1) != 0) { return minimumCpmMicros_; } else { return MinimumCpmMicrosDefaultValue; } }
            set {
              _hasBits0 |= 1;
              minimumCpmMicros_ = value;
            }
          }
          /// <summary>Gets whether the "minimum_cpm_micros" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMinimumCpmMicros {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "minimum_cpm_micros" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMinimumCpmMicros() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "DEPRECATED_pricing_rule" field.</summary>
          public const int DEPRECATEDPricingRuleFieldNumber = 7;
          private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule> _repeated_dEPRECATEDPricingRule_codec
              = pb::FieldCodec.ForMessage(58, global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule.Parser);
          private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule> dEPRECATEDPricingRule_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule>();
          /// <summary>
          /// This field is deprecated and will no longer be populated.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.BuyerPricingRule> DEPRECATEDPricingRule {
            get { return dEPRECATEDPricingRule_; }
          }

          /// <summary>Field number for the "direct_deal" field.</summary>
          public const int DirectDealFieldNumber = 6;
          private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal> _repeated_directDeal_codec
              = pb::FieldCodec.ForMessage(50, global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Parser);
          private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal> directDeal_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal> DirectDeal {
            get { return directDeal_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as MatchingAdData);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(MatchingAdData other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if(!billingId_.Equals(other.billingId_)) return false;
            if (MinimumCpmMicros != other.MinimumCpmMicros) return false;
            if(!dEPRECATEDPricingRule_.Equals(other.dEPRECATEDPricingRule_)) return false;
            if(!directDeal_.Equals(other.directDeal_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            hash ^= billingId_.GetHashCode();
            if (HasMinimumCpmMicros) hash ^= MinimumCpmMicros.GetHashCode();
            hash ^= dEPRECATEDPricingRule_.GetHashCode();
            hash ^= directDeal_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            billingId_.WriteTo(output, _repeated_billingId_codec);
            if (HasMinimumCpmMicros) {
              output.WriteRawTag(40);
              output.WriteInt64(MinimumCpmMicros);
            }
            directDeal_.WriteTo(output, _repeated_directDeal_codec);
            dEPRECATEDPricingRule_.WriteTo(output, _repeated_dEPRECATEDPricingRule_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            size += billingId_.CalculateSize(_repeated_billingId_codec);
            if (HasMinimumCpmMicros) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinimumCpmMicros);
            }
            size += dEPRECATEDPricingRule_.CalculateSize(_repeated_dEPRECATEDPricingRule_codec);
            size += directDeal_.CalculateSize(_repeated_directDeal_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(MatchingAdData other) {
            if (other == null) {
              return;
            }
            billingId_.Add(other.billingId_);
            if (other.HasMinimumCpmMicros) {
              MinimumCpmMicros = other.MinimumCpmMicros;
            }
            dEPRECATEDPricingRule_.Add(other.dEPRECATEDPricingRule_);
            directDeal_.Add(other.directDeal_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 18:
                case 16: {
                  billingId_.AddEntriesFrom(input, _repeated_billingId_codec);
                  break;
                }
                case 40: {
                  MinimumCpmMicros = input.ReadInt64();
                  break;
                }
                case 50: {
                  directDeal_.AddEntriesFrom(input, _repeated_directDeal_codec);
                  break;
                }
                case 58: {
                  dEPRECATEDPricingRule_.AddEntriesFrom(input, _repeated_dEPRECATEDPricingRule_codec);
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the MatchingAdData message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// This message is deprecated.
            /// </summary>
            public sealed partial class BuyerPricingRule : pb::IMessage<BuyerPricingRule> {
              private static readonly pb::MessageParser<BuyerPricingRule> _parser = new pb::MessageParser<BuyerPricingRule>(() => new BuyerPricingRule());
              private pb::UnknownFieldSet _unknownFields;
              private int _hasBits0;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pb::MessageParser<BuyerPricingRule> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::BidRequest.Types.AdSlot.Types.MatchingAdData.Descriptor.NestedTypes[0]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public BuyerPricingRule() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public BuyerPricingRule(BuyerPricingRule other) : this() {
                _hasBits0 = other._hasBits0;
                includedAdvertisers_ = other.includedAdvertisers_.Clone();
                excludedAdvertisers_ = other.excludedAdvertisers_.Clone();
                includedAgencies_ = other.includedAgencies_.Clone();
                excludedAgencies_ = other.excludedAgencies_.Clone();
                blocked_ = other.blocked_;
                minimumCpmMicros_ = other.minimumCpmMicros_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public BuyerPricingRule Clone() {
                return new BuyerPricingRule(this);
              }

              /// <summary>Field number for the "included_advertisers" field.</summary>
              public const int IncludedAdvertisersFieldNumber = 1;
              private static readonly pb::FieldCodec<long> _repeated_includedAdvertisers_codec
                  = pb::FieldCodec.ForInt64(8);
              private readonly pbc::RepeatedField<long> includedAdvertisers_ = new pbc::RepeatedField<long>();
              /// <summary>
              /// Only one of the included_advertisers and excluded_advertisers fields
              /// can be set in a rule. See advertisers.txt file in the technical
              /// documentation for a list of ids.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public pbc::RepeatedField<long> IncludedAdvertisers {
                get { return includedAdvertisers_; }
              }

              /// <summary>Field number for the "excluded_advertisers" field.</summary>
              public const int ExcludedAdvertisersFieldNumber = 2;
              private static readonly pb::FieldCodec<long> _repeated_excludedAdvertisers_codec
                  = pb::FieldCodec.ForInt64(16);
              private readonly pbc::RepeatedField<long> excludedAdvertisers_ = new pbc::RepeatedField<long>();
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public pbc::RepeatedField<long> ExcludedAdvertisers {
                get { return excludedAdvertisers_; }
              }

              /// <summary>Field number for the "included_agencies" field.</summary>
              public const int IncludedAgenciesFieldNumber = 3;
              private static readonly pb::FieldCodec<long> _repeated_includedAgencies_codec
                  = pb::FieldCodec.ForInt64(24);
              private readonly pbc::RepeatedField<long> includedAgencies_ = new pbc::RepeatedField<long>();
              /// <summary>
              /// Only one of the included_agencies and excluded_agencies fields can be
              /// set in a rule. See agencies.txt file in the technical documentation
              /// for a list of ids.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public pbc::RepeatedField<long> IncludedAgencies {
                get { return includedAgencies_; }
              }

              /// <summary>Field number for the "excluded_agencies" field.</summary>
              public const int ExcludedAgenciesFieldNumber = 4;
              private static readonly pb::FieldCodec<long> _repeated_excludedAgencies_codec
                  = pb::FieldCodec.ForInt64(32);
              private readonly pbc::RepeatedField<long> excludedAgencies_ = new pbc::RepeatedField<long>();
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public pbc::RepeatedField<long> ExcludedAgencies {
                get { return excludedAgencies_; }
              }

              /// <summary>Field number for the "blocked" field.</summary>
              public const int BlockedFieldNumber = 5;
              private readonly static bool BlockedDefaultValue = false;

              private bool blocked_;
              /// <summary>
              /// Only one of the blocked and minimum_cpm_micros can be set in a rule.
              /// If set to true, indicates that the specified advertisers/agencies are
              /// blocked from bidding.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Blocked {
                get { if ((_hasBits0 & 1) != 0) { return blocked_; } else { return BlockedDefaultValue; } }
                set {
                  _hasBits0 |= 1;
                  blocked_ = value;
                }
              }
              /// <summary>Gets whether the "blocked" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasBlocked {
                get { return (_hasBits0 & 1) != 0; }
              }
              /// <summary>Clears the value of the "blocked" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearBlocked() {
                _hasBits0 &= ~1;
              }

              /// <summary>Field number for the "minimum_cpm_micros" field.</summary>
              public const int MinimumCpmMicrosFieldNumber = 6;
              private readonly static long MinimumCpmMicrosDefaultValue = 0L;

              private long minimumCpmMicros_;
              /// <summary>
              /// Minimum CPM value that you can bid to not be filtered before the
              /// auction. The value is in micros of the bidder account currency.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public long MinimumCpmMicros {
                get { if ((_hasBits0 & 2) != 0) { return minimumCpmMicros_; } else { return MinimumCpmMicrosDefaultValue; } }
                set {
                  _hasBits0 |= 2;
                  minimumCpmMicros_ = value;
                }
              }
              /// <summary>Gets whether the "minimum_cpm_micros" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMinimumCpmMicros {
                get { return (_hasBits0 & 2) != 0; }
              }
              /// <summary>Clears the value of the "minimum_cpm_micros" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMinimumCpmMicros() {
                _hasBits0 &= ~2;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override bool Equals(object other) {
                return Equals(other as BuyerPricingRule);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Equals(BuyerPricingRule other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if(!includedAdvertisers_.Equals(other.includedAdvertisers_)) return false;
                if(!excludedAdvertisers_.Equals(other.excludedAdvertisers_)) return false;
                if(!includedAgencies_.Equals(other.includedAgencies_)) return false;
                if(!excludedAgencies_.Equals(other.excludedAgencies_)) return false;
                if (Blocked != other.Blocked) return false;
                if (MinimumCpmMicros != other.MinimumCpmMicros) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override int GetHashCode() {
                int hash = 1;
                hash ^= includedAdvertisers_.GetHashCode();
                hash ^= excludedAdvertisers_.GetHashCode();
                hash ^= includedAgencies_.GetHashCode();
                hash ^= excludedAgencies_.GetHashCode();
                if (HasBlocked) hash ^= Blocked.GetHashCode();
                if (HasMinimumCpmMicros) hash ^= MinimumCpmMicros.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void WriteTo(pb::CodedOutputStream output) {
                includedAdvertisers_.WriteTo(output, _repeated_includedAdvertisers_codec);
                excludedAdvertisers_.WriteTo(output, _repeated_excludedAdvertisers_codec);
                includedAgencies_.WriteTo(output, _repeated_includedAgencies_codec);
                excludedAgencies_.WriteTo(output, _repeated_excludedAgencies_codec);
                if (HasBlocked) {
                  output.WriteRawTag(40);
                  output.WriteBool(Blocked);
                }
                if (HasMinimumCpmMicros) {
                  output.WriteRawTag(48);
                  output.WriteInt64(MinimumCpmMicros);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int CalculateSize() {
                int size = 0;
                size += includedAdvertisers_.CalculateSize(_repeated_includedAdvertisers_codec);
                size += excludedAdvertisers_.CalculateSize(_repeated_excludedAdvertisers_codec);
                size += includedAgencies_.CalculateSize(_repeated_includedAgencies_codec);
                size += excludedAgencies_.CalculateSize(_repeated_excludedAgencies_codec);
                if (HasBlocked) {
                  size += 1 + 1;
                }
                if (HasMinimumCpmMicros) {
                  size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinimumCpmMicros);
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(BuyerPricingRule other) {
                if (other == null) {
                  return;
                }
                includedAdvertisers_.Add(other.includedAdvertisers_);
                excludedAdvertisers_.Add(other.excludedAdvertisers_);
                includedAgencies_.Add(other.includedAgencies_);
                excludedAgencies_.Add(other.excludedAgencies_);
                if (other.HasBlocked) {
                  Blocked = other.Blocked;
                }
                if (other.HasMinimumCpmMicros) {
                  MinimumCpmMicros = other.MinimumCpmMicros;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(pb::CodedInputStream input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 10:
                    case 8: {
                      includedAdvertisers_.AddEntriesFrom(input, _repeated_includedAdvertisers_codec);
                      break;
                    }
                    case 18:
                    case 16: {
                      excludedAdvertisers_.AddEntriesFrom(input, _repeated_excludedAdvertisers_codec);
                      break;
                    }
                    case 26:
                    case 24: {
                      includedAgencies_.AddEntriesFrom(input, _repeated_includedAgencies_codec);
                      break;
                    }
                    case 34:
                    case 32: {
                      excludedAgencies_.AddEntriesFrom(input, _repeated_excludedAgencies_codec);
                      break;
                    }
                    case 40: {
                      Blocked = input.ReadBool();
                      break;
                    }
                    case 48: {
                      MinimumCpmMicros = input.ReadInt64();
                      break;
                    }
                  }
                }
              }

            }

            /// <summary>
            /// Information about any deals that matched for this inventory.
            /// </summary>
            public sealed partial class DirectDeal : pb::IMessage<DirectDeal> {
              private static readonly pb::MessageParser<DirectDeal> _parser = new pb::MessageParser<DirectDeal>(() => new DirectDeal());
              private pb::UnknownFieldSet _unknownFields;
              private int _hasBits0;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pb::MessageParser<DirectDeal> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::BidRequest.Types.AdSlot.Types.MatchingAdData.Descriptor.NestedTypes[1]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public DirectDeal() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public DirectDeal(DirectDeal other) : this() {
                _hasBits0 = other._hasBits0;
                directDealId_ = other.directDealId_;
                fixedCpmMicros_ = other.fixedCpmMicros_;
                dealType_ = other.dealType_;
                publisherBlocksOverridden_ = other.publisherBlocksOverridden_;
                dEPRECATEDRemainingImpressionsToBuy_ = other.dEPRECATEDRemainingImpressionsToBuy_;
                mustBidLevel_ = other.mustBidLevel_;
                mustBid_ = other.mustBid_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public DirectDeal Clone() {
                return new DirectDeal(this);
              }

              /// <summary>Field number for the "direct_deal_id" field.</summary>
              public const int DirectDealIdFieldNumber = 1;
              private readonly static long DirectDealIdDefaultValue = 0L;

              private long directDealId_;
              /// <summary>
              /// An id identifying the deal.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public long DirectDealId {
                get { if ((_hasBits0 & 1) != 0) { return directDealId_; } else { return DirectDealIdDefaultValue; } }
                set {
                  _hasBits0 |= 1;
                  directDealId_ = value;
                }
              }
              /// <summary>Gets whether the "direct_deal_id" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasDirectDealId {
                get { return (_hasBits0 & 1) != 0; }
              }
              /// <summary>Clears the value of the "direct_deal_id" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearDirectDealId() {
                _hasBits0 &= ~1;
              }

              /// <summary>Field number for the "fixed_cpm_micros" field.</summary>
              public const int FixedCpmMicrosFieldNumber = 2;
              private readonly static long FixedCpmMicrosDefaultValue = 0L;

              private long fixedCpmMicros_;
              /// <summary>
              /// For deal_type=PREFERRED_DEAL or deal_type=PROGRAMMATIC_GUARANTEED,
              /// you must bid at least fixed_cpm_micros (in micros of the bidding
              /// currency) in order to participate in the deal. If you win, you will
              /// be charged fixed_cpm_micros. For deal_type=PRIVATE_AUCTION or
              /// deal_type=AUCTION_PACKAGE you must bid at least fixed_cpm_micros.
              /// Bidding higher CPM than fixed_cpm_micros will increase your chance
              /// to win when deal_type=PRIVATE_AUCTION or deal_type=AUCTION_PACKAGE,
              /// however it will not increase your chance to win for other types of
              /// deals.
              /// The bidding currency is determined by:
              /// 1. The bidder-level currency, if configured.
              /// 2. Otherwise, the currency of the buyer accounts indicated by the
              /// billing IDs in the billing_id field.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public long FixedCpmMicros {
                get { if ((_hasBits0 & 2) != 0) { return fixedCpmMicros_; } else { return FixedCpmMicrosDefaultValue; } }
                set {
                  _hasBits0 |= 2;
                  fixedCpmMicros_ = value;
                }
              }
              /// <summary>Gets whether the "fixed_cpm_micros" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasFixedCpmMicros {
                get { return (_hasBits0 & 2) != 0; }
              }
              /// <summary>Clears the value of the "fixed_cpm_micros" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearFixedCpmMicros() {
                _hasBits0 &= ~2;
              }

              /// <summary>Field number for the "deal_type" field.</summary>
              public const int DealTypeFieldNumber = 3;
              private readonly static global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Types.DealType DealTypeDefaultValue = global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Types.DealType.UnknownDealType;

              private global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Types.DealType dealType_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Types.DealType DealType {
                get { if ((_hasBits0 & 4) != 0) { return dealType_; } else { return DealTypeDefaultValue; } }
                set {
                  _hasBits0 |= 4;
                  dealType_ = value;
                }
              }
              /// <summary>Gets whether the "deal_type" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasDealType {
                get { return (_hasBits0 & 4) != 0; }
              }
              /// <summary>Clears the value of the "deal_type" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearDealType() {
                _hasBits0 &= ~4;
              }

              /// <summary>Field number for the "publisher_blocks_overridden" field.</summary>
              public const int PublisherBlocksOverriddenFieldNumber = 4;
              private readonly static bool PublisherBlocksOverriddenDefaultValue = false;

              private bool publisherBlocksOverridden_;
              /// <summary>
              /// Whether the publisher has exempted this deal from configured blocks.
              /// This setting does not override AdX policies or Ad Review Center
              /// decisions.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool PublisherBlocksOverridden {
                get { if ((_hasBits0 & 8) != 0) { return publisherBlocksOverridden_; } else { return PublisherBlocksOverriddenDefaultValue; } }
                set {
                  _hasBits0 |= 8;
                  publisherBlocksOverridden_ = value;
                }
              }
              /// <summary>Gets whether the "publisher_blocks_overridden" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasPublisherBlocksOverridden {
                get { return (_hasBits0 & 8) != 0; }
              }
              /// <summary>Clears the value of the "publisher_blocks_overridden" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearPublisherBlocksOverridden() {
                _hasBits0 &= ~8;
              }

              /// <summary>Field number for the "DEPRECATED_remaining_impressions_to_buy" field.</summary>
              public const int DEPRECATEDRemainingImpressionsToBuyFieldNumber = 6;
              private readonly static long DEPRECATEDRemainingImpressionsToBuyDefaultValue = 0L;

              private long dEPRECATEDRemainingImpressionsToBuy_;
              /// <summary>
              /// This is deprecated. Please ignore.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public long DEPRECATEDRemainingImpressionsToBuy {
                get { if ((_hasBits0 & 16) != 0) { return dEPRECATEDRemainingImpressionsToBuy_; } else { return DEPRECATEDRemainingImpressionsToBuyDefaultValue; } }
                set {
                  _hasBits0 |= 16;
                  dEPRECATEDRemainingImpressionsToBuy_ = value;
                }
              }
              /// <summary>Gets whether the "DEPRECATED_remaining_impressions_to_buy" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasDEPRECATEDRemainingImpressionsToBuy {
                get { return (_hasBits0 & 16) != 0; }
              }
              /// <summary>Clears the value of the "DEPRECATED_remaining_impressions_to_buy" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearDEPRECATEDRemainingImpressionsToBuy() {
                _hasBits0 &= ~16;
              }

              /// <summary>Field number for the "must_bid_level" field.</summary>
              public const int MustBidLevelFieldNumber = 7;
              private readonly static double MustBidLevelDefaultValue = 1D;

              private double mustBidLevel_;
              /// <summary>
              /// This field is deprecated in favor of the boolean must_bid field
              /// below.
              /// Value between 0 and 1 only set for Programmatic Guaranteed deals.
              /// Buyers are required to bid if must_bid_level = 1 and can decide
              /// whether to bid if must_bid_level &lt; 1.
              /// </summary>
              [global::System.ObsoleteAttribute]
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public double MustBidLevel {
                get { if ((_hasBits0 & 32) != 0) { return mustBidLevel_; } else { return MustBidLevelDefaultValue; } }
                set {
                  _hasBits0 |= 32;
                  mustBidLevel_ = value;
                }
              }
              /// <summary>Gets whether the "must_bid_level" field is set</summary>
              [global::System.ObsoleteAttribute]
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMustBidLevel {
                get { return (_hasBits0 & 32) != 0; }
              }
              /// <summary>Clears the value of the "must_bid_level" field</summary>
              [global::System.ObsoleteAttribute]
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMustBidLevel() {
                _hasBits0 &= ~32;
              }

              /// <summary>Field number for the "must_bid" field.</summary>
              public const int MustBidFieldNumber = 9;
              private readonly static bool MustBidDefaultValue = true;

              private bool mustBid_;
              /// <summary>
              /// This field is only applicable to Programmatic Guaranteed deals. The
              /// buyer is allowed to skip bidding on the impression if this field is
              /// false. When it is true, the buyer is required to bid on this deal for
              /// this impression opportunity.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool MustBid {
                get { if ((_hasBits0 & 64) != 0) { return mustBid_; } else { return MustBidDefaultValue; } }
                set {
                  _hasBits0 |= 64;
                  mustBid_ = value;
                }
              }
              /// <summary>Gets whether the "must_bid" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMustBid {
                get { return (_hasBits0 & 64) != 0; }
              }
              /// <summary>Clears the value of the "must_bid" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMustBid() {
                _hasBits0 &= ~64;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override bool Equals(object other) {
                return Equals(other as DirectDeal);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Equals(DirectDeal other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if (DirectDealId != other.DirectDealId) return false;
                if (FixedCpmMicros != other.FixedCpmMicros) return false;
                if (DealType != other.DealType) return false;
                if (PublisherBlocksOverridden != other.PublisherBlocksOverridden) return false;
                if (DEPRECATEDRemainingImpressionsToBuy != other.DEPRECATEDRemainingImpressionsToBuy) return false;
                if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(MustBidLevel, other.MustBidLevel)) return false;
                if (MustBid != other.MustBid) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override int GetHashCode() {
                int hash = 1;
                if (HasDirectDealId) hash ^= DirectDealId.GetHashCode();
                if (HasFixedCpmMicros) hash ^= FixedCpmMicros.GetHashCode();
                if (HasDealType) hash ^= DealType.GetHashCode();
                if (HasPublisherBlocksOverridden) hash ^= PublisherBlocksOverridden.GetHashCode();
                if (HasDEPRECATEDRemainingImpressionsToBuy) hash ^= DEPRECATEDRemainingImpressionsToBuy.GetHashCode();
                if (HasMustBidLevel) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(MustBidLevel);
                if (HasMustBid) hash ^= MustBid.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void WriteTo(pb::CodedOutputStream output) {
                if (HasDirectDealId) {
                  output.WriteRawTag(8);
                  output.WriteInt64(DirectDealId);
                }
                if (HasFixedCpmMicros) {
                  output.WriteRawTag(16);
                  output.WriteInt64(FixedCpmMicros);
                }
                if (HasDealType) {
                  output.WriteRawTag(24);
                  output.WriteEnum((int) DealType);
                }
                if (HasPublisherBlocksOverridden) {
                  output.WriteRawTag(32);
                  output.WriteBool(PublisherBlocksOverridden);
                }
                if (HasDEPRECATEDRemainingImpressionsToBuy) {
                  output.WriteRawTag(48);
                  output.WriteInt64(DEPRECATEDRemainingImpressionsToBuy);
                }
                if (HasMustBidLevel) {
                  output.WriteRawTag(57);
                  output.WriteDouble(MustBidLevel);
                }
                if (HasMustBid) {
                  output.WriteRawTag(72);
                  output.WriteBool(MustBid);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int CalculateSize() {
                int size = 0;
                if (HasDirectDealId) {
                  size += 1 + pb::CodedOutputStream.ComputeInt64Size(DirectDealId);
                }
                if (HasFixedCpmMicros) {
                  size += 1 + pb::CodedOutputStream.ComputeInt64Size(FixedCpmMicros);
                }
                if (HasDealType) {
                  size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DealType);
                }
                if (HasPublisherBlocksOverridden) {
                  size += 1 + 1;
                }
                if (HasDEPRECATEDRemainingImpressionsToBuy) {
                  size += 1 + pb::CodedOutputStream.ComputeInt64Size(DEPRECATEDRemainingImpressionsToBuy);
                }
                if (HasMustBidLevel) {
                  size += 1 + 8;
                }
                if (HasMustBid) {
                  size += 1 + 1;
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(DirectDeal other) {
                if (other == null) {
                  return;
                }
                if (other.HasDirectDealId) {
                  DirectDealId = other.DirectDealId;
                }
                if (other.HasFixedCpmMicros) {
                  FixedCpmMicros = other.FixedCpmMicros;
                }
                if (other.HasDealType) {
                  DealType = other.DealType;
                }
                if (other.HasPublisherBlocksOverridden) {
                  PublisherBlocksOverridden = other.PublisherBlocksOverridden;
                }
                if (other.HasDEPRECATEDRemainingImpressionsToBuy) {
                  DEPRECATEDRemainingImpressionsToBuy = other.DEPRECATEDRemainingImpressionsToBuy;
                }
                if (other.HasMustBidLevel) {
                  MustBidLevel = other.MustBidLevel;
                }
                if (other.HasMustBid) {
                  MustBid = other.MustBid;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(pb::CodedInputStream input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 8: {
                      DirectDealId = input.ReadInt64();
                      break;
                    }
                    case 16: {
                      FixedCpmMicros = input.ReadInt64();
                      break;
                    }
                    case 24: {
                      DealType = (global::BidRequest.Types.AdSlot.Types.MatchingAdData.Types.DirectDeal.Types.DealType) input.ReadEnum();
                      break;
                    }
                    case 32: {
                      PublisherBlocksOverridden = input.ReadBool();
                      break;
                    }
                    case 48: {
                      DEPRECATEDRemainingImpressionsToBuy = input.ReadInt64();
                      break;
                    }
                    case 57: {
                      MustBidLevel = input.ReadDouble();
                      break;
                    }
                    case 72: {
                      MustBid = input.ReadBool();
                      break;
                    }
                  }
                }
              }

              #region Nested types
              /// <summary>Container for nested types declared in the DirectDeal message type.</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static partial class Types {
                /// <summary>
                /// The type of the deal. Note that Authorized Buyers policy overrides
                /// apply to all Programmatic Guaranteed and Preferred Deal bids, and do
                /// not apply to bids for other deal types.
                /// </summary>
                public enum DealType {
                  [pbr::OriginalName("UNKNOWN_DEAL_TYPE")] UnknownDealType = 0,
                  /// <summary>
                  /// Bids are fixed-price and evaluated before the Open Auction. Bidders
                  /// are not required to bid with Preferred Deals when they are present
                  /// on the bid request. See
                  /// https://support.google.com/authorizedbuyers/answer/2604595 for more
                  /// information.
                  /// </summary>
                  [pbr::OriginalName("PREFERRED_DEAL")] PreferredDeal = 1,
                  /// <summary>
                  /// Bids participate in a Private Auction against a select list of
                  /// buyers with specific floors. See
                  /// https://support.google.com/authorizedbuyers/answer/2839853 for more
                  /// information.
                  /// </summary>
                  [pbr::OriginalName("PRIVATE_AUCTION")] PrivateAuction = 2,
                  /// <summary>
                  /// Bids are fixed-price and evaluated before the Open Auction. Bidders
                  /// are expected to bid with Programmatic Guaranteed deals whenever
                  /// they are present on a bid request in order to ensure that the
                  /// number of impressions agreed upon for a given deal are served. See
                  /// https://support.google.com/authorizedbuyers/answer/7174589 for more
                  /// information.
                  /// </summary>
                  [pbr::OriginalName("PROGRAMMATIC_GUARANTEED")] ProgrammaticGuaranteed = 3,
                  /// <summary>
                  /// The deal ID is an identifier for a collection of Open Auction
                  /// inventory matching a given set of targeting criteria. See
                  /// https://support.google.com/authorizedbuyers/answer/7516884 for more
                  /// information.
                  /// </summary>
                  [pbr::OriginalName("AUCTION_PACKAGE")] AuctionPackage = 4,
                }

              }
              #endregion

            }

          }
          #endregion

        }

        /// <summary>
        /// Parameters related to exchange bidding (third party exchanges doing
        /// real-time bidding on DFP). This is never populated in calls to AdX
        /// real-time bidders.
        /// </summary>
        public sealed partial class ExchangeBidding : pb::IMessage<ExchangeBidding> {
          private static readonly pb::MessageParser<ExchangeBidding> _parser = new pb::MessageParser<ExchangeBidding>(() => new ExchangeBidding());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ExchangeBidding> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[4]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ExchangeBidding() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ExchangeBidding(ExchangeBidding other) : this() {
            publisherParameter_ = other.publisherParameter_.Clone();
            keyValue_ = other.keyValue_.Clone();
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ExchangeBidding Clone() {
            return new ExchangeBidding(this);
          }

          /// <summary>Field number for the "publisher_parameter" field.</summary>
          public const int PublisherParameterFieldNumber = 1;
          private static readonly pb::FieldCodec<string> _repeated_publisherParameter_codec
              = pb::FieldCodec.ForString(10);
          private readonly pbc::RepeatedField<string> publisherParameter_ = new pbc::RepeatedField<string>();
          /// <summary>
          /// UTF8 strings optionally provided by the publisher as part of their
          /// matching yield group configurations in the DFP UI. The format is
          /// arbitrary and should be agreed upon by the publisher and the exchange
          /// bidder.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<string> PublisherParameter {
            get { return publisherParameter_; }
          }

          /// <summary>Field number for the "key_value" field.</summary>
          public const int KeyValueFieldNumber = 3;
          private static readonly pb::FieldCodec<global::BidRequest.Types.KeyValue> _repeated_keyValue_codec
              = pb::FieldCodec.ForMessage(26, global::BidRequest.Types.KeyValue.Parser);
          private readonly pbc::RepeatedField<global::BidRequest.Types.KeyValue> keyValue_ = new pbc::RepeatedField<global::BidRequest.Types.KeyValue>();
          /// <summary>
          /// Repeated KeyValue pairs to be sent from the publisher to the
          /// exchange bidder.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<global::BidRequest.Types.KeyValue> KeyValue {
            get { return keyValue_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ExchangeBidding);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ExchangeBidding other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if(!publisherParameter_.Equals(other.publisherParameter_)) return false;
            if(!keyValue_.Equals(other.keyValue_)) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            hash ^= publisherParameter_.GetHashCode();
            hash ^= keyValue_.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            publisherParameter_.WriteTo(output, _repeated_publisherParameter_codec);
            keyValue_.WriteTo(output, _repeated_keyValue_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            size += publisherParameter_.CalculateSize(_repeated_publisherParameter_codec);
            size += keyValue_.CalculateSize(_repeated_keyValue_codec);
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ExchangeBidding other) {
            if (other == null) {
              return;
            }
            publisherParameter_.Add(other.publisherParameter_);
            keyValue_.Add(other.keyValue_);
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  publisherParameter_.AddEntriesFrom(input, _repeated_publisherParameter_codec);
                  break;
                }
                case 26: {
                  keyValue_.AddEntriesFrom(input, _repeated_keyValue_codec);
                  break;
                }
              }
            }
          }

        }

        /// <summary>
        /// Parameters related to Open Bidding.
        /// </summary>
        public sealed partial class OpenBidding : pb::IMessage<OpenBidding> {
          private static readonly pb::MessageParser<OpenBidding> _parser = new pb::MessageParser<OpenBidding>(() => new OpenBidding());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<OpenBidding> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[5]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public OpenBidding() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public OpenBidding(OpenBidding other) : this() {
            _hasBits0 = other._hasBits0;
            isOpenBidding_ = other.isOpenBidding_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public OpenBidding Clone() {
            return new OpenBidding(this);
          }

          /// <summary>Field number for the "is_open_bidding" field.</summary>
          public const int IsOpenBiddingFieldNumber = 2;
          private readonly static bool IsOpenBiddingDefaultValue = false;

          private bool isOpenBidding_;
          /// <summary>
          /// This field is set to true if the publisher set up a yield group or a
          /// mediation group that targets this adslot and this bidder. See
          /// https://support.google.com/admanager/answer/7128453 for information on
          /// Open Bidding and its effects on the bidding process.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool IsOpenBidding {
            get { if ((_hasBits0 & 1) != 0) { return isOpenBidding_; } else { return IsOpenBiddingDefaultValue; } }
            set {
              _hasBits0 |= 1;
              isOpenBidding_ = value;
            }
          }
          /// <summary>Gets whether the "is_open_bidding" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasIsOpenBidding {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "is_open_bidding" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearIsOpenBidding() {
            _hasBits0 &= ~1;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as OpenBidding);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(OpenBidding other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (IsOpenBidding != other.IsOpenBidding) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasIsOpenBidding) hash ^= IsOpenBidding.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasIsOpenBidding) {
              output.WriteRawTag(16);
              output.WriteBool(IsOpenBidding);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasIsOpenBidding) {
              size += 1 + 1;
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(OpenBidding other) {
            if (other == null) {
              return;
            }
            if (other.HasIsOpenBidding) {
              IsOpenBidding = other.IsOpenBidding;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 16: {
                  IsOpenBidding = input.ReadBool();
                  break;
                }
              }
            }
          }

        }

        /// <summary>
        /// A native ad consists of pieces that are rendered by the publisher. A
        /// publisher may support multiple distinct native ad templates. If the
        /// request also allows banners or videos, you can respond with other
        /// types of ads by setting html_snippet or video_url instead. If only
        /// native templates exist, you must set the native_ad field in any
        /// response you send.
        /// </summary>
        public sealed partial class NativeAdTemplate : pb::IMessage<NativeAdTemplate> {
          private static readonly pb::MessageParser<NativeAdTemplate> _parser = new pb::MessageParser<NativeAdTemplate>(() => new NativeAdTemplate());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<NativeAdTemplate> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[6]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public NativeAdTemplate() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public NativeAdTemplate(NativeAdTemplate other) : this() {
            _hasBits0 = other._hasBits0;
            requiredFields_ = other.requiredFields_;
            recommendedFields_ = other.recommendedFields_;
            headlineMaxSafeLength_ = other.headlineMaxSafeLength_;
            bodyMaxSafeLength_ = other.bodyMaxSafeLength_;
            callToActionMaxSafeLength_ = other.callToActionMaxSafeLength_;
            advertiserMaxSafeLength_ = other.advertiserMaxSafeLength_;
            dEPRECATEDStoreMaxSafeLength_ = other.dEPRECATEDStoreMaxSafeLength_;
            priceMaxSafeLength_ = other.priceMaxSafeLength_;
            imageWidth_ = other.imageWidth_;
            imageHeight_ = other.imageHeight_;
            logoWidth_ = other.logoWidth_;
            logoHeight_ = other.logoHeight_;
            appIconWidth_ = other.appIconWidth_;
            appIconHeight_ = other.appIconHeight_;
            styleId_ = other.styleId_;
            styleLayoutType_ = other.styleLayoutType_;
            styleHeight_ = other.styleHeight_;
            styleWidth_ = other.styleWidth_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public NativeAdTemplate Clone() {
            return new NativeAdTemplate(this);
          }

          /// <summary>Field number for the "required_fields" field.</summary>
          public const int RequiredFieldsFieldNumber = 1;
          private readonly static long RequiredFieldsDefaultValue = 0L;

          private long requiredFields_;
          /// <summary>
          /// Bitfield describing which fields are required by the publisher. Bid
          /// responses with no value for these fields will be rejected. Click and
          /// view tracking urls are always implicitly required.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long RequiredFields {
            get { if ((_hasBits0 & 1) != 0) { return requiredFields_; } else { return RequiredFieldsDefaultValue; } }
            set {
              _hasBits0 |= 1;
              requiredFields_ = value;
            }
          }
          /// <summary>Gets whether the "required_fields" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasRequiredFields {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "required_fields" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearRequiredFields() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "recommended_fields" field.</summary>
          public const int RecommendedFieldsFieldNumber = 2;
          private readonly static long RecommendedFieldsDefaultValue = 0L;

          private long recommendedFields_;
          /// <summary>
          /// Bitfield describing which fields are recommended by the publisher. All
          /// recommended fields are supported, but not all recommended fields are
          /// required.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long RecommendedFields {
            get { if ((_hasBits0 & 2) != 0) { return recommendedFields_; } else { return RecommendedFieldsDefaultValue; } }
            set {
              _hasBits0 |= 2;
              recommendedFields_ = value;
            }
          }
          /// <summary>Gets whether the "recommended_fields" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasRecommendedFields {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "recommended_fields" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearRecommendedFields() {
            _hasBits0 &= ~2;
          }

          /// <summary>Field number for the "headline_max_safe_length" field.</summary>
          public const int HeadlineMaxSafeLengthFieldNumber = 3;
          private readonly static int HeadlineMaxSafeLengthDefaultValue = 0;

          private int headlineMaxSafeLength_;
          /// <summary>
          /// max_safe_length indicates the maximum number of Unicode characters that
          /// are guaranteed to be shown without truncation. Longer strings may be
          /// truncated and ellipsized by Ad Exchange or the publisher during
          /// rendering.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int HeadlineMaxSafeLength {
            get { if ((_hasBits0 & 4) != 0) { return headlineMaxSafeLength_; } else { return HeadlineMaxSafeLengthDefaultValue; } }
            set {
              _hasBits0 |= 4;
              headlineMaxSafeLength_ = value;
            }
          }
          /// <summary>Gets whether the "headline_max_safe_length" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasHeadlineMaxSafeLength {
            get { return (_hasBits0 & 4) != 0; }
          }
          /// <summary>Clears the value of the "headline_max_safe_length" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearHeadlineMaxSafeLength() {
            _hasBits0 &= ~4;
          }

          /// <summary>Field number for the "body_max_safe_length" field.</summary>
          public const int BodyMaxSafeLengthFieldNumber = 4;
          private readonly static int BodyMaxSafeLengthDefaultValue = 0;

          private int bodyMaxSafeLength_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int BodyMaxSafeLength {
            get { if ((_hasBits0 & 8) != 0) { return bodyMaxSafeLength_; } else { return BodyMaxSafeLengthDefaultValue; } }
            set {
              _hasBits0 |= 8;
              bodyMaxSafeLength_ = value;
            }
          }
          /// <summary>Gets whether the "body_max_safe_length" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasBodyMaxSafeLength {
            get { return (_hasBits0 & 8) != 0; }
          }
          /// <summary>Clears the value of the "body_max_safe_length" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearBodyMaxSafeLength() {
            _hasBits0 &= ~8;
          }

          /// <summary>Field number for the "call_to_action_max_safe_length" field.</summary>
          public const int CallToActionMaxSafeLengthFieldNumber = 5;
          private readonly static int CallToActionMaxSafeLengthDefaultValue = 0;

          private int callToActionMaxSafeLength_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CallToActionMaxSafeLength {
            get { if ((_hasBits0 & 16) != 0) { return callToActionMaxSafeLength_; } else { return CallToActionMaxSafeLengthDefaultValue; } }
            set {
              _hasBits0 |= 16;
              callToActionMaxSafeLength_ = value;
            }
          }
          /// <summary>Gets whether the "call_to_action_max_safe_length" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasCallToActionMaxSafeLength {
            get { return (_hasBits0 & 16) != 0; }
          }
          /// <summary>Clears the value of the "call_to_action_max_safe_length" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearCallToActionMaxSafeLength() {
            _hasBits0 &= ~16;
          }

          /// <summary>Field number for the "advertiser_max_safe_length" field.</summary>
          public const int AdvertiserMaxSafeLengthFieldNumber = 6;
          private readonly static int AdvertiserMaxSafeLengthDefaultValue = 0;

          private int advertiserMaxSafeLength_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int AdvertiserMaxSafeLength {
            get { if ((_hasBits0 & 32) != 0) { return advertiserMaxSafeLength_; } else { return AdvertiserMaxSafeLengthDefaultValue; } }
            set {
              _hasBits0 |= 32;
              advertiserMaxSafeLength_ = value;
            }
          }
          /// <summary>Gets whether the "advertiser_max_safe_length" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasAdvertiserMaxSafeLength {
            get { return (_hasBits0 & 32) != 0; }
          }
          /// <summary>Clears the value of the "advertiser_max_safe_length" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearAdvertiserMaxSafeLength() {
            _hasBits0 &= ~32;
          }

          /// <summary>Field number for the "DEPRECATED_store_max_safe_length" field.</summary>
          public const int DEPRECATEDStoreMaxSafeLengthFieldNumber = 14;
          private readonly static int DEPRECATEDStoreMaxSafeLengthDefaultValue = 0;

          private int dEPRECATEDStoreMaxSafeLength_;
          /// <summary>
          /// This field is deprecated.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int DEPRECATEDStoreMaxSafeLength {
            get { if ((_hasBits0 & 4096) != 0) { return dEPRECATEDStoreMaxSafeLength_; } else { return DEPRECATEDStoreMaxSafeLengthDefaultValue; } }
            set {
              _hasBits0 |= 4096;
              dEPRECATEDStoreMaxSafeLength_ = value;
            }
          }
          /// <summary>Gets whether the "DEPRECATED_store_max_safe_length" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasDEPRECATEDStoreMaxSafeLength {
            get { return (_hasBits0 & 4096) != 0; }
          }
          /// <summary>Clears the value of the "DEPRECATED_store_max_safe_length" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearDEPRECATEDStoreMaxSafeLength() {
            _hasBits0 &= ~4096;
          }

          /// <summary>Field number for the "price_max_safe_length" field.</summary>
          public const int PriceMaxSafeLengthFieldNumber = 15;
          private readonly static int PriceMaxSafeLengthDefaultValue = 0;

          private int priceMaxSafeLength_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int PriceMaxSafeLength {
            get { if ((_hasBits0 & 8192) != 0) { return priceMaxSafeLength_; } else { return PriceMaxSafeLengthDefaultValue; } }
            set {
              _hasBits0 |= 8192;
              priceMaxSafeLength_ = value;
            }
          }
          /// <summary>Gets whether the "price_max_safe_length" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasPriceMaxSafeLength {
            get { return (_hasBits0 & 8192) != 0; }
          }
          /// <summary>Clears the value of the "price_max_safe_length" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearPriceMaxSafeLength() {
            _hasBits0 &= ~8192;
          }

          /// <summary>Field number for the "image_width" field.</summary>
          public const int ImageWidthFieldNumber = 7;
          private readonly static int ImageWidthDefaultValue = 0;

          private int imageWidth_;
          /// <summary>
          /// The width and height from which to calculate the required aspect ratio.
          /// You can provide a larger image in the response. Images that have aspect
          /// ratios substantially different than those implied by the height and
          /// width may be filtered.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int ImageWidth {
            get { if ((_hasBits0 & 64) != 0) { return imageWidth_; } else { return ImageWidthDefaultValue; } }
            set {
              _hasBits0 |= 64;
              imageWidth_ = value;
            }
          }
          /// <summary>Gets whether the "image_width" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasImageWidth {
            get { return (_hasBits0 & 64) != 0; }
          }
          /// <summary>Clears the value of the "image_width" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearImageWidth() {
            _hasBits0 &= ~64;
          }

          /// <summary>Field number for the "image_height" field.</summary>
          public const int ImageHeightFieldNumber = 8;
          private readonly static int ImageHeightDefaultValue = 0;

          private int imageHeight_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int ImageHeight {
            get { if ((_hasBits0 & 128) != 0) { return imageHeight_; } else { return ImageHeightDefaultValue; } }
            set {
              _hasBits0 |= 128;
              imageHeight_ = value;
            }
          }
          /// <summary>Gets whether the "image_height" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasImageHeight {
            get { return (_hasBits0 & 128) != 0; }
          }
          /// <summary>Clears the value of the "image_height" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearImageHeight() {
            _hasBits0 &= ~128;
          }

          /// <summary>Field number for the "logo_width" field.</summary>
          public const int LogoWidthFieldNumber = 9;
          private readonly static int LogoWidthDefaultValue = 0;

          private int logoWidth_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int LogoWidth {
            get { if ((_hasBits0 & 256) != 0) { return logoWidth_; } else { return LogoWidthDefaultValue; } }
            set {
              _hasBits0 |= 256;
              logoWidth_ = value;
            }
          }
          /// <summary>Gets whether the "logo_width" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasLogoWidth {
            get { return (_hasBits0 & 256) != 0; }
          }
          /// <summary>Clears the value of the "logo_width" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearLogoWidth() {
            _hasBits0 &= ~256;
          }

          /// <summary>Field number for the "logo_height" field.</summary>
          public const int LogoHeightFieldNumber = 10;
          private readonly static int LogoHeightDefaultValue = 0;

          private int logoHeight_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int LogoHeight {
            get { if ((_hasBits0 & 512) != 0) { return logoHeight_; } else { return LogoHeightDefaultValue; } }
            set {
              _hasBits0 |= 512;
              logoHeight_ = value;
            }
          }
          /// <summary>Gets whether the "logo_height" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasLogoHeight {
            get { return (_hasBits0 & 512) != 0; }
          }
          /// <summary>Clears the value of the "logo_height" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearLogoHeight() {
            _hasBits0 &= ~512;
          }

          /// <summary>Field number for the "app_icon_width" field.</summary>
          public const int AppIconWidthFieldNumber = 11;
          private readonly static int AppIconWidthDefaultValue = 0;

          private int appIconWidth_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int AppIconWidth {
            get { if ((_hasBits0 & 1024) != 0) { return appIconWidth_; } else { return AppIconWidthDefaultValue; } }
            set {
              _hasBits0 |= 1024;
              appIconWidth_ = value;
            }
          }
          /// <summary>Gets whether the "app_icon_width" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasAppIconWidth {
            get { return (_hasBits0 & 1024) != 0; }
          }
          /// <summary>Clears the value of the "app_icon_width" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearAppIconWidth() {
            _hasBits0 &= ~1024;
          }

          /// <summary>Field number for the "app_icon_height" field.</summary>
          public const int AppIconHeightFieldNumber = 12;
          private readonly static int AppIconHeightDefaultValue = 0;

          private int appIconHeight_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int AppIconHeight {
            get { if ((_hasBits0 & 2048) != 0) { return appIconHeight_; } else { return AppIconHeightDefaultValue; } }
            set {
              _hasBits0 |= 2048;
              appIconHeight_ = value;
            }
          }
          /// <summary>Gets whether the "app_icon_height" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasAppIconHeight {
            get { return (_hasBits0 & 2048) != 0; }
          }
          /// <summary>Clears the value of the "app_icon_height" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearAppIconHeight() {
            _hasBits0 &= ~2048;
          }

          /// <summary>Field number for the "style_id" field.</summary>
          public const int StyleIdFieldNumber = 16;
          private readonly static int StyleIdDefaultValue = 0;

          private int styleId_;
          /// <summary>
          /// Globally distinct id for the specific style, HTML, and CSS with which
          /// the native ad is rendered.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int StyleId {
            get { if ((_hasBits0 & 16384) != 0) { return styleId_; } else { return StyleIdDefaultValue; } }
            set {
              _hasBits0 |= 16384;
              styleId_ = value;
            }
          }
          /// <summary>Gets whether the "style_id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasStyleId {
            get { return (_hasBits0 & 16384) != 0; }
          }
          /// <summary>Clears the value of the "style_id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearStyleId() {
            _hasBits0 &= ~16384;
          }

          /// <summary>Field number for the "style_layout_type" field.</summary>
          public const int StyleLayoutTypeFieldNumber = 17;
          private readonly static global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.LayoutType StyleLayoutTypeDefaultValue = global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.LayoutType.Pixel;

          private global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.LayoutType styleLayoutType_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.LayoutType StyleLayoutType {
            get { if ((_hasBits0 & 32768) != 0) { return styleLayoutType_; } else { return StyleLayoutTypeDefaultValue; } }
            set {
              _hasBits0 |= 32768;
              styleLayoutType_ = value;
            }
          }
          /// <summary>Gets whether the "style_layout_type" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasStyleLayoutType {
            get { return (_hasBits0 & 32768) != 0; }
          }
          /// <summary>Clears the value of the "style_layout_type" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearStyleLayoutType() {
            _hasBits0 &= ~32768;
          }

          /// <summary>Field number for the "style_height" field.</summary>
          public const int StyleHeightFieldNumber = 18;
          private readonly static int StyleHeightDefaultValue = 0;

          private int styleHeight_;
          /// <summary>
          /// If the style_layout_type is Pixel, width and height of the
          /// entire native ad after rendering. If the style_layout_type is
          /// Fluid, the style_height and style_width may optionally
          /// not be populated.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int StyleHeight {
            get { if ((_hasBits0 & 65536) != 0) { return styleHeight_; } else { return StyleHeightDefaultValue; } }
            set {
              _hasBits0 |= 65536;
              styleHeight_ = value;
            }
          }
          /// <summary>Gets whether the "style_height" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasStyleHeight {
            get { return (_hasBits0 & 65536) != 0; }
          }
          /// <summary>Clears the value of the "style_height" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearStyleHeight() {
            _hasBits0 &= ~65536;
          }

          /// <summary>Field number for the "style_width" field.</summary>
          public const int StyleWidthFieldNumber = 19;
          private readonly static int StyleWidthDefaultValue = 0;

          private int styleWidth_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int StyleWidth {
            get { if ((_hasBits0 & 131072) != 0) { return styleWidth_; } else { return StyleWidthDefaultValue; } }
            set {
              _hasBits0 |= 131072;
              styleWidth_ = value;
            }
          }
          /// <summary>Gets whether the "style_width" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasStyleWidth {
            get { return (_hasBits0 & 131072) != 0; }
          }
          /// <summary>Clears the value of the "style_width" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearStyleWidth() {
            _hasBits0 &= ~131072;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as NativeAdTemplate);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(NativeAdTemplate other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (RequiredFields != other.RequiredFields) return false;
            if (RecommendedFields != other.RecommendedFields) return false;
            if (HeadlineMaxSafeLength != other.HeadlineMaxSafeLength) return false;
            if (BodyMaxSafeLength != other.BodyMaxSafeLength) return false;
            if (CallToActionMaxSafeLength != other.CallToActionMaxSafeLength) return false;
            if (AdvertiserMaxSafeLength != other.AdvertiserMaxSafeLength) return false;
            if (DEPRECATEDStoreMaxSafeLength != other.DEPRECATEDStoreMaxSafeLength) return false;
            if (PriceMaxSafeLength != other.PriceMaxSafeLength) return false;
            if (ImageWidth != other.ImageWidth) return false;
            if (ImageHeight != other.ImageHeight) return false;
            if (LogoWidth != other.LogoWidth) return false;
            if (LogoHeight != other.LogoHeight) return false;
            if (AppIconWidth != other.AppIconWidth) return false;
            if (AppIconHeight != other.AppIconHeight) return false;
            if (StyleId != other.StyleId) return false;
            if (StyleLayoutType != other.StyleLayoutType) return false;
            if (StyleHeight != other.StyleHeight) return false;
            if (StyleWidth != other.StyleWidth) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasRequiredFields) hash ^= RequiredFields.GetHashCode();
            if (HasRecommendedFields) hash ^= RecommendedFields.GetHashCode();
            if (HasHeadlineMaxSafeLength) hash ^= HeadlineMaxSafeLength.GetHashCode();
            if (HasBodyMaxSafeLength) hash ^= BodyMaxSafeLength.GetHashCode();
            if (HasCallToActionMaxSafeLength) hash ^= CallToActionMaxSafeLength.GetHashCode();
            if (HasAdvertiserMaxSafeLength) hash ^= AdvertiserMaxSafeLength.GetHashCode();
            if (HasDEPRECATEDStoreMaxSafeLength) hash ^= DEPRECATEDStoreMaxSafeLength.GetHashCode();
            if (HasPriceMaxSafeLength) hash ^= PriceMaxSafeLength.GetHashCode();
            if (HasImageWidth) hash ^= ImageWidth.GetHashCode();
            if (HasImageHeight) hash ^= ImageHeight.GetHashCode();
            if (HasLogoWidth) hash ^= LogoWidth.GetHashCode();
            if (HasLogoHeight) hash ^= LogoHeight.GetHashCode();
            if (HasAppIconWidth) hash ^= AppIconWidth.GetHashCode();
            if (HasAppIconHeight) hash ^= AppIconHeight.GetHashCode();
            if (HasStyleId) hash ^= StyleId.GetHashCode();
            if (HasStyleLayoutType) hash ^= StyleLayoutType.GetHashCode();
            if (HasStyleHeight) hash ^= StyleHeight.GetHashCode();
            if (HasStyleWidth) hash ^= StyleWidth.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasRequiredFields) {
              output.WriteRawTag(8);
              output.WriteInt64(RequiredFields);
            }
            if (HasRecommendedFields) {
              output.WriteRawTag(16);
              output.WriteInt64(RecommendedFields);
            }
            if (HasHeadlineMaxSafeLength) {
              output.WriteRawTag(24);
              output.WriteInt32(HeadlineMaxSafeLength);
            }
            if (HasBodyMaxSafeLength) {
              output.WriteRawTag(32);
              output.WriteInt32(BodyMaxSafeLength);
            }
            if (HasCallToActionMaxSafeLength) {
              output.WriteRawTag(40);
              output.WriteInt32(CallToActionMaxSafeLength);
            }
            if (HasAdvertiserMaxSafeLength) {
              output.WriteRawTag(48);
              output.WriteInt32(AdvertiserMaxSafeLength);
            }
            if (HasImageWidth) {
              output.WriteRawTag(56);
              output.WriteInt32(ImageWidth);
            }
            if (HasImageHeight) {
              output.WriteRawTag(64);
              output.WriteInt32(ImageHeight);
            }
            if (HasLogoWidth) {
              output.WriteRawTag(72);
              output.WriteInt32(LogoWidth);
            }
            if (HasLogoHeight) {
              output.WriteRawTag(80);
              output.WriteInt32(LogoHeight);
            }
            if (HasAppIconWidth) {
              output.WriteRawTag(88);
              output.WriteInt32(AppIconWidth);
            }
            if (HasAppIconHeight) {
              output.WriteRawTag(96);
              output.WriteInt32(AppIconHeight);
            }
            if (HasDEPRECATEDStoreMaxSafeLength) {
              output.WriteRawTag(112);
              output.WriteInt32(DEPRECATEDStoreMaxSafeLength);
            }
            if (HasPriceMaxSafeLength) {
              output.WriteRawTag(120);
              output.WriteInt32(PriceMaxSafeLength);
            }
            if (HasStyleId) {
              output.WriteRawTag(128, 1);
              output.WriteInt32(StyleId);
            }
            if (HasStyleLayoutType) {
              output.WriteRawTag(136, 1);
              output.WriteEnum((int) StyleLayoutType);
            }
            if (HasStyleHeight) {
              output.WriteRawTag(144, 1);
              output.WriteInt32(StyleHeight);
            }
            if (HasStyleWidth) {
              output.WriteRawTag(152, 1);
              output.WriteInt32(StyleWidth);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasRequiredFields) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(RequiredFields);
            }
            if (HasRecommendedFields) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecommendedFields);
            }
            if (HasHeadlineMaxSafeLength) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(HeadlineMaxSafeLength);
            }
            if (HasBodyMaxSafeLength) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(BodyMaxSafeLength);
            }
            if (HasCallToActionMaxSafeLength) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(CallToActionMaxSafeLength);
            }
            if (HasAdvertiserMaxSafeLength) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvertiserMaxSafeLength);
            }
            if (HasDEPRECATEDStoreMaxSafeLength) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(DEPRECATEDStoreMaxSafeLength);
            }
            if (HasPriceMaxSafeLength) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(PriceMaxSafeLength);
            }
            if (HasImageWidth) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageWidth);
            }
            if (HasImageHeight) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(ImageHeight);
            }
            if (HasLogoWidth) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogoWidth);
            }
            if (HasLogoHeight) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(LogoHeight);
            }
            if (HasAppIconWidth) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppIconWidth);
            }
            if (HasAppIconHeight) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(AppIconHeight);
            }
            if (HasStyleId) {
              size += 2 + pb::CodedOutputStream.ComputeInt32Size(StyleId);
            }
            if (HasStyleLayoutType) {
              size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) StyleLayoutType);
            }
            if (HasStyleHeight) {
              size += 2 + pb::CodedOutputStream.ComputeInt32Size(StyleHeight);
            }
            if (HasStyleWidth) {
              size += 2 + pb::CodedOutputStream.ComputeInt32Size(StyleWidth);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(NativeAdTemplate other) {
            if (other == null) {
              return;
            }
            if (other.HasRequiredFields) {
              RequiredFields = other.RequiredFields;
            }
            if (other.HasRecommendedFields) {
              RecommendedFields = other.RecommendedFields;
            }
            if (other.HasHeadlineMaxSafeLength) {
              HeadlineMaxSafeLength = other.HeadlineMaxSafeLength;
            }
            if (other.HasBodyMaxSafeLength) {
              BodyMaxSafeLength = other.BodyMaxSafeLength;
            }
            if (other.HasCallToActionMaxSafeLength) {
              CallToActionMaxSafeLength = other.CallToActionMaxSafeLength;
            }
            if (other.HasAdvertiserMaxSafeLength) {
              AdvertiserMaxSafeLength = other.AdvertiserMaxSafeLength;
            }
            if (other.HasDEPRECATEDStoreMaxSafeLength) {
              DEPRECATEDStoreMaxSafeLength = other.DEPRECATEDStoreMaxSafeLength;
            }
            if (other.HasPriceMaxSafeLength) {
              PriceMaxSafeLength = other.PriceMaxSafeLength;
            }
            if (other.HasImageWidth) {
              ImageWidth = other.ImageWidth;
            }
            if (other.HasImageHeight) {
              ImageHeight = other.ImageHeight;
            }
            if (other.HasLogoWidth) {
              LogoWidth = other.LogoWidth;
            }
            if (other.HasLogoHeight) {
              LogoHeight = other.LogoHeight;
            }
            if (other.HasAppIconWidth) {
              AppIconWidth = other.AppIconWidth;
            }
            if (other.HasAppIconHeight) {
              AppIconHeight = other.AppIconHeight;
            }
            if (other.HasStyleId) {
              StyleId = other.StyleId;
            }
            if (other.HasStyleLayoutType) {
              StyleLayoutType = other.StyleLayoutType;
            }
            if (other.HasStyleHeight) {
              StyleHeight = other.StyleHeight;
            }
            if (other.HasStyleWidth) {
              StyleWidth = other.StyleWidth;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  RequiredFields = input.ReadInt64();
                  break;
                }
                case 16: {
                  RecommendedFields = input.ReadInt64();
                  break;
                }
                case 24: {
                  HeadlineMaxSafeLength = input.ReadInt32();
                  break;
                }
                case 32: {
                  BodyMaxSafeLength = input.ReadInt32();
                  break;
                }
                case 40: {
                  CallToActionMaxSafeLength = input.ReadInt32();
                  break;
                }
                case 48: {
                  AdvertiserMaxSafeLength = input.ReadInt32();
                  break;
                }
                case 56: {
                  ImageWidth = input.ReadInt32();
                  break;
                }
                case 64: {
                  ImageHeight = input.ReadInt32();
                  break;
                }
                case 72: {
                  LogoWidth = input.ReadInt32();
                  break;
                }
                case 80: {
                  LogoHeight = input.ReadInt32();
                  break;
                }
                case 88: {
                  AppIconWidth = input.ReadInt32();
                  break;
                }
                case 96: {
                  AppIconHeight = input.ReadInt32();
                  break;
                }
                case 112: {
                  DEPRECATEDStoreMaxSafeLength = input.ReadInt32();
                  break;
                }
                case 120: {
                  PriceMaxSafeLength = input.ReadInt32();
                  break;
                }
                case 128: {
                  StyleId = input.ReadInt32();
                  break;
                }
                case 136: {
                  StyleLayoutType = (global::BidRequest.Types.AdSlot.Types.NativeAdTemplate.Types.LayoutType) input.ReadEnum();
                  break;
                }
                case 144: {
                  StyleHeight = input.ReadInt32();
                  break;
                }
                case 152: {
                  StyleWidth = input.ReadInt32();
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the NativeAdTemplate message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// Defines the bits used in required_fields and recommended_fields. There
            /// is one bit for each of the fields in BidResponse.Ad.NativeAd
            /// </summary>
            public enum Fields {
              [pbr::OriginalName("NO_FIELDS")] NoFields = 0,
              [pbr::OriginalName("HEADLINE")] Headline = 1,
              [pbr::OriginalName("BODY")] Body = 2,
              [pbr::OriginalName("CALL_TO_ACTION")] CallToAction = 4,
              [pbr::OriginalName("ADVERTISER")] Advertiser = 8,
              [pbr::OriginalName("IMAGE")] Image = 16,
              [pbr::OriginalName("LOGO")] Logo = 32,
              [pbr::OriginalName("APP_ICON")] AppIcon = 64,
              [pbr::OriginalName("STAR_RATING")] StarRating = 128,
              [pbr::OriginalName("PRICE")] Price = 256,
              [pbr::OriginalName("DEPRECATED_STORE")] DeprecatedStore = 512,
              [pbr::OriginalName("VIDEO")] Video = 1024,
            }

            /// <summary>
            /// Type of style layout for each native ad template.
            /// </summary>
            public enum LayoutType {
              [pbr::OriginalName("PIXEL")] Pixel = 0,
              [pbr::OriginalName("FLUID")] Fluid = 1,
            }

          }
          #endregion

        }

        /// <summary>
        /// Auto refresh settings.
        /// </summary>
        public sealed partial class AutoRefresh : pb::IMessage<AutoRefresh> {
          private static readonly pb::MessageParser<AutoRefresh> _parser = new pb::MessageParser<AutoRefresh>(() => new AutoRefresh());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<AutoRefresh> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[7]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public AutoRefresh() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public AutoRefresh(AutoRefresh other) : this() {
            _hasBits0 = other._hasBits0;
            refreshSettings_ = other.refreshSettings_.Clone();
            refreshCount_ = other.refreshCount_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public AutoRefresh Clone() {
            return new AutoRefresh(this);
          }

          /// <summary>Field number for the "refresh_settings" field.</summary>
          public const int RefreshSettingsFieldNumber = 1;
          private static readonly pb::FieldCodec<global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings> _repeated_refreshSettings_codec
              = pb::FieldCodec.ForMessage(10, global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Parser);
          private readonly pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings> refreshSettings_ = new pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings>();
          /// <summary>
          /// The auto-refresh settings that the publisher has on this
          /// inventory. This is repeated because publishers may
          /// do multiple types of auto refresh on one piece of inventory.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings> RefreshSettings {
            get { return refreshSettings_; }
          }

          /// <summary>Field number for the "refresh_count" field.</summary>
          public const int RefreshCountFieldNumber = 2;
          private readonly static int RefreshCountDefaultValue = 0;

          private int refreshCount_;
          /// <summary>
          /// The number of times this ad slot had been refreshed since last page
          /// load.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int RefreshCount {
            get { if ((_hasBits0 & 1) != 0) { return refreshCount_; } else { return RefreshCountDefaultValue; } }
            set {
              _hasBits0 |= 1;
              refreshCount_ = value;
            }
          }
          /// <summary>Gets whether the "refresh_count" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasRefreshCount {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "refresh_count" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearRefreshCount() {
            _hasBits0 &= ~1;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as AutoRefresh);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(AutoRefresh other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if(!refreshSettings_.Equals(other.refreshSettings_)) return false;
            if (RefreshCount != other.RefreshCount) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            hash ^= refreshSettings_.GetHashCode();
            if (HasRefreshCount) hash ^= RefreshCount.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            refreshSettings_.WriteTo(output, _repeated_refreshSettings_codec);
            if (HasRefreshCount) {
              output.WriteRawTag(16);
              output.WriteInt32(RefreshCount);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            size += refreshSettings_.CalculateSize(_repeated_refreshSettings_codec);
            if (HasRefreshCount) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(RefreshCount);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(AutoRefresh other) {
            if (other == null) {
              return;
            }
            refreshSettings_.Add(other.refreshSettings_);
            if (other.HasRefreshCount) {
              RefreshCount = other.RefreshCount;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  refreshSettings_.AddEntriesFrom(input, _repeated_refreshSettings_codec);
                  break;
                }
                case 16: {
                  RefreshCount = input.ReadInt32();
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the AutoRefresh message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            public sealed partial class AutoRefreshSettings : pb::IMessage<AutoRefreshSettings> {
              private static readonly pb::MessageParser<AutoRefreshSettings> _parser = new pb::MessageParser<AutoRefreshSettings>(() => new AutoRefreshSettings());
              private pb::UnknownFieldSet _unknownFields;
              private int _hasBits0;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pb::MessageParser<AutoRefreshSettings> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::BidRequest.Types.AdSlot.Types.AutoRefresh.Descriptor.NestedTypes[0]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public AutoRefreshSettings() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public AutoRefreshSettings(AutoRefreshSettings other) : this() {
                _hasBits0 = other._hasBits0;
                refreshType_ = other.refreshType_;
                minRefreshIntervalSeconds_ = other.minRefreshIntervalSeconds_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public AutoRefreshSettings Clone() {
                return new AutoRefreshSettings(this);
              }

              /// <summary>Field number for the "refresh_type" field.</summary>
              public const int RefreshTypeFieldNumber = 1;
              private readonly static global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Types.AutoRefreshType RefreshTypeDefaultValue = global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Types.AutoRefreshType.UnknownAutoRefreshType;

              private global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Types.AutoRefreshType refreshType_;
              /// <summary>
              /// The type of the declared auto refresh.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Types.AutoRefreshType RefreshType {
                get { if ((_hasBits0 & 1) != 0) { return refreshType_; } else { return RefreshTypeDefaultValue; } }
                set {
                  _hasBits0 |= 1;
                  refreshType_ = value;
                }
              }
              /// <summary>Gets whether the "refresh_type" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasRefreshType {
                get { return (_hasBits0 & 1) != 0; }
              }
              /// <summary>Clears the value of the "refresh_type" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearRefreshType() {
                _hasBits0 &= ~1;
              }

              /// <summary>Field number for the "min_refresh_interval_seconds" field.</summary>
              public const int MinRefreshIntervalSecondsFieldNumber = 2;
              private readonly static int MinRefreshIntervalSecondsDefaultValue = 0;

              private int minRefreshIntervalSeconds_;
              /// <summary>
              /// The minimum refresh interval. This applies to all refresh types.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int MinRefreshIntervalSeconds {
                get { if ((_hasBits0 & 2) != 0) { return minRefreshIntervalSeconds_; } else { return MinRefreshIntervalSecondsDefaultValue; } }
                set {
                  _hasBits0 |= 2;
                  minRefreshIntervalSeconds_ = value;
                }
              }
              /// <summary>Gets whether the "min_refresh_interval_seconds" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasMinRefreshIntervalSeconds {
                get { return (_hasBits0 & 2) != 0; }
              }
              /// <summary>Clears the value of the "min_refresh_interval_seconds" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearMinRefreshIntervalSeconds() {
                _hasBits0 &= ~2;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override bool Equals(object other) {
                return Equals(other as AutoRefreshSettings);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Equals(AutoRefreshSettings other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if (RefreshType != other.RefreshType) return false;
                if (MinRefreshIntervalSeconds != other.MinRefreshIntervalSeconds) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override int GetHashCode() {
                int hash = 1;
                if (HasRefreshType) hash ^= RefreshType.GetHashCode();
                if (HasMinRefreshIntervalSeconds) hash ^= MinRefreshIntervalSeconds.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void WriteTo(pb::CodedOutputStream output) {
                if (HasRefreshType) {
                  output.WriteRawTag(8);
                  output.WriteEnum((int) RefreshType);
                }
                if (HasMinRefreshIntervalSeconds) {
                  output.WriteRawTag(16);
                  output.WriteInt32(MinRefreshIntervalSeconds);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int CalculateSize() {
                int size = 0;
                if (HasRefreshType) {
                  size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) RefreshType);
                }
                if (HasMinRefreshIntervalSeconds) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinRefreshIntervalSeconds);
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(AutoRefreshSettings other) {
                if (other == null) {
                  return;
                }
                if (other.HasRefreshType) {
                  RefreshType = other.RefreshType;
                }
                if (other.HasMinRefreshIntervalSeconds) {
                  MinRefreshIntervalSeconds = other.MinRefreshIntervalSeconds;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(pb::CodedInputStream input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 8: {
                      RefreshType = (global::BidRequest.Types.AdSlot.Types.AutoRefresh.Types.AutoRefreshSettings.Types.AutoRefreshType) input.ReadEnum();
                      break;
                    }
                    case 16: {
                      MinRefreshIntervalSeconds = input.ReadInt32();
                      break;
                    }
                  }
                }
              }

              #region Nested types
              /// <summary>Container for nested types declared in the AutoRefreshSettings message type.</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static partial class Types {
                public enum AutoRefreshType {
                  [pbr::OriginalName("UNKNOWN_AUTO_REFRESH_TYPE")] UnknownAutoRefreshType = 0,
                  /// <summary>
                  /// Refresh triggered by user-initiated action such
                  /// </summary>
                  [pbr::OriginalName("USER_ACTION")] UserAction = 1,
                  /// <summary>
                  /// as scrolling.
                  /// </summary>
                  [pbr::OriginalName("EVENT")] Event = 2,
                  /// <summary>
                  /// when the football game score changes on the page.
                  /// </summary>
                  [pbr::OriginalName("TIME")] Time = 3,
                }

              }
              #endregion

            }

          }
          #endregion

        }

        /// <summary>
        /// Stickiness settings declared by the publisher.
        /// Next Tag: 4
        /// </summary>
        public sealed partial class StickySettings : pb::IMessage<StickySettings> {
          private static readonly pb::MessageParser<StickySettings> _parser = new pb::MessageParser<StickySettings>(() => new StickySettings());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<StickySettings> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[8]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public StickySettings() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public StickySettings(StickySettings other) : this() {
            _hasBits0 = other._hasBits0;
            verticalStickiness_ = other.verticalStickiness_;
            topHorizontalStickiness_ = other.topHorizontalStickiness_;
            bottomHorizontalStickiness_ = other.bottomHorizontalStickiness_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public StickySettings Clone() {
            return new StickySettings(this);
          }

          /// <summary>Field number for the "vertical_stickiness" field.</summary>
          public const int VerticalStickinessFieldNumber = 1;
          private readonly static global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness VerticalStickinessDefaultValue = global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness.UnknownStickiness;

          private global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness verticalStickiness_;
          /// <summary>
          /// Whether the request originated from an ad slot that scrolls along with
          /// the contents of the page vertically.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness VerticalStickiness {
            get { if ((_hasBits0 & 1) != 0) { return verticalStickiness_; } else { return VerticalStickinessDefaultValue; } }
            set {
              _hasBits0 |= 1;
              verticalStickiness_ = value;
            }
          }
          /// <summary>Gets whether the "vertical_stickiness" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasVerticalStickiness {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "vertical_stickiness" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearVerticalStickiness() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "top_horizontal_stickiness" field.</summary>
          public const int TopHorizontalStickinessFieldNumber = 2;
          private readonly static global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness TopHorizontalStickinessDefaultValue = global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness.UnknownStickiness;

          private global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness topHorizontalStickiness_;
          /// <summary>
          /// Whether the request originated from an ad slot that scrolls along with
          /// the contents of the page horizontally, and is located at the top of the
          /// page.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness TopHorizontalStickiness {
            get { if ((_hasBits0 & 2) != 0) { return topHorizontalStickiness_; } else { return TopHorizontalStickinessDefaultValue; } }
            set {
              _hasBits0 |= 2;
              topHorizontalStickiness_ = value;
            }
          }
          /// <summary>Gets whether the "top_horizontal_stickiness" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasTopHorizontalStickiness {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "top_horizontal_stickiness" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearTopHorizontalStickiness() {
            _hasBits0 &= ~2;
          }

          /// <summary>Field number for the "bottom_horizontal_stickiness" field.</summary>
          public const int BottomHorizontalStickinessFieldNumber = 3;
          private readonly static global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness BottomHorizontalStickinessDefaultValue = global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness.UnknownStickiness;

          private global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness bottomHorizontalStickiness_;
          /// <summary>
          /// Whether the request originated from an ad slot that scrolls along with
          /// the contents of the page horizontally, and is located at the bottom of
          /// the page.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness BottomHorizontalStickiness {
            get { if ((_hasBits0 & 4) != 0) { return bottomHorizontalStickiness_; } else { return BottomHorizontalStickinessDefaultValue; } }
            set {
              _hasBits0 |= 4;
              bottomHorizontalStickiness_ = value;
            }
          }
          /// <summary>Gets whether the "bottom_horizontal_stickiness" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasBottomHorizontalStickiness {
            get { return (_hasBits0 & 4) != 0; }
          }
          /// <summary>Clears the value of the "bottom_horizontal_stickiness" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearBottomHorizontalStickiness() {
            _hasBits0 &= ~4;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as StickySettings);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(StickySettings other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (VerticalStickiness != other.VerticalStickiness) return false;
            if (TopHorizontalStickiness != other.TopHorizontalStickiness) return false;
            if (BottomHorizontalStickiness != other.BottomHorizontalStickiness) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasVerticalStickiness) hash ^= VerticalStickiness.GetHashCode();
            if (HasTopHorizontalStickiness) hash ^= TopHorizontalStickiness.GetHashCode();
            if (HasBottomHorizontalStickiness) hash ^= BottomHorizontalStickiness.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasVerticalStickiness) {
              output.WriteRawTag(8);
              output.WriteEnum((int) VerticalStickiness);
            }
            if (HasTopHorizontalStickiness) {
              output.WriteRawTag(16);
              output.WriteEnum((int) TopHorizontalStickiness);
            }
            if (HasBottomHorizontalStickiness) {
              output.WriteRawTag(24);
              output.WriteEnum((int) BottomHorizontalStickiness);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasVerticalStickiness) {
              size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) VerticalStickiness);
            }
            if (HasTopHorizontalStickiness) {
              size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TopHorizontalStickiness);
            }
            if (HasBottomHorizontalStickiness) {
              size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) BottomHorizontalStickiness);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(StickySettings other) {
            if (other == null) {
              return;
            }
            if (other.HasVerticalStickiness) {
              VerticalStickiness = other.VerticalStickiness;
            }
            if (other.HasTopHorizontalStickiness) {
              TopHorizontalStickiness = other.TopHorizontalStickiness;
            }
            if (other.HasBottomHorizontalStickiness) {
              BottomHorizontalStickiness = other.BottomHorizontalStickiness;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  VerticalStickiness = (global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness) input.ReadEnum();
                  break;
                }
                case 16: {
                  TopHorizontalStickiness = (global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness) input.ReadEnum();
                  break;
                }
                case 24: {
                  BottomHorizontalStickiness = (global::BidRequest.Types.AdSlot.Types.StickySettings.Types.Stickiness) input.ReadEnum();
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the StickySettings message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// Specifies the allowable sticky settings values.
            /// </summary>
            public enum Stickiness {
              [pbr::OriginalName("UNKNOWN_STICKINESS")] UnknownStickiness = 0,
              [pbr::OriginalName("IS_STICKY")] IsSticky = 1,
            }

          }
          #endregion

        }

        /// <summary>
        /// Data, opaque to Google and to the publisher, generated by the buyer
        /// within the publisher's mobile application.
        /// </summary>
        public sealed partial class BuyerGeneratedRequestData : pb::IMessage<BuyerGeneratedRequestData> {
          private static readonly pb::MessageParser<BuyerGeneratedRequestData> _parser = new pb::MessageParser<BuyerGeneratedRequestData>(() => new BuyerGeneratedRequestData());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<BuyerGeneratedRequestData> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidRequest.Types.AdSlot.Descriptor.NestedTypes[9]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public BuyerGeneratedRequestData() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public BuyerGeneratedRequestData(BuyerGeneratedRequestData other) : this() {
            data_ = other.data_;
            switch (other.SourceCase) {
              case SourceOneofCase.SourceApp:
                SourceApp = other.SourceApp.Clone();
                break;
            }

            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public BuyerGeneratedRequestData Clone() {
            return new BuyerGeneratedRequestData(this);
          }

          /// <summary>Field number for the "source_app" field.</summary>
          public const int SourceAppFieldNumber = 1;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp SourceApp {
            get { return HasSourceApp ? (global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp) source_ : null; }
            set {
              source_ = value;
              sourceCase_ = value == null ? SourceOneofCase.None : SourceOneofCase.SourceApp;
            }
          }
          /// <summary>Gets whether the "source_app" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasSourceApp {
            get { return sourceCase_ == SourceOneofCase.SourceApp; }
          }
          /// <summary> Clears the value of the oneof if it's currently set to "source_app" </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearSourceApp() {
            if (HasSourceApp) {
              ClearSource();
            }
          }

          /// <summary>Field number for the "data" field.</summary>
          public const int DataFieldNumber = 2;
          private readonly static string DataDefaultValue = "";

          private string data_;
          /// <summary>
          /// Data sent from the buyer's source within the publisher's domain to the
          /// bidder. This data is opaque to the publisher and to Google.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Data {
            get { return data_ ?? DataDefaultValue; }
            set {
              data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "data" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasData {
            get { return data_ != null; }
          }
          /// <summary>Clears the value of the "data" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearData() {
            data_ = null;
          }

          private object source_;
          /// <summary>Enum of possible cases for the "source" oneof.</summary>
          public enum SourceOneofCase {
            None = 0,
            SourceApp = 1,
          }
          private SourceOneofCase sourceCase_ = SourceOneofCase.None;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public SourceOneofCase SourceCase {
            get { return sourceCase_; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearSource() {
            sourceCase_ = SourceOneofCase.None;
            source_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as BuyerGeneratedRequestData);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(BuyerGeneratedRequestData other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (!object.Equals(SourceApp, other.SourceApp)) return false;
            if (Data != other.Data) return false;
            if (SourceCase != other.SourceCase) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasSourceApp) hash ^= SourceApp.GetHashCode();
            if (HasData) hash ^= Data.GetHashCode();
            hash ^= (int) sourceCase_;
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasSourceApp) {
              output.WriteRawTag(10);
              output.WriteMessage(SourceApp);
            }
            if (HasData) {
              output.WriteRawTag(18);
              output.WriteString(Data);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasSourceApp) {
              size += 1 + pb::CodedOutputStream.ComputeMessageSize(SourceApp);
            }
            if (HasData) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(BuyerGeneratedRequestData other) {
            if (other == null) {
              return;
            }
            if (other.HasData) {
              Data = other.Data;
            }
            switch (other.SourceCase) {
              case SourceOneofCase.SourceApp:
                if (SourceApp == null) {
                  SourceApp = new global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp();
                }
                SourceApp.MergeFrom(other.SourceApp);
                break;
            }

            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp subBuilder = new global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Types.SourceApp();
                  if (HasSourceApp) {
                    subBuilder.MergeFrom(SourceApp);
                  }
                  input.ReadMessage(subBuilder);
                  SourceApp = subBuilder;
                  break;
                }
                case 18: {
                  Data = input.ReadString();
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the BuyerGeneratedRequestData message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// Identification for the source of the buyer generated request data when
            /// that source is from within an application.
            /// </summary>
            public sealed partial class SourceApp : pb::IMessage<SourceApp> {
              private static readonly pb::MessageParser<SourceApp> _parser = new pb::MessageParser<SourceApp>(() => new SourceApp());
              private pb::UnknownFieldSet _unknownFields;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pb::MessageParser<SourceApp> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::BidRequest.Types.AdSlot.Types.BuyerGeneratedRequestData.Descriptor.NestedTypes[0]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public SourceApp() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public SourceApp(SourceApp other) : this() {
                id_ = other.id_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public SourceApp Clone() {
                return new SourceApp(this);
              }

              /// <summary>Field number for the "id" field.</summary>
              public const int IdFieldNumber = 1;
              private readonly static string IdDefaultValue = "";

              private string id_;
              /// <summary>
              /// Identifier for the SDK that generated this data. It will match the id
              /// in mobile.installed_sdk.id.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public string Id {
                get { return id_ ?? IdDefaultValue; }
                set {
                  id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                }
              }
              /// <summary>Gets whether the "id" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasId {
                get { return id_ != null; }
              }
              /// <summary>Clears the value of the "id" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearId() {
                id_ = null;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override bool Equals(object other) {
                return Equals(other as SourceApp);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Equals(SourceApp other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if (Id != other.Id) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override int GetHashCode() {
                int hash = 1;
                if (HasId) hash ^= Id.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void WriteTo(pb::CodedOutputStream output) {
                if (HasId) {
                  output.WriteRawTag(10);
                  output.WriteString(Id);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int CalculateSize() {
                int size = 0;
                if (HasId) {
                  size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(SourceApp other) {
                if (other == null) {
                  return;
                }
                if (other.HasId) {
                  Id = other.Id;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(pb::CodedInputStream input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 10: {
                      Id = input.ReadString();
                      break;
                    }
                  }
                }
              }

            }

          }
          #endregion

        }

      }
      #endregion

    }

    /// <summary>
    /// Feedback on bids submitted in previous responses. This is only set if
    /// real-time feedback is enabled for your bidder. Please contact your account
    /// manager if you wish to enable real-time feedback.
    /// </summary>
    public sealed partial class BidResponseFeedback : pb::IMessage<BidResponseFeedback> {
      private static readonly pb::MessageParser<BidResponseFeedback> _parser = new pb::MessageParser<BidResponseFeedback>(() => new BidResponseFeedback());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<BidResponseFeedback> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidRequest.Descriptor.NestedTypes[9]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public BidResponseFeedback() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public BidResponseFeedback(BidResponseFeedback other) : this() {
        _hasBits0 = other._hasBits0;
        requestId_ = other.requestId_;
        creativeIndex_ = other.creativeIndex_;
        creativeStatusCode_ = other.creativeStatusCode_;
        cpmMicros_ = other.cpmMicros_;
        minimumBidToWin_ = other.minimumBidToWin_;
        sampledMediationCpmAheadOfAuctionWinner_ = other.sampledMediationCpmAheadOfAuctionWinner_;
        eventNotificationToken_ = other.eventNotificationToken_;
        buyerCreativeId_ = other.buyerCreativeId_;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public BidResponseFeedback Clone() {
        return new BidResponseFeedback(this);
      }

      /// <summary>Field number for the "request_id" field.</summary>
      public const int RequestIdFieldNumber = 1;
      private readonly static pb::ByteString RequestIdDefaultValue = pb::ByteString.Empty;

      private pb::ByteString requestId_;
      /// <summary>
      /// The unique id from BidRequest.id
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString RequestId {
        get { return requestId_ ?? RequestIdDefaultValue; }
        set {
          requestId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "request_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasRequestId {
        get { return requestId_ != null; }
      }
      /// <summary>Clears the value of the "request_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearRequestId() {
        requestId_ = null;
      }

      /// <summary>Field number for the "creative_index" field.</summary>
      public const int CreativeIndexFieldNumber = 2;
      private readonly static int CreativeIndexDefaultValue = 0;

      private int creativeIndex_;
      /// <summary>
      /// The index of the BidResponse_Ad if there was more than one. The index
      /// starts at zero for the first creative.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CreativeIndex {
        get { if ((_hasBits0 & 1) != 0) { return creativeIndex_; } else { return CreativeIndexDefaultValue; } }
        set {
          _hasBits0 |= 1;
          creativeIndex_ = value;
        }
      }
      /// <summary>Gets whether the "creative_index" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasCreativeIndex {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "creative_index" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearCreativeIndex() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "creative_status_code" field.</summary>
      public const int CreativeStatusCodeFieldNumber = 3;
      private readonly static int CreativeStatusCodeDefaultValue = 0;

      private int creativeStatusCode_;
      /// <summary>
      /// The status code for the ad. See creative-status-codes.txt in the
      /// technical documentation for a list of ids.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CreativeStatusCode {
        get { if ((_hasBits0 & 2) != 0) { return creativeStatusCode_; } else { return CreativeStatusCodeDefaultValue; } }
        set {
          _hasBits0 |= 2;
          creativeStatusCode_ = value;
        }
      }
      /// <summary>Gets whether the "creative_status_code" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasCreativeStatusCode {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "creative_status_code" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearCreativeStatusCode() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "cpm_micros" field.</summary>
      public const int CpmMicrosFieldNumber = 4;
      private readonly static long CpmMicrosDefaultValue = 0L;

      private long cpmMicros_;
      /// <summary>
      /// If the bid won the auction, this is the price paid in your account
      /// currency.  If the bid participated in the auction but was out-bid, this
      /// is the CPM that should have been exceeded in order to win.  This is not
      /// set if the bid was filtered prior to the auction, if the publisher or
      /// winning bidder has opted out of price feedback or if your account has
      /// opted out of sharing winning prices with other bidders. For first price
      /// auctions, minimum_bid_to_win is also populated.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long CpmMicros {
        get { if ((_hasBits0 & 4) != 0) { return cpmMicros_; } else { return CpmMicrosDefaultValue; } }
        set {
          _hasBits0 |= 4;
          cpmMicros_ = value;
        }
      }
      /// <summary>Gets whether the "cpm_micros" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasCpmMicros {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "cpm_micros" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearCpmMicros() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "minimum_bid_to_win" field.</summary>
      public const int MinimumBidToWinFieldNumber = 7;
      private readonly static long MinimumBidToWinDefaultValue = 0L;

      private long minimumBidToWin_;
      /// <summary>
      /// The minimum bid value necessary to have won the auction, in micros of
      /// your account currency. If your bid won the auction, this is the second
      /// highest bid that was not filtered (including the floor price). If your
      /// bid did not win the auction, this is the winning candidate's bid. This
      /// field will only be populated if your bid participated in a first-price
      /// auction, and will not be populated if your bid was filtered prior to the
      /// auction.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long MinimumBidToWin {
        get { if ((_hasBits0 & 8) != 0) { return minimumBidToWin_; } else { return MinimumBidToWinDefaultValue; } }
        set {
          _hasBits0 |= 8;
          minimumBidToWin_ = value;
        }
      }
      /// <summary>Gets whether the "minimum_bid_to_win" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasMinimumBidToWin {
        get { return (_hasBits0 & 8) != 0; }
      }
      /// <summary>Clears the value of the "minimum_bid_to_win" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearMinimumBidToWin() {
        _hasBits0 &= ~8;
      }

      /// <summary>Field number for the "sampled_mediation_cpm_ahead_of_auction_winner" field.</summary>
      public const int SampledMediationCpmAheadOfAuctionWinnerFieldNumber = 10;
      private readonly static long SampledMediationCpmAheadOfAuctionWinnerDefaultValue = 0L;

      private long sampledMediationCpmAheadOfAuctionWinner_;
      /// <summary>
      /// When a publisher uses an RTB auction and waterfall-based SDK mediation on
      /// the same query, the winner of the real-time auction must also compete in
      /// a mediation waterfall (which is ordered by price) to win the impression.
      /// If the bid participated in the auction and there was no waterfall, the
      /// value of this field is 0. If the bid participated in the auction and
      /// there was a waterfall, the value of this field is a price representing a
      /// sample bid from the eligible mediation networks that were higher than the
      /// auction winner, weighted by expected fill rate.  This field can be used
      /// in conjunction with minimum_bid_to_win to train bidding models. The CPM
      /// is in micros of your account currency.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long SampledMediationCpmAheadOfAuctionWinner {
        get { if ((_hasBits0 & 16) != 0) { return sampledMediationCpmAheadOfAuctionWinner_; } else { return SampledMediationCpmAheadOfAuctionWinnerDefaultValue; } }
        set {
          _hasBits0 |= 16;
          sampledMediationCpmAheadOfAuctionWinner_ = value;
        }
      }
      /// <summary>Gets whether the "sampled_mediation_cpm_ahead_of_auction_winner" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasSampledMediationCpmAheadOfAuctionWinner {
        get { return (_hasBits0 & 16) != 0; }
      }
      /// <summary>Clears the value of the "sampled_mediation_cpm_ahead_of_auction_winner" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearSampledMediationCpmAheadOfAuctionWinner() {
        _hasBits0 &= ~16;
      }

      /// <summary>Field number for the "event_notification_token" field.</summary>
      public const int EventNotificationTokenFieldNumber = 5;
      private readonly static pb::ByteString EventNotificationTokenDefaultValue = pb::ByteString.Empty;

      private pb::ByteString eventNotificationToken_;
      /// <summary>
      /// Event notification token that was included in the bid response.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString EventNotificationToken {
        get { return eventNotificationToken_ ?? EventNotificationTokenDefaultValue; }
        set {
          eventNotificationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "event_notification_token" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasEventNotificationToken {
        get { return eventNotificationToken_ != null; }
      }
      /// <summary>Clears the value of the "event_notification_token" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearEventNotificationToken() {
        eventNotificationToken_ = null;
      }

      /// <summary>Field number for the "buyer_creative_id" field.</summary>
      public const int BuyerCreativeIdFieldNumber = 6;
      private readonly static string BuyerCreativeIdDefaultValue = "";

      private string buyerCreativeId_;
      /// <summary>
      /// Buyer creative ID that was included in the bid response.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string BuyerCreativeId {
        get { return buyerCreativeId_ ?? BuyerCreativeIdDefaultValue; }
        set {
          buyerCreativeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "buyer_creative_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBuyerCreativeId {
        get { return buyerCreativeId_ != null; }
      }
      /// <summary>Clears the value of the "buyer_creative_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBuyerCreativeId() {
        buyerCreativeId_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as BidResponseFeedback);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(BidResponseFeedback other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (RequestId != other.RequestId) return false;
        if (CreativeIndex != other.CreativeIndex) return false;
        if (CreativeStatusCode != other.CreativeStatusCode) return false;
        if (CpmMicros != other.CpmMicros) return false;
        if (MinimumBidToWin != other.MinimumBidToWin) return false;
        if (SampledMediationCpmAheadOfAuctionWinner != other.SampledMediationCpmAheadOfAuctionWinner) return false;
        if (EventNotificationToken != other.EventNotificationToken) return false;
        if (BuyerCreativeId != other.BuyerCreativeId) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasRequestId) hash ^= RequestId.GetHashCode();
        if (HasCreativeIndex) hash ^= CreativeIndex.GetHashCode();
        if (HasCreativeStatusCode) hash ^= CreativeStatusCode.GetHashCode();
        if (HasCpmMicros) hash ^= CpmMicros.GetHashCode();
        if (HasMinimumBidToWin) hash ^= MinimumBidToWin.GetHashCode();
        if (HasSampledMediationCpmAheadOfAuctionWinner) hash ^= SampledMediationCpmAheadOfAuctionWinner.GetHashCode();
        if (HasEventNotificationToken) hash ^= EventNotificationToken.GetHashCode();
        if (HasBuyerCreativeId) hash ^= BuyerCreativeId.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasRequestId) {
          output.WriteRawTag(10);
          output.WriteBytes(RequestId);
        }
        if (HasCreativeIndex) {
          output.WriteRawTag(16);
          output.WriteInt32(CreativeIndex);
        }
        if (HasCreativeStatusCode) {
          output.WriteRawTag(24);
          output.WriteInt32(CreativeStatusCode);
        }
        if (HasCpmMicros) {
          output.WriteRawTag(32);
          output.WriteInt64(CpmMicros);
        }
        if (HasEventNotificationToken) {
          output.WriteRawTag(42);
          output.WriteBytes(EventNotificationToken);
        }
        if (HasBuyerCreativeId) {
          output.WriteRawTag(50);
          output.WriteString(BuyerCreativeId);
        }
        if (HasMinimumBidToWin) {
          output.WriteRawTag(56);
          output.WriteInt64(MinimumBidToWin);
        }
        if (HasSampledMediationCpmAheadOfAuctionWinner) {
          output.WriteRawTag(80);
          output.WriteInt64(SampledMediationCpmAheadOfAuctionWinner);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasRequestId) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(RequestId);
        }
        if (HasCreativeIndex) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreativeIndex);
        }
        if (HasCreativeStatusCode) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(CreativeStatusCode);
        }
        if (HasCpmMicros) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(CpmMicros);
        }
        if (HasMinimumBidToWin) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinimumBidToWin);
        }
        if (HasSampledMediationCpmAheadOfAuctionWinner) {
          size += 1 + pb::CodedOutputStream.ComputeInt64Size(SampledMediationCpmAheadOfAuctionWinner);
        }
        if (HasEventNotificationToken) {
          size += 1 + pb::CodedOutputStream.ComputeBytesSize(EventNotificationToken);
        }
        if (HasBuyerCreativeId) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyerCreativeId);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(BidResponseFeedback other) {
        if (other == null) {
          return;
        }
        if (other.HasRequestId) {
          RequestId = other.RequestId;
        }
        if (other.HasCreativeIndex) {
          CreativeIndex = other.CreativeIndex;
        }
        if (other.HasCreativeStatusCode) {
          CreativeStatusCode = other.CreativeStatusCode;
        }
        if (other.HasCpmMicros) {
          CpmMicros = other.CpmMicros;
        }
        if (other.HasMinimumBidToWin) {
          MinimumBidToWin = other.MinimumBidToWin;
        }
        if (other.HasSampledMediationCpmAheadOfAuctionWinner) {
          SampledMediationCpmAheadOfAuctionWinner = other.SampledMediationCpmAheadOfAuctionWinner;
        }
        if (other.HasEventNotificationToken) {
          EventNotificationToken = other.EventNotificationToken;
        }
        if (other.HasBuyerCreativeId) {
          BuyerCreativeId = other.BuyerCreativeId;
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              RequestId = input.ReadBytes();
              break;
            }
            case 16: {
              CreativeIndex = input.ReadInt32();
              break;
            }
            case 24: {
              CreativeStatusCode = input.ReadInt32();
              break;
            }
            case 32: {
              CpmMicros = input.ReadInt64();
              break;
            }
            case 42: {
              EventNotificationToken = input.ReadBytes();
              break;
            }
            case 50: {
              BuyerCreativeId = input.ReadString();
              break;
            }
            case 56: {
              MinimumBidToWin = input.ReadInt64();
              break;
            }
            case 80: {
              SampledMediationCpmAheadOfAuctionWinner = input.ReadInt64();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

/// <summary>
/// This is the message that you return in response to a BidRequest. You may
/// specify zero or more ads. For each ad, you should provide an ad slot on
/// which the ad can run. An ad slot is identified by the AdSlot.id from the
/// BidRequest. If you do not wish to bid, submit a response with no ads and
/// with only the processing_time_ms set.
/// </summary>
public sealed partial class BidResponse : pb::IMessage<BidResponse> {
  private static readonly pb::MessageParser<BidResponse> _parser = new pb::MessageParser<BidResponse>(() => new BidResponse());
  private pb::UnknownFieldSet _unknownFields;
  private int _hasBits0;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BidResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::GRTBReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BidResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BidResponse(BidResponse other) : this() {
    _hasBits0 = other._hasBits0;
    ad_ = other.ad_.Clone();
    debugString_ = other.debugString_;
    processingTimeMs_ = other.processingTimeMs_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BidResponse Clone() {
    return new BidResponse(this);
  }

  /// <summary>Field number for the "ad" field.</summary>
  public const int AdFieldNumber = 2;
  private static readonly pb::FieldCodec<global::BidResponse.Types.Ad> _repeated_ad_codec
      = pb::FieldCodec.ForMessage(18, global::BidResponse.Types.Ad.Parser);
  private readonly pbc::RepeatedField<global::BidResponse.Types.Ad> ad_ = new pbc::RepeatedField<global::BidResponse.Types.Ad>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::BidResponse.Types.Ad> Ad {
    get { return ad_; }
  }

  /// <summary>Field number for the "debug_string" field.</summary>
  public const int DebugStringFieldNumber = 5;
  private readonly static string DebugStringDefaultValue = "";

  private string debugString_;
  /// <summary>
  /// If is_test was set in the BidRequest, then you may return debug information
  /// as plain text in this field. Please do not set this field under normal
  /// conditions, or set it to values longer than 100 characters. You should only
  /// use this field when asked to do so as part of troubleshooting particular
  /// problems.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DebugString {
    get { return debugString_ ?? DebugStringDefaultValue; }
    set {
      debugString_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }
  /// <summary>Gets whether the "debug_string" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasDebugString {
    get { return debugString_ != null; }
  }
  /// <summary>Clears the value of the "debug_string" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearDebugString() {
    debugString_ = null;
  }

  /// <summary>Field number for the "processing_time_ms" field.</summary>
  public const int ProcessingTimeMsFieldNumber = 4;
  private readonly static int ProcessingTimeMsDefaultValue = 0;

  private int processingTimeMs_;
  /// <summary>
  /// Please set this to the processing time in milliseconds from when you
  /// received the request to when you returned the response.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int ProcessingTimeMs {
    get { if ((_hasBits0 & 1) != 0) { return processingTimeMs_; } else { return ProcessingTimeMsDefaultValue; } }
    set {
      _hasBits0 |= 1;
      processingTimeMs_ = value;
    }
  }
  /// <summary>Gets whether the "processing_time_ms" field is set</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool HasProcessingTimeMs {
    get { return (_hasBits0 & 1) != 0; }
  }
  /// <summary>Clears the value of the "processing_time_ms" field</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearProcessingTimeMs() {
    _hasBits0 &= ~1;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BidResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BidResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!ad_.Equals(other.ad_)) return false;
    if (DebugString != other.DebugString) return false;
    if (ProcessingTimeMs != other.ProcessingTimeMs) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= ad_.GetHashCode();
    if (HasDebugString) hash ^= DebugString.GetHashCode();
    if (HasProcessingTimeMs) hash ^= ProcessingTimeMs.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    ad_.WriteTo(output, _repeated_ad_codec);
    if (HasProcessingTimeMs) {
      output.WriteRawTag(32);
      output.WriteInt32(ProcessingTimeMs);
    }
    if (HasDebugString) {
      output.WriteRawTag(42);
      output.WriteString(DebugString);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += ad_.CalculateSize(_repeated_ad_codec);
    if (HasDebugString) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DebugString);
    }
    if (HasProcessingTimeMs) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProcessingTimeMs);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BidResponse other) {
    if (other == null) {
      return;
    }
    ad_.Add(other.ad_);
    if (other.HasDebugString) {
      DebugString = other.DebugString;
    }
    if (other.HasProcessingTimeMs) {
      ProcessingTimeMs = other.ProcessingTimeMs;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 18: {
          ad_.AddEntriesFrom(input, _repeated_ad_codec);
          break;
        }
        case 32: {
          ProcessingTimeMs = input.ReadInt32();
          break;
        }
        case 42: {
          DebugString = input.ReadString();
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the BidResponse message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class Ad : pb::IMessage<Ad> {
      private static readonly pb::MessageParser<Ad> _parser = new pb::MessageParser<Ad>(() => new Ad());
      private pb::UnknownFieldSet _unknownFields;
      private int _hasBits0;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<Ad> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::BidResponse.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Ad() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Ad(Ad other) : this() {
        _hasBits0 = other._hasBits0;
        eventNotificationToken_ = other.eventNotificationToken_;
        buyerCreativeId_ = other.buyerCreativeId_;
        htmlSnippet_ = other.htmlSnippet_;
        videoUrl_ = other.videoUrl_;
        videoVastXml_ = other.videoVastXml_;
        ampAdUrl_ = other.ampAdUrl_;
        nativeAd_ = other.HasNativeAd ? other.nativeAd_.Clone() : null;
        clickThroughUrl_ = other.clickThroughUrl_.Clone();
        vendorType_ = other.vendorType_.Clone();
        attribute_ = other.attribute_.Clone();
        category_ = other.category_.Clone();
        restrictedCategory_ = other.restrictedCategory_.Clone();
        advertiserName_ = other.advertiserName_.Clone();
        bidderName_ = other.bidderName_;
        width_ = other.width_;
        height_ = other.height_;
        agencyId_ = other.agencyId_;
        adslot_ = other.adslot_.Clone();
        impressionTrackingUrl_ = other.impressionTrackingUrl_.Clone();
        adChoicesDestinationUrl_ = other.adChoicesDestinationUrl_;
        impressionTrackingResource_ = other.impressionTrackingResource_.Clone();
        sdkRenderedAd_ = other.HasSdkRenderedAd ? other.sdkRenderedAd_.Clone() : null;
        _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public Ad Clone() {
        return new Ad(this);
      }

      /// <summary>Field number for the "event_notification_token" field.</summary>
      public const int EventNotificationTokenFieldNumber = 25;
      private readonly static pb::ByteString EventNotificationTokenDefaultValue = pb::ByteString.Empty;

      private pb::ByteString eventNotificationToken_;
      /// <summary>
      /// The event notification token is sent to AdX by bidders for
      /// troubleshooting. AdX will include the token in real-time feedback for the
      /// bid. The content of the token will not be logged by AdX. AdX will ignore
      /// any token longer than 64 bytes.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pb::ByteString EventNotificationToken {
        get { return eventNotificationToken_ ?? EventNotificationTokenDefaultValue; }
        set {
          eventNotificationToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "event_notification_token" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasEventNotificationToken {
        get { return eventNotificationToken_ != null; }
      }
      /// <summary>Clears the value of the "event_notification_token" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearEventNotificationToken() {
        eventNotificationToken_ = null;
      }

      /// <summary>Field number for the "buyer_creative_id" field.</summary>
      public const int BuyerCreativeIdFieldNumber = 10;
      private readonly static string BuyerCreativeIdDefaultValue = "";

      private string buyerCreativeId_;
      /// <summary>
      /// A unique identifier chosen by you for the creative in this response.
      /// This must always be set, must be limited to at most 64 bytes, and must be
      /// a valid UTF8 string. Every buyer_creative_id you use must always be
      /// associated with the same creative. This field is used to communicate
      /// approval statuses when issues are found. Do not specify the same id for
      /// different creatives, or all creatives will be disapproved if a problem
      /// with a single creative is found. Do not specify different ids for the
      /// same creative in different responses or no creatives will be served since
      /// approval status is assigned on a per-id basis.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string BuyerCreativeId {
        get { return buyerCreativeId_ ?? BuyerCreativeIdDefaultValue; }
        set {
          buyerCreativeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "buyer_creative_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBuyerCreativeId {
        get { return buyerCreativeId_ != null; }
      }
      /// <summary>Clears the value of the "buyer_creative_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBuyerCreativeId() {
        buyerCreativeId_ = null;
      }

      /// <summary>Field number for the "html_snippet" field.</summary>
      public const int HtmlSnippetFieldNumber = 1;
      private readonly static string HtmlSnippetDefaultValue = "";

      private string htmlSnippet_;
      /// <summary>
      /// The HTML snippet that will be placed on the web page to display the ad.
      /// Please use BidResponse.Ad.AdSlot.billing_id to indicate which billing id
      /// this snippet is attributed to.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string HtmlSnippet {
        get { return htmlSnippet_ ?? HtmlSnippetDefaultValue; }
        set {
          htmlSnippet_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "html_snippet" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasHtmlSnippet {
        get { return htmlSnippet_ != null; }
      }
      /// <summary>Clears the value of the "html_snippet" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearHtmlSnippet() {
        htmlSnippet_ = null;
      }

      /// <summary>Field number for the "video_url" field.</summary>
      public const int VideoUrlFieldNumber = 9;
      private readonly static string VideoUrlDefaultValue = "";

      private string videoUrl_;
      /// <summary>
      /// The URL to fetch a video ad. The URL should return an XML response that
      /// conforms to the VAST 2.0 or 3.0 standard. Please use
      /// BidResponse.Ad.AdSlot.billing_id to indicate which billing id to
      /// attribute this ad to. Only one of the following should be set:
      /// html_snippet, video_url. Only set this field if the BidRequest is for an
      /// in-video ad (BidRequest.video is present).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string VideoUrl {
        get { return videoUrl_ ?? VideoUrlDefaultValue; }
        set {
          videoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "video_url" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasVideoUrl {
        get { return videoUrl_ != null; }
      }
      /// <summary>Clears the value of the "video_url" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearVideoUrl() {
        videoUrl_ = null;
      }

      /// <summary>Field number for the "video_vast_xml" field.</summary>
      public const int VideoVastXmlFieldNumber = 24;
      private readonly static string VideoVastXmlDefaultValue = "";

      private string videoVastXml_;
      /// <summary>
      /// The VAST document to be returned. This document should conform to the
      /// VAST 2.0 or 3.0 standard. Please use BidResponse.Ad.AdSlot.billing_id to
      /// indicate which billing ID to attribute this ad to.
      /// Only set this field if the BidRequest is for an in-video ad and the
      /// response is VAST XML.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string VideoVastXml {
        get { return videoVastXml_ ?? VideoVastXmlDefaultValue; }
        set {
          videoVastXml_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "video_vast_xml" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasVideoVastXml {
        get { return videoVastXml_ != null; }
      }
      /// <summary>Clears the value of the "video_vast_xml" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearVideoVastXml() {
        videoVastXml_ = null;
      }

      /// <summary>Field number for the "amp_ad_url" field.</summary>
      public const int AmpAdUrlFieldNumber = 23;
      private readonly static string AmpAdUrlDefaultValue = "";

      private string ampAdUrl_;
      /// <summary>
      /// The URL to fetch an AMPHTML ad. Only one of the following should be set:
      /// html_snippet, video_url, amp_ad_url, native_ad.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string AmpAdUrl {
        get { return ampAdUrl_ ?? AmpAdUrlDefaultValue; }
        set {
          ampAdUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "amp_ad_url" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAmpAdUrl {
        get { return ampAdUrl_ != null; }
      }
      /// <summary>Clears the value of the "amp_ad_url" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAmpAdUrl() {
        ampAdUrl_ = null;
      }

      /// <summary>Field number for the "native_ad" field.</summary>
      public const int NativeAdFieldNumber = 18;
      private global::BidResponse.Types.Ad.Types.NativeAd nativeAd_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidResponse.Types.Ad.Types.NativeAd NativeAd {
        get { return nativeAd_; }
        set {
          nativeAd_ = value;
        }
      }
      /// <summary>Gets whether the native_ad field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasNativeAd {
        get { return nativeAd_ != null; }
      }
      /// <summary>Clears the value of the native_ad field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearNativeAd() {
        nativeAd_ = null;
      }

      /// <summary>Field number for the "click_through_url" field.</summary>
      public const int ClickThroughUrlFieldNumber = 4;
      private static readonly pb::FieldCodec<string> _repeated_clickThroughUrl_codec
          = pb::FieldCodec.ForString(34);
      private readonly pbc::RepeatedField<string> clickThroughUrl_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// The set of destination URLs for the snippet. This includes the URLs that
      /// the user will go to if they click on the displayed ad, and any URLs that
      /// are visible in the rendered ad. Do not include intermediate calls to the
      /// adserver that are unrelated to the inal landing page. A BidResponse that
      /// returns a snippet or video ad but declares no click_through_url will be
      /// discarded. Only set this field if html_snippet or video_url or native_ad
      /// are set. This data is used as a destination URL declaration, for example
      /// for post-filtering of publisher-blocked URLs or ad categorization.
      ///
      /// For non-native ads, it is not used for click tracking or any
      /// other ad functionality; it is only used as a destination URL
      /// declaration.
      ///
      /// For native ads, if NativeAd.click_link_url is not set, the first
      /// value of click_through_url is used to direct the user to the landing
      /// page. In addition, all values are used as destination
      /// URL declarations (similar to the non-native case).
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> ClickThroughUrl {
        get { return clickThroughUrl_; }
      }

      /// <summary>Field number for the "vendor_type" field.</summary>
      public const int VendorTypeFieldNumber = 5;
      private static readonly pb::FieldCodec<int> _repeated_vendorType_codec
          = pb::FieldCodec.ForInt32(40);
      private readonly pbc::RepeatedField<int> vendorType_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// All vendor types for the ads that may be shown from this snippet. You
      /// should only declare vendor ids listed in the vendors.txt file in the
      /// technical documentation. We will check to ensure that the vendors you
      /// declare are in the allowed_vendor_type list sent in the BidRequest for
      /// AdX publishers.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> VendorType {
        get { return vendorType_; }
      }

      /// <summary>Field number for the "attribute" field.</summary>
      public const int AttributeFieldNumber = 6;
      private static readonly pb::FieldCodec<int> _repeated_attribute_codec
          = pb::FieldCodec.ForInt32(48);
      private readonly pbc::RepeatedField<int> attribute_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// All attributes for the ads that may be shown from this snippet. See
      /// buyer-declarable-creative-attributes.txt in the technical documentation
      /// for a list of ids. We will check to ensure none of these attributes are
      /// in the excluded_attribute list in the BidRequest.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> Attribute {
        get { return attribute_; }
      }

      /// <summary>Field number for the "category" field.</summary>
      public const int CategoryFieldNumber = 7;
      private static readonly pb::FieldCodec<int> _repeated_category_codec
          = pb::FieldCodec.ForInt32(56);
      private readonly pbc::RepeatedField<int> category_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// All sensitive categories for the ads that may be shown from this snippet.
      /// See ad-sensitive-categories.txt in the technical documentation for a list
      /// of ids. We will check to ensure none of these categories were in the
      /// excluded_sensitive_category list in the BidRequest.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> Category {
        get { return category_; }
      }

      /// <summary>Field number for the "restricted_category" field.</summary>
      public const int RestrictedCategoryFieldNumber = 17;
      private static readonly pb::FieldCodec<int> _repeated_restrictedCategory_codec
          = pb::FieldCodec.ForInt32(136);
      private readonly pbc::RepeatedField<int> restrictedCategory_ = new pbc::RepeatedField<int>();
      /// <summary>
      /// All restricted categories for the ads that may be shown from this
      /// snippet. See ad-restricted-categories.txt in the technical documentation
      /// for a list of ids. We will check to ensure these categories were listed
      /// in the allowed_restricted_category list in the BidRequest. If you are
      /// bidding with ads in restricted categories you MUST ALWAYS declare them
      /// here.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<int> RestrictedCategory {
        get { return restrictedCategory_; }
      }

      /// <summary>Field number for the "advertiser_name" field.</summary>
      public const int AdvertiserNameFieldNumber = 11;
      private static readonly pb::FieldCodec<string> _repeated_advertiserName_codec
          = pb::FieldCodec.ForString(90);
      private readonly pbc::RepeatedField<string> advertiserName_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// All names of the ad's advertisers.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> AdvertiserName {
        get { return advertiserName_; }
      }

      /// <summary>Field number for the "bidder_name" field.</summary>
      public const int BidderNameFieldNumber = 22;
      private readonly static string BidderNameDefaultValue = "";

      private string bidderName_;
      /// <summary>
      /// For exchange bidders (third party exchanges doing real-time bidding on
      /// DFP), the name of the bidder that the exchange called to provide the ad.
      /// This is arbitrary UTF8 text but should be sufficient to identify the
      /// bidder and should be set consistently to the same value for the same
      /// bidder.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string BidderName {
        get { return bidderName_ ?? BidderNameDefaultValue; }
        set {
          bidderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "bidder_name" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasBidderName {
        get { return bidderName_ != null; }
      }
      /// <summary>Clears the value of the "bidder_name" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearBidderName() {
        bidderName_ = null;
      }

      /// <summary>Field number for the "width" field.</summary>
      public const int WidthFieldNumber = 14;
      private readonly static int WidthDefaultValue = 0;

      private int width_;
      /// <summary>
      /// The width and the height in pixels of the ad. Setting these is optional.
      /// However, these must be set if the bid BidRequest.AdSlot has more than one
      /// width and height or if BidRequest.Mobile.is_interstitial_request is true.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Width {
        get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
        set {
          _hasBits0 |= 1;
          width_ = value;
        }
      }
      /// <summary>Gets whether the "width" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasWidth {
        get { return (_hasBits0 & 1) != 0; }
      }
      /// <summary>Clears the value of the "width" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearWidth() {
        _hasBits0 &= ~1;
      }

      /// <summary>Field number for the "height" field.</summary>
      public const int HeightFieldNumber = 15;
      private readonly static int HeightDefaultValue = 0;

      private int height_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int Height {
        get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
        set {
          _hasBits0 |= 2;
          height_ = value;
        }
      }
      /// <summary>Gets whether the "height" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasHeight {
        get { return (_hasBits0 & 2) != 0; }
      }
      /// <summary>Clears the value of the "height" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearHeight() {
        _hasBits0 &= ~2;
      }

      /// <summary>Field number for the "agency_id" field.</summary>
      public const int AgencyIdFieldNumber = 16;
      private readonly static long AgencyIdDefaultValue = 0L;

      private long agencyId_;
      /// <summary>
      /// The Agency associated with this ad. See agencies.txt file in the
      /// technical documentation for a list of ids. If this ad has no associated
      /// agency then the value NONE (agency_id: 1) should be used rather than
      /// leaving this field unset.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public long AgencyId {
        get { if ((_hasBits0 & 4) != 0) { return agencyId_; } else { return AgencyIdDefaultValue; } }
        set {
          _hasBits0 |= 4;
          agencyId_ = value;
        }
      }
      /// <summary>Gets whether the "agency_id" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAgencyId {
        get { return (_hasBits0 & 4) != 0; }
      }
      /// <summary>Clears the value of the "agency_id" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAgencyId() {
        _hasBits0 &= ~4;
      }

      /// <summary>Field number for the "adslot" field.</summary>
      public const int AdslotFieldNumber = 3;
      private static readonly pb::FieldCodec<global::BidResponse.Types.Ad.Types.AdSlot> _repeated_adslot_codec
          = pb::FieldCodec.ForMessage(26, global::BidResponse.Types.Ad.Types.AdSlot.Parser);
      private readonly pbc::RepeatedField<global::BidResponse.Types.Ad.Types.AdSlot> adslot_ = new pbc::RepeatedField<global::BidResponse.Types.Ad.Types.AdSlot>();
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidResponse.Types.Ad.Types.AdSlot> Adslot {
        get { return adslot_; }
      }

      /// <summary>Field number for the "impression_tracking_url" field.</summary>
      public const int ImpressionTrackingUrlFieldNumber = 19;
      private static readonly pb::FieldCodec<string> _repeated_impressionTrackingUrl_codec
          = pb::FieldCodec.ForString(154);
      private readonly pbc::RepeatedField<string> impressionTrackingUrl_ = new pbc::RepeatedField<string>();
      /// <summary>
      /// The URLs to call when the impression is rendered. This is supported for
      /// all inventory types and all formats except for VAST video.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<string> ImpressionTrackingUrl {
        get { return impressionTrackingUrl_; }
      }

      /// <summary>Field number for the "ad_choices_destination_url" field.</summary>
      public const int AdChoicesDestinationUrlFieldNumber = 21;
      private readonly static string AdChoicesDestinationUrlDefaultValue = "";

      private string adChoicesDestinationUrl_;
      /// <summary>
      /// Link to ad preferences page. This is only supported for native ads.
      /// If present, a standard AdChoices icon is added to the native creative and
      /// linked to this URL.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string AdChoicesDestinationUrl {
        get { return adChoicesDestinationUrl_ ?? AdChoicesDestinationUrlDefaultValue; }
        set {
          adChoicesDestinationUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }
      /// <summary>Gets whether the "ad_choices_destination_url" field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasAdChoicesDestinationUrl {
        get { return adChoicesDestinationUrl_ != null; }
      }
      /// <summary>Clears the value of the "ad_choices_destination_url" field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearAdChoicesDestinationUrl() {
        adChoicesDestinationUrl_ = null;
      }

      /// <summary>Field number for the "impression_tracking_resource" field.</summary>
      public const int ImpressionTrackingResourceFieldNumber = 26;
      private static readonly pb::FieldCodec<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource> _repeated_impressionTrackingResource_codec
          = pb::FieldCodec.ForMessage(210, global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Parser);
      private readonly pbc::RepeatedField<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource> impressionTrackingResource_ = new pbc::RepeatedField<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource>();
      /// <summary>
      /// Resources to invoke when the impression is rendered. This is supported
      /// for native and banner formats only and explicitly whitelisted scripts
      /// only.
      /// </summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public pbc::RepeatedField<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource> ImpressionTrackingResource {
        get { return impressionTrackingResource_; }
      }

      /// <summary>Field number for the "sdk_rendered_ad" field.</summary>
      public const int SdkRenderedAdFieldNumber = 27;
      private global::BidResponse.Types.Ad.Types.SdkRenderedAd sdkRenderedAd_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public global::BidResponse.Types.Ad.Types.SdkRenderedAd SdkRenderedAd {
        get { return sdkRenderedAd_; }
        set {
          sdkRenderedAd_ = value;
        }
      }
      /// <summary>Gets whether the sdk_rendered_ad field is set</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool HasSdkRenderedAd {
        get { return sdkRenderedAd_ != null; }
      }
      /// <summary>Clears the value of the sdk_rendered_ad field</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void ClearSdkRenderedAd() {
        sdkRenderedAd_ = null;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as Ad);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(Ad other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (EventNotificationToken != other.EventNotificationToken) return false;
        if (BuyerCreativeId != other.BuyerCreativeId) return false;
        if (HtmlSnippet != other.HtmlSnippet) return false;
        if (VideoUrl != other.VideoUrl) return false;
        if (VideoVastXml != other.VideoVastXml) return false;
        if (AmpAdUrl != other.AmpAdUrl) return false;
        if (!object.Equals(NativeAd, other.NativeAd)) return false;
        if(!clickThroughUrl_.Equals(other.clickThroughUrl_)) return false;
        if(!vendorType_.Equals(other.vendorType_)) return false;
        if(!attribute_.Equals(other.attribute_)) return false;
        if(!category_.Equals(other.category_)) return false;
        if(!restrictedCategory_.Equals(other.restrictedCategory_)) return false;
        if(!advertiserName_.Equals(other.advertiserName_)) return false;
        if (BidderName != other.BidderName) return false;
        if (Width != other.Width) return false;
        if (Height != other.Height) return false;
        if (AgencyId != other.AgencyId) return false;
        if(!adslot_.Equals(other.adslot_)) return false;
        if(!impressionTrackingUrl_.Equals(other.impressionTrackingUrl_)) return false;
        if (AdChoicesDestinationUrl != other.AdChoicesDestinationUrl) return false;
        if(!impressionTrackingResource_.Equals(other.impressionTrackingResource_)) return false;
        if (!object.Equals(SdkRenderedAd, other.SdkRenderedAd)) return false;
        return Equals(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (HasEventNotificationToken) hash ^= EventNotificationToken.GetHashCode();
        if (HasBuyerCreativeId) hash ^= BuyerCreativeId.GetHashCode();
        if (HasHtmlSnippet) hash ^= HtmlSnippet.GetHashCode();
        if (HasVideoUrl) hash ^= VideoUrl.GetHashCode();
        if (HasVideoVastXml) hash ^= VideoVastXml.GetHashCode();
        if (HasAmpAdUrl) hash ^= AmpAdUrl.GetHashCode();
        if (HasNativeAd) hash ^= NativeAd.GetHashCode();
        hash ^= clickThroughUrl_.GetHashCode();
        hash ^= vendorType_.GetHashCode();
        hash ^= attribute_.GetHashCode();
        hash ^= category_.GetHashCode();
        hash ^= restrictedCategory_.GetHashCode();
        hash ^= advertiserName_.GetHashCode();
        if (HasBidderName) hash ^= BidderName.GetHashCode();
        if (HasWidth) hash ^= Width.GetHashCode();
        if (HasHeight) hash ^= Height.GetHashCode();
        if (HasAgencyId) hash ^= AgencyId.GetHashCode();
        hash ^= adslot_.GetHashCode();
        hash ^= impressionTrackingUrl_.GetHashCode();
        if (HasAdChoicesDestinationUrl) hash ^= AdChoicesDestinationUrl.GetHashCode();
        hash ^= impressionTrackingResource_.GetHashCode();
        if (HasSdkRenderedAd) hash ^= SdkRenderedAd.GetHashCode();
        if (_unknownFields != null) {
          hash ^= _unknownFields.GetHashCode();
        }
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (HasHtmlSnippet) {
          output.WriteRawTag(10);
          output.WriteString(HtmlSnippet);
        }
        adslot_.WriteTo(output, _repeated_adslot_codec);
        clickThroughUrl_.WriteTo(output, _repeated_clickThroughUrl_codec);
        vendorType_.WriteTo(output, _repeated_vendorType_codec);
        attribute_.WriteTo(output, _repeated_attribute_codec);
        category_.WriteTo(output, _repeated_category_codec);
        if (HasVideoUrl) {
          output.WriteRawTag(74);
          output.WriteString(VideoUrl);
        }
        if (HasBuyerCreativeId) {
          output.WriteRawTag(82);
          output.WriteString(BuyerCreativeId);
        }
        advertiserName_.WriteTo(output, _repeated_advertiserName_codec);
        if (HasWidth) {
          output.WriteRawTag(112);
          output.WriteInt32(Width);
        }
        if (HasHeight) {
          output.WriteRawTag(120);
          output.WriteInt32(Height);
        }
        if (HasAgencyId) {
          output.WriteRawTag(128, 1);
          output.WriteInt64(AgencyId);
        }
        restrictedCategory_.WriteTo(output, _repeated_restrictedCategory_codec);
        if (HasNativeAd) {
          output.WriteRawTag(146, 1);
          output.WriteMessage(NativeAd);
        }
        impressionTrackingUrl_.WriteTo(output, _repeated_impressionTrackingUrl_codec);
        if (HasAdChoicesDestinationUrl) {
          output.WriteRawTag(170, 1);
          output.WriteString(AdChoicesDestinationUrl);
        }
        if (HasBidderName) {
          output.WriteRawTag(178, 1);
          output.WriteString(BidderName);
        }
        if (HasAmpAdUrl) {
          output.WriteRawTag(186, 1);
          output.WriteString(AmpAdUrl);
        }
        if (HasVideoVastXml) {
          output.WriteRawTag(194, 1);
          output.WriteString(VideoVastXml);
        }
        if (HasEventNotificationToken) {
          output.WriteRawTag(202, 1);
          output.WriteBytes(EventNotificationToken);
        }
        impressionTrackingResource_.WriteTo(output, _repeated_impressionTrackingResource_codec);
        if (HasSdkRenderedAd) {
          output.WriteRawTag(218, 1);
          output.WriteMessage(SdkRenderedAd);
        }
        if (_unknownFields != null) {
          _unknownFields.WriteTo(output);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (HasEventNotificationToken) {
          size += 2 + pb::CodedOutputStream.ComputeBytesSize(EventNotificationToken);
        }
        if (HasBuyerCreativeId) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyerCreativeId);
        }
        if (HasHtmlSnippet) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(HtmlSnippet);
        }
        if (HasVideoUrl) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoUrl);
        }
        if (HasVideoVastXml) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(VideoVastXml);
        }
        if (HasAmpAdUrl) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(AmpAdUrl);
        }
        if (HasNativeAd) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(NativeAd);
        }
        size += clickThroughUrl_.CalculateSize(_repeated_clickThroughUrl_codec);
        size += vendorType_.CalculateSize(_repeated_vendorType_codec);
        size += attribute_.CalculateSize(_repeated_attribute_codec);
        size += category_.CalculateSize(_repeated_category_codec);
        size += restrictedCategory_.CalculateSize(_repeated_restrictedCategory_codec);
        size += advertiserName_.CalculateSize(_repeated_advertiserName_codec);
        if (HasBidderName) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(BidderName);
        }
        if (HasWidth) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
        }
        if (HasHeight) {
          size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
        }
        if (HasAgencyId) {
          size += 2 + pb::CodedOutputStream.ComputeInt64Size(AgencyId);
        }
        size += adslot_.CalculateSize(_repeated_adslot_codec);
        size += impressionTrackingUrl_.CalculateSize(_repeated_impressionTrackingUrl_codec);
        if (HasAdChoicesDestinationUrl) {
          size += 2 + pb::CodedOutputStream.ComputeStringSize(AdChoicesDestinationUrl);
        }
        size += impressionTrackingResource_.CalculateSize(_repeated_impressionTrackingResource_codec);
        if (HasSdkRenderedAd) {
          size += 2 + pb::CodedOutputStream.ComputeMessageSize(SdkRenderedAd);
        }
        if (_unknownFields != null) {
          size += _unknownFields.CalculateSize();
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(Ad other) {
        if (other == null) {
          return;
        }
        if (other.HasEventNotificationToken) {
          EventNotificationToken = other.EventNotificationToken;
        }
        if (other.HasBuyerCreativeId) {
          BuyerCreativeId = other.BuyerCreativeId;
        }
        if (other.HasHtmlSnippet) {
          HtmlSnippet = other.HtmlSnippet;
        }
        if (other.HasVideoUrl) {
          VideoUrl = other.VideoUrl;
        }
        if (other.HasVideoVastXml) {
          VideoVastXml = other.VideoVastXml;
        }
        if (other.HasAmpAdUrl) {
          AmpAdUrl = other.AmpAdUrl;
        }
        if (other.HasNativeAd) {
          if (!HasNativeAd) {
            NativeAd = new global::BidResponse.Types.Ad.Types.NativeAd();
          }
          NativeAd.MergeFrom(other.NativeAd);
        }
        clickThroughUrl_.Add(other.clickThroughUrl_);
        vendorType_.Add(other.vendorType_);
        attribute_.Add(other.attribute_);
        category_.Add(other.category_);
        restrictedCategory_.Add(other.restrictedCategory_);
        advertiserName_.Add(other.advertiserName_);
        if (other.HasBidderName) {
          BidderName = other.BidderName;
        }
        if (other.HasWidth) {
          Width = other.Width;
        }
        if (other.HasHeight) {
          Height = other.Height;
        }
        if (other.HasAgencyId) {
          AgencyId = other.AgencyId;
        }
        adslot_.Add(other.adslot_);
        impressionTrackingUrl_.Add(other.impressionTrackingUrl_);
        if (other.HasAdChoicesDestinationUrl) {
          AdChoicesDestinationUrl = other.AdChoicesDestinationUrl;
        }
        impressionTrackingResource_.Add(other.impressionTrackingResource_);
        if (other.HasSdkRenderedAd) {
          if (!HasSdkRenderedAd) {
            SdkRenderedAd = new global::BidResponse.Types.Ad.Types.SdkRenderedAd();
          }
          SdkRenderedAd.MergeFrom(other.SdkRenderedAd);
        }
        _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
              break;
            case 10: {
              HtmlSnippet = input.ReadString();
              break;
            }
            case 26: {
              adslot_.AddEntriesFrom(input, _repeated_adslot_codec);
              break;
            }
            case 34: {
              clickThroughUrl_.AddEntriesFrom(input, _repeated_clickThroughUrl_codec);
              break;
            }
            case 42:
            case 40: {
              vendorType_.AddEntriesFrom(input, _repeated_vendorType_codec);
              break;
            }
            case 50:
            case 48: {
              attribute_.AddEntriesFrom(input, _repeated_attribute_codec);
              break;
            }
            case 58:
            case 56: {
              category_.AddEntriesFrom(input, _repeated_category_codec);
              break;
            }
            case 74: {
              VideoUrl = input.ReadString();
              break;
            }
            case 82: {
              BuyerCreativeId = input.ReadString();
              break;
            }
            case 90: {
              advertiserName_.AddEntriesFrom(input, _repeated_advertiserName_codec);
              break;
            }
            case 112: {
              Width = input.ReadInt32();
              break;
            }
            case 120: {
              Height = input.ReadInt32();
              break;
            }
            case 128: {
              AgencyId = input.ReadInt64();
              break;
            }
            case 138:
            case 136: {
              restrictedCategory_.AddEntriesFrom(input, _repeated_restrictedCategory_codec);
              break;
            }
            case 146: {
              if (!HasNativeAd) {
                NativeAd = new global::BidResponse.Types.Ad.Types.NativeAd();
              }
              input.ReadMessage(NativeAd);
              break;
            }
            case 154: {
              impressionTrackingUrl_.AddEntriesFrom(input, _repeated_impressionTrackingUrl_codec);
              break;
            }
            case 170: {
              AdChoicesDestinationUrl = input.ReadString();
              break;
            }
            case 178: {
              BidderName = input.ReadString();
              break;
            }
            case 186: {
              AmpAdUrl = input.ReadString();
              break;
            }
            case 194: {
              VideoVastXml = input.ReadString();
              break;
            }
            case 202: {
              EventNotificationToken = input.ReadBytes();
              break;
            }
            case 210: {
              impressionTrackingResource_.AddEntriesFrom(input, _repeated_impressionTrackingResource_codec);
              break;
            }
            case 218: {
              if (!HasSdkRenderedAd) {
                SdkRenderedAd = new global::BidResponse.Types.Ad.Types.SdkRenderedAd();
              }
              input.ReadMessage(SdkRenderedAd);
              break;
            }
          }
        }
      }

      #region Nested types
      /// <summary>Container for nested types declared in the Ad message type.</summary>
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static partial class Types {
        /// <summary>
        /// The content of a native ad. Native ads consist of multiple building
        /// blocks, which are rendered by the publisher. Only one of the following
        /// should be set: html_snippet, video_url, or native_ad.
        /// Only set this field if the BidRequest is for a native ad
        /// (BidRequest.adslot.native is present).
        /// </summary>
        public sealed partial class NativeAd : pb::IMessage<NativeAd> {
          private static readonly pb::MessageParser<NativeAd> _parser = new pb::MessageParser<NativeAd>(() => new NativeAd());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<NativeAd> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidResponse.Types.Ad.Descriptor.NestedTypes[0]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public NativeAd() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public NativeAd(NativeAd other) : this() {
            _hasBits0 = other._hasBits0;
            headline_ = other.headline_;
            body_ = other.body_;
            callToAction_ = other.callToAction_;
            advertiser_ = other.advertiser_;
            image_ = other.HasImage ? other.image_.Clone() : null;
            logo_ = other.HasLogo ? other.logo_.Clone() : null;
            appIcon_ = other.HasAppIcon ? other.appIcon_.Clone() : null;
            videoUrl_ = other.videoUrl_;
            starRating_ = other.starRating_;
            clickLinkUrl_ = other.clickLinkUrl_;
            clickTrackingUrl_ = other.clickTrackingUrl_;
            clickTrackingUrls_ = other.clickTrackingUrls_.Clone();
            price_ = other.price_;
            dEPRECATEDStore_ = other.dEPRECATEDStore_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public NativeAd Clone() {
            return new NativeAd(this);
          }

          /// <summary>Field number for the "headline" field.</summary>
          public const int HeadlineFieldNumber = 1;
          private readonly static string HeadlineDefaultValue = "";

          private string headline_;
          /// <summary>
          /// A short title for the ad.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Headline {
            get { return headline_ ?? HeadlineDefaultValue; }
            set {
              headline_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "headline" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasHeadline {
            get { return headline_ != null; }
          }
          /// <summary>Clears the value of the "headline" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearHeadline() {
            headline_ = null;
          }

          /// <summary>Field number for the "body" field.</summary>
          public const int BodyFieldNumber = 2;
          private readonly static string BodyDefaultValue = "";

          private string body_;
          /// <summary>
          /// A long description of the ad.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Body {
            get { return body_ ?? BodyDefaultValue; }
            set {
              body_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "body" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasBody {
            get { return body_ != null; }
          }
          /// <summary>Clears the value of the "body" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearBody() {
            body_ = null;
          }

          /// <summary>Field number for the "call_to_action" field.</summary>
          public const int CallToActionFieldNumber = 3;
          private readonly static string CallToActionDefaultValue = "";

          private string callToAction_;
          /// <summary>
          /// A label for the button that the user is supposed to click
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string CallToAction {
            get { return callToAction_ ?? CallToActionDefaultValue; }
            set {
              callToAction_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "call_to_action" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasCallToAction {
            get { return callToAction_ != null; }
          }
          /// <summary>Clears the value of the "call_to_action" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearCallToAction() {
            callToAction_ = null;
          }

          /// <summary>Field number for the "advertiser" field.</summary>
          public const int AdvertiserFieldNumber = 4;
          private readonly static string AdvertiserDefaultValue = "";

          private string advertiser_;
          /// <summary>
          /// The name of the advertiser or sponsor, to be displayed in the ad
          /// creative.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Advertiser {
            get { return advertiser_ ?? AdvertiserDefaultValue; }
            set {
              advertiser_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "advertiser" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasAdvertiser {
            get { return advertiser_ != null; }
          }
          /// <summary>Clears the value of the "advertiser" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearAdvertiser() {
            advertiser_ = null;
          }

          /// <summary>Field number for the "image" field.</summary>
          public const int ImageFieldNumber = 5;
          private global::BidResponse.Types.Ad.Types.NativeAd.Types.Image image_;
          /// <summary>
          /// A large image.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidResponse.Types.Ad.Types.NativeAd.Types.Image Image {
            get { return image_; }
            set {
              image_ = value;
            }
          }
          /// <summary>Gets whether the image field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasImage {
            get { return image_ != null; }
          }
          /// <summary>Clears the value of the image field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearImage() {
            image_ = null;
          }

          /// <summary>Field number for the "logo" field.</summary>
          public const int LogoFieldNumber = 6;
          private global::BidResponse.Types.Ad.Types.NativeAd.Types.Image logo_;
          /// <summary>
          /// A smaller image, for the advertiser's logo.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidResponse.Types.Ad.Types.NativeAd.Types.Image Logo {
            get { return logo_; }
            set {
              logo_ = value;
            }
          }
          /// <summary>Gets whether the logo field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasLogo {
            get { return logo_ != null; }
          }
          /// <summary>Clears the value of the logo field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearLogo() {
            logo_ = null;
          }

          /// <summary>Field number for the "app_icon" field.</summary>
          public const int AppIconFieldNumber = 7;
          private global::BidResponse.Types.Ad.Types.NativeAd.Types.Image appIcon_;
          /// <summary>
          /// The app icon, for app download ads.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidResponse.Types.Ad.Types.NativeAd.Types.Image AppIcon {
            get { return appIcon_; }
            set {
              appIcon_ = value;
            }
          }
          /// <summary>Gets whether the app_icon field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasAppIcon {
            get { return appIcon_ != null; }
          }
          /// <summary>Clears the value of the app_icon field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearAppIcon() {
            appIcon_ = null;
          }

          /// <summary>Field number for the "video_url" field.</summary>
          public const int VideoUrlFieldNumber = 13;
          private readonly static string VideoUrlDefaultValue = "";

          private string videoUrl_;
          /// <summary>
          /// The URL to fetch a video ad. The URL should return an XML response that
          /// conforms to the VAST 2.0 standard. Only set this field if the
          /// BidRequest is for native ads and the video field is requested.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string VideoUrl {
            get { return videoUrl_ ?? VideoUrlDefaultValue; }
            set {
              videoUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "video_url" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasVideoUrl {
            get { return videoUrl_ != null; }
          }
          /// <summary>Clears the value of the "video_url" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearVideoUrl() {
            videoUrl_ = null;
          }

          /// <summary>Field number for the "star_rating" field.</summary>
          public const int StarRatingFieldNumber = 8;
          private readonly static double StarRatingDefaultValue = 0D;

          private double starRating_;
          /// <summary>
          /// The app rating in the app store. Must be in the range [0-5].
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public double StarRating {
            get { if ((_hasBits0 & 1) != 0) { return starRating_; } else { return StarRatingDefaultValue; } }
            set {
              _hasBits0 |= 1;
              starRating_ = value;
            }
          }
          /// <summary>Gets whether the "star_rating" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasStarRating {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "star_rating" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearStarRating() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "click_link_url" field.</summary>
          public const int ClickLinkUrlFieldNumber = 14;
          private readonly static string ClickLinkUrlDefaultValue = "";

          private string clickLinkUrl_;
          /// <summary>
          /// The URL that the browser/SDK will load when the user clicks the ad.
          /// This can be the landing page directly, or the first step of a redirect
          /// chain that eventually leads to it. For backward compatibility, if this
          /// is not set, the first Ad.click_through_url is used.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string ClickLinkUrl {
            get { return clickLinkUrl_ ?? ClickLinkUrlDefaultValue; }
            set {
              clickLinkUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "click_link_url" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasClickLinkUrl {
            get { return clickLinkUrl_ != null; }
          }
          /// <summary>Clears the value of the "click_link_url" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearClickLinkUrl() {
            clickLinkUrl_ = null;
          }

          /// <summary>Field number for the "click_tracking_url" field.</summary>
          public const int ClickTrackingUrlFieldNumber = 11;
          private readonly static string ClickTrackingUrlDefaultValue = "";

          private string clickTrackingUrl_;
          /// <summary>
          /// The URL to use for click tracking. The SDK pings click tracking url on
          /// a background thread. When resolving the url, HTTP 30x redirects are
          /// followed. The SDK ignores the contents of the response; this URL
          /// has no effect on the landing page for the user.
          /// This field is planned to be deprecated and we are moving to the
          /// repeated click_tracking_urls field.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string ClickTrackingUrl {
            get { return clickTrackingUrl_ ?? ClickTrackingUrlDefaultValue; }
            set {
              clickTrackingUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "click_tracking_url" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasClickTrackingUrl {
            get { return clickTrackingUrl_ != null; }
          }
          /// <summary>Clears the value of the "click_tracking_url" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearClickTrackingUrl() {
            clickTrackingUrl_ = null;
          }

          /// <summary>Field number for the "click_tracking_urls" field.</summary>
          public const int ClickTrackingUrlsFieldNumber = 15;
          private static readonly pb::FieldCodec<string> _repeated_clickTrackingUrls_codec
              = pb::FieldCodec.ForString(122);
          private readonly pbc::RepeatedField<string> clickTrackingUrls_ = new pbc::RepeatedField<string>();
          /// <summary>
          /// The URLs to use for click tracking. This will be used throughout the
          /// serving stack and will incorporate any URL in click_tracking_url.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<string> ClickTrackingUrls {
            get { return clickTrackingUrls_; }
          }

          /// <summary>Field number for the "price" field.</summary>
          public const int PriceFieldNumber = 10;
          private readonly static string PriceDefaultValue = "";

          private string price_;
          /// <summary>
          /// The price of the promoted app including the currency info.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Price {
            get { return price_ ?? PriceDefaultValue; }
            set {
              price_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "price" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasPrice {
            get { return price_ != null; }
          }
          /// <summary>Clears the value of the "price" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearPrice() {
            price_ = null;
          }

          /// <summary>Field number for the "DEPRECATED_store" field.</summary>
          public const int DEPRECATEDStoreFieldNumber = 12;
          private readonly static string DEPRECATEDStoreDefaultValue = "";

          private string dEPRECATEDStore_;
          /// <summary>
          /// This field is deprecated.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string DEPRECATEDStore {
            get { return dEPRECATEDStore_ ?? DEPRECATEDStoreDefaultValue; }
            set {
              dEPRECATEDStore_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "DEPRECATED_store" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasDEPRECATEDStore {
            get { return dEPRECATEDStore_ != null; }
          }
          /// <summary>Clears the value of the "DEPRECATED_store" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearDEPRECATEDStore() {
            dEPRECATEDStore_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as NativeAd);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(NativeAd other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Headline != other.Headline) return false;
            if (Body != other.Body) return false;
            if (CallToAction != other.CallToAction) return false;
            if (Advertiser != other.Advertiser) return false;
            if (!object.Equals(Image, other.Image)) return false;
            if (!object.Equals(Logo, other.Logo)) return false;
            if (!object.Equals(AppIcon, other.AppIcon)) return false;
            if (VideoUrl != other.VideoUrl) return false;
            if (!pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.Equals(StarRating, other.StarRating)) return false;
            if (ClickLinkUrl != other.ClickLinkUrl) return false;
            if (ClickTrackingUrl != other.ClickTrackingUrl) return false;
            if(!clickTrackingUrls_.Equals(other.clickTrackingUrls_)) return false;
            if (Price != other.Price) return false;
            if (DEPRECATEDStore != other.DEPRECATEDStore) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasHeadline) hash ^= Headline.GetHashCode();
            if (HasBody) hash ^= Body.GetHashCode();
            if (HasCallToAction) hash ^= CallToAction.GetHashCode();
            if (HasAdvertiser) hash ^= Advertiser.GetHashCode();
            if (HasImage) hash ^= Image.GetHashCode();
            if (HasLogo) hash ^= Logo.GetHashCode();
            if (HasAppIcon) hash ^= AppIcon.GetHashCode();
            if (HasVideoUrl) hash ^= VideoUrl.GetHashCode();
            if (HasStarRating) hash ^= pbc::ProtobufEqualityComparers.BitwiseDoubleEqualityComparer.GetHashCode(StarRating);
            if (HasClickLinkUrl) hash ^= ClickLinkUrl.GetHashCode();
            if (HasClickTrackingUrl) hash ^= ClickTrackingUrl.GetHashCode();
            hash ^= clickTrackingUrls_.GetHashCode();
            if (HasPrice) hash ^= Price.GetHashCode();
            if (HasDEPRECATEDStore) hash ^= DEPRECATEDStore.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasHeadline) {
              output.WriteRawTag(10);
              output.WriteString(Headline);
            }
            if (HasBody) {
              output.WriteRawTag(18);
              output.WriteString(Body);
            }
            if (HasCallToAction) {
              output.WriteRawTag(26);
              output.WriteString(CallToAction);
            }
            if (HasAdvertiser) {
              output.WriteRawTag(34);
              output.WriteString(Advertiser);
            }
            if (HasImage) {
              output.WriteRawTag(42);
              output.WriteMessage(Image);
            }
            if (HasLogo) {
              output.WriteRawTag(50);
              output.WriteMessage(Logo);
            }
            if (HasAppIcon) {
              output.WriteRawTag(58);
              output.WriteMessage(AppIcon);
            }
            if (HasStarRating) {
              output.WriteRawTag(65);
              output.WriteDouble(StarRating);
            }
            if (HasPrice) {
              output.WriteRawTag(82);
              output.WriteString(Price);
            }
            if (HasClickTrackingUrl) {
              output.WriteRawTag(90);
              output.WriteString(ClickTrackingUrl);
            }
            if (HasDEPRECATEDStore) {
              output.WriteRawTag(98);
              output.WriteString(DEPRECATEDStore);
            }
            if (HasVideoUrl) {
              output.WriteRawTag(106);
              output.WriteString(VideoUrl);
            }
            if (HasClickLinkUrl) {
              output.WriteRawTag(114);
              output.WriteString(ClickLinkUrl);
            }
            clickTrackingUrls_.WriteTo(output, _repeated_clickTrackingUrls_codec);
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasHeadline) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Headline);
            }
            if (HasBody) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Body);
            }
            if (HasCallToAction) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(CallToAction);
            }
            if (HasAdvertiser) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Advertiser);
            }
            if (HasImage) {
              size += 1 + pb::CodedOutputStream.ComputeMessageSize(Image);
            }
            if (HasLogo) {
              size += 1 + pb::CodedOutputStream.ComputeMessageSize(Logo);
            }
            if (HasAppIcon) {
              size += 1 + pb::CodedOutputStream.ComputeMessageSize(AppIcon);
            }
            if (HasVideoUrl) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(VideoUrl);
            }
            if (HasStarRating) {
              size += 1 + 8;
            }
            if (HasClickLinkUrl) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(ClickLinkUrl);
            }
            if (HasClickTrackingUrl) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(ClickTrackingUrl);
            }
            size += clickTrackingUrls_.CalculateSize(_repeated_clickTrackingUrls_codec);
            if (HasPrice) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Price);
            }
            if (HasDEPRECATEDStore) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(DEPRECATEDStore);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(NativeAd other) {
            if (other == null) {
              return;
            }
            if (other.HasHeadline) {
              Headline = other.Headline;
            }
            if (other.HasBody) {
              Body = other.Body;
            }
            if (other.HasCallToAction) {
              CallToAction = other.CallToAction;
            }
            if (other.HasAdvertiser) {
              Advertiser = other.Advertiser;
            }
            if (other.HasImage) {
              if (!HasImage) {
                Image = new global::BidResponse.Types.Ad.Types.NativeAd.Types.Image();
              }
              Image.MergeFrom(other.Image);
            }
            if (other.HasLogo) {
              if (!HasLogo) {
                Logo = new global::BidResponse.Types.Ad.Types.NativeAd.Types.Image();
              }
              Logo.MergeFrom(other.Logo);
            }
            if (other.HasAppIcon) {
              if (!HasAppIcon) {
                AppIcon = new global::BidResponse.Types.Ad.Types.NativeAd.Types.Image();
              }
              AppIcon.MergeFrom(other.AppIcon);
            }
            if (other.HasVideoUrl) {
              VideoUrl = other.VideoUrl;
            }
            if (other.HasStarRating) {
              StarRating = other.StarRating;
            }
            if (other.HasClickLinkUrl) {
              ClickLinkUrl = other.ClickLinkUrl;
            }
            if (other.HasClickTrackingUrl) {
              ClickTrackingUrl = other.ClickTrackingUrl;
            }
            clickTrackingUrls_.Add(other.clickTrackingUrls_);
            if (other.HasPrice) {
              Price = other.Price;
            }
            if (other.HasDEPRECATEDStore) {
              DEPRECATEDStore = other.DEPRECATEDStore;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Headline = input.ReadString();
                  break;
                }
                case 18: {
                  Body = input.ReadString();
                  break;
                }
                case 26: {
                  CallToAction = input.ReadString();
                  break;
                }
                case 34: {
                  Advertiser = input.ReadString();
                  break;
                }
                case 42: {
                  if (!HasImage) {
                    Image = new global::BidResponse.Types.Ad.Types.NativeAd.Types.Image();
                  }
                  input.ReadMessage(Image);
                  break;
                }
                case 50: {
                  if (!HasLogo) {
                    Logo = new global::BidResponse.Types.Ad.Types.NativeAd.Types.Image();
                  }
                  input.ReadMessage(Logo);
                  break;
                }
                case 58: {
                  if (!HasAppIcon) {
                    AppIcon = new global::BidResponse.Types.Ad.Types.NativeAd.Types.Image();
                  }
                  input.ReadMessage(AppIcon);
                  break;
                }
                case 65: {
                  StarRating = input.ReadDouble();
                  break;
                }
                case 82: {
                  Price = input.ReadString();
                  break;
                }
                case 90: {
                  ClickTrackingUrl = input.ReadString();
                  break;
                }
                case 98: {
                  DEPRECATEDStore = input.ReadString();
                  break;
                }
                case 106: {
                  VideoUrl = input.ReadString();
                  break;
                }
                case 114: {
                  ClickLinkUrl = input.ReadString();
                  break;
                }
                case 122: {
                  clickTrackingUrls_.AddEntriesFrom(input, _repeated_clickTrackingUrls_codec);
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the NativeAd message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            public sealed partial class Image : pb::IMessage<Image> {
              private static readonly pb::MessageParser<Image> _parser = new pb::MessageParser<Image>(() => new Image());
              private pb::UnknownFieldSet _unknownFields;
              private int _hasBits0;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pb::MessageParser<Image> Parser { get { return _parser; } }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public static pbr::MessageDescriptor Descriptor {
                get { return global::BidResponse.Types.Ad.Types.NativeAd.Descriptor.NestedTypes[0]; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              pbr::MessageDescriptor pb::IMessage.Descriptor {
                get { return Descriptor; }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public Image() {
                OnConstruction();
              }

              partial void OnConstruction();

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public Image(Image other) : this() {
                _hasBits0 = other._hasBits0;
                url_ = other.url_;
                width_ = other.width_;
                height_ = other.height_;
                _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public Image Clone() {
                return new Image(this);
              }

              /// <summary>Field number for the "url" field.</summary>
              public const int UrlFieldNumber = 1;
              private readonly static string UrlDefaultValue = "";

              private string url_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public string Url {
                get { return url_ ?? UrlDefaultValue; }
                set {
                  url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
                }
              }
              /// <summary>Gets whether the "url" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasUrl {
                get { return url_ != null; }
              }
              /// <summary>Clears the value of the "url" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearUrl() {
                url_ = null;
              }

              /// <summary>Field number for the "width" field.</summary>
              public const int WidthFieldNumber = 2;
              private readonly static int WidthDefaultValue = 0;

              private int width_;
              /// <summary>
              /// Image width and height are specified in pixels. You may provide a
              /// larger image than was requested, so long as the aspect ratio is
              /// preserved.
              /// </summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int Width {
                get { if ((_hasBits0 & 1) != 0) { return width_; } else { return WidthDefaultValue; } }
                set {
                  _hasBits0 |= 1;
                  width_ = value;
                }
              }
              /// <summary>Gets whether the "width" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasWidth {
                get { return (_hasBits0 & 1) != 0; }
              }
              /// <summary>Clears the value of the "width" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearWidth() {
                _hasBits0 &= ~1;
              }

              /// <summary>Field number for the "height" field.</summary>
              public const int HeightFieldNumber = 3;
              private readonly static int HeightDefaultValue = 0;

              private int height_;
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int Height {
                get { if ((_hasBits0 & 2) != 0) { return height_; } else { return HeightDefaultValue; } }
                set {
                  _hasBits0 |= 2;
                  height_ = value;
                }
              }
              /// <summary>Gets whether the "height" field is set</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool HasHeight {
                get { return (_hasBits0 & 2) != 0; }
              }
              /// <summary>Clears the value of the "height" field</summary>
              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void ClearHeight() {
                _hasBits0 &= ~2;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override bool Equals(object other) {
                return Equals(other as Image);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public bool Equals(Image other) {
                if (ReferenceEquals(other, null)) {
                  return false;
                }
                if (ReferenceEquals(other, this)) {
                  return true;
                }
                if (Url != other.Url) return false;
                if (Width != other.Width) return false;
                if (Height != other.Height) return false;
                return Equals(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override int GetHashCode() {
                int hash = 1;
                if (HasUrl) hash ^= Url.GetHashCode();
                if (HasWidth) hash ^= Width.GetHashCode();
                if (HasHeight) hash ^= Height.GetHashCode();
                if (_unknownFields != null) {
                  hash ^= _unknownFields.GetHashCode();
                }
                return hash;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public override string ToString() {
                return pb::JsonFormatter.ToDiagnosticString(this);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void WriteTo(pb::CodedOutputStream output) {
                if (HasUrl) {
                  output.WriteRawTag(10);
                  output.WriteString(Url);
                }
                if (HasWidth) {
                  output.WriteRawTag(16);
                  output.WriteInt32(Width);
                }
                if (HasHeight) {
                  output.WriteRawTag(24);
                  output.WriteInt32(Height);
                }
                if (_unknownFields != null) {
                  _unknownFields.WriteTo(output);
                }
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public int CalculateSize() {
                int size = 0;
                if (HasUrl) {
                  size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
                }
                if (HasWidth) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Width);
                }
                if (HasHeight) {
                  size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
                }
                if (_unknownFields != null) {
                  size += _unknownFields.CalculateSize();
                }
                return size;
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(Image other) {
                if (other == null) {
                  return;
                }
                if (other.HasUrl) {
                  Url = other.Url;
                }
                if (other.HasWidth) {
                  Width = other.Width;
                }
                if (other.HasHeight) {
                  Height = other.Height;
                }
                _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
              }

              [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
              public void MergeFrom(pb::CodedInputStream input) {
                uint tag;
                while ((tag = input.ReadTag()) != 0) {
                  switch(tag) {
                    default:
                      _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                      break;
                    case 10: {
                      Url = input.ReadString();
                      break;
                    }
                    case 16: {
                      Width = input.ReadInt32();
                      break;
                    }
                    case 24: {
                      Height = input.ReadInt32();
                      break;
                    }
                  }
                }
              }

            }

          }
          #endregion

        }

        public sealed partial class AdSlot : pb::IMessage<AdSlot> {
          private static readonly pb::MessageParser<AdSlot> _parser = new pb::MessageParser<AdSlot>(() => new AdSlot());
          private pb::UnknownFieldSet _unknownFields;
          private int _hasBits0;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<AdSlot> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidResponse.Types.Ad.Descriptor.NestedTypes[1]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public AdSlot() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public AdSlot(AdSlot other) : this() {
            _hasBits0 = other._hasBits0;
            id_ = other.id_;
            maxCpmMicros_ = other.maxCpmMicros_;
            minCpmMicros_ = other.minCpmMicros_;
            billingId_ = other.billingId_;
            dealId_ = other.dealId_;
            exchangeDealId_ = other.exchangeDealId_;
            exchangeDealType_ = other.exchangeDealType_;
            buyerReportingId_ = other.buyerReportingId_;
            useBidTranslationService_ = other.useBidTranslationService_;
            thirdPartyBuyerToken_ = other.thirdPartyBuyerToken_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public AdSlot Clone() {
            return new AdSlot(this);
          }

          /// <summary>Field number for the "id" field.</summary>
          public const int IdFieldNumber = 1;
          private readonly static int IdDefaultValue = 0;

          private int id_;
          /// <summary>
          /// The slot id from the BidRequest that the ad may appear in.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int Id {
            get { if ((_hasBits0 & 1) != 0) { return id_; } else { return IdDefaultValue; } }
            set {
              _hasBits0 |= 1;
              id_ = value;
            }
          }
          /// <summary>Gets whether the "id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasId {
            get { return (_hasBits0 & 1) != 0; }
          }
          /// <summary>Clears the value of the "id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearId() {
            _hasBits0 &= ~1;
          }

          /// <summary>Field number for the "max_cpm_micros" field.</summary>
          public const int MaxCpmMicrosFieldNumber = 2;
          private readonly static long MaxCpmMicrosDefaultValue = 0L;

          private long maxCpmMicros_;
          /// <summary>
          /// The maximum CPM you want to be charged if you win the auction for this
          /// ad slot, expressed in micros of the bidding currecy. For example, to
          /// bid a CPM of 1.29 USD, set max_cpm_micros = 1290000. Winning bids are
          /// rounded up to billable units. For example, in USD, bids are rounded up
          /// to the next multiple of 10,000 micros (one cent).
          /// The bidding currency is determined by:
          /// 1. The bidder-level currency, if configured.
          /// 2. Otherwise, the currency of the buyer account indicated by the
          /// billing ID in the billing_id field.
          /// 3. If billing_id is empty, the currency of the buyer account indicated
          /// by the sole billing ID in the bid request.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long MaxCpmMicros {
            get { if ((_hasBits0 & 2) != 0) { return maxCpmMicros_; } else { return MaxCpmMicrosDefaultValue; } }
            set {
              _hasBits0 |= 2;
              maxCpmMicros_ = value;
            }
          }
          /// <summary>Gets whether the "max_cpm_micros" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMaxCpmMicros {
            get { return (_hasBits0 & 2) != 0; }
          }
          /// <summary>Clears the value of the "max_cpm_micros" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMaxCpmMicros() {
            _hasBits0 &= ~2;
          }

          /// <summary>Field number for the "min_cpm_micros" field.</summary>
          public const int MinCpmMicrosFieldNumber = 3;
          private readonly static long MinCpmMicrosDefaultValue = 0L;

          private long minCpmMicros_;
          /// <summary>
          /// The minimum CPM you want to be charged if you win the auction for this
          /// ad slot, expressed in micros of the bidding currecy. This may represent
          /// a second price if you choose max_cpm as the highest of several bids, or
          /// some form of reserve price if you wish to override the reserve price
          /// set by the publisher. The bid must be less than or equal to
          /// max_cpm_micros or it will be ignored. This field is optional and does
          /// not need to be set. This field is not applicable when responding to bid
          /// requests with auction_type set to FIRST_PRICE.
          /// The bidding currency is determined by:
          /// 1. The bidder-level currency, if configured.
          /// 2. Otherwise, the currency of the buyer account indicated by the
          /// billing ID in the billing_id field.
          /// 3. If billing_id is empty, the currency of the buyer account indicated
          /// by the sole billing ID in the bid request.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long MinCpmMicros {
            get { if ((_hasBits0 & 4) != 0) { return minCpmMicros_; } else { return MinCpmMicrosDefaultValue; } }
            set {
              _hasBits0 |= 4;
              minCpmMicros_ = value;
            }
          }
          /// <summary>Gets whether the "min_cpm_micros" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasMinCpmMicros {
            get { return (_hasBits0 & 4) != 0; }
          }
          /// <summary>Clears the value of the "min_cpm_micros" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearMinCpmMicros() {
            _hasBits0 &= ~4;
          }

          /// <summary>Field number for the "billing_id" field.</summary>
          public const int BillingIdFieldNumber = 4;
          private readonly static long BillingIdDefaultValue = 0L;

          private long billingId_;
          /// <summary>
          /// Billing id to attribute this impression to. The value must be in the
          /// set of billing ids for this slot that were sent in the
          /// BidRequest.AdSlot.matching_ad_data.billing_id. This must always be set
          /// if the BidRequest has more than one
          /// BidRequest.AdSlot.matching_ad_data.billing_id or if the bidder has
          /// active child seats.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long BillingId {
            get { if ((_hasBits0 & 8) != 0) { return billingId_; } else { return BillingIdDefaultValue; } }
            set {
              _hasBits0 |= 8;
              billingId_ = value;
            }
          }
          /// <summary>Gets whether the "billing_id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasBillingId {
            get { return (_hasBits0 & 8) != 0; }
          }
          /// <summary>Clears the value of the "billing_id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearBillingId() {
            _hasBits0 &= ~8;
          }

          /// <summary>Field number for the "deal_id" field.</summary>
          public const int DealIdFieldNumber = 5;
          private readonly static long DealIdDefaultValue = 0L;

          private long dealId_;
          /// <summary>
          /// The deal id that you want this bid to participate in. Leave unset
          /// or set it to "1" if a deal is available but you want to
          /// ignore the deal and participate in the open auction.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public long DealId {
            get { if ((_hasBits0 & 16) != 0) { return dealId_; } else { return DealIdDefaultValue; } }
            set {
              _hasBits0 |= 16;
              dealId_ = value;
            }
          }
          /// <summary>Gets whether the "deal_id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasDealId {
            get { return (_hasBits0 & 16) != 0; }
          }
          /// <summary>Clears the value of the "deal_id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearDealId() {
            _hasBits0 &= ~16;
          }

          /// <summary>Field number for the "exchange_deal_id" field.</summary>
          public const int ExchangeDealIdFieldNumber = 6;
          private readonly static string ExchangeDealIdDefaultValue = "";

          private string exchangeDealId_;
          /// <summary>
          /// For exchange bidders (third party exchanges doing real-time bidding on
          /// DFP), the deal id from the exchange's namespace that is associated with
          /// this bid and reported to publishers.  Leave unset if there is no
          /// associated deal. This is arbitrary UTF8 text and must be at most 64
          /// bytes.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string ExchangeDealId {
            get { return exchangeDealId_ ?? ExchangeDealIdDefaultValue; }
            set {
              exchangeDealId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "exchange_deal_id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasExchangeDealId {
            get { return exchangeDealId_ != null; }
          }
          /// <summary>Clears the value of the "exchange_deal_id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearExchangeDealId() {
            exchangeDealId_ = null;
          }

          /// <summary>Field number for the "exchange_deal_type" field.</summary>
          public const int ExchangeDealTypeFieldNumber = 7;
          private readonly static global::BidResponse.Types.Ad.Types.AdSlot.Types.ExchangeDealType ExchangeDealTypeDefaultValue = global::BidResponse.Types.Ad.Types.AdSlot.Types.ExchangeDealType.OpenAuction;

          private global::BidResponse.Types.Ad.Types.AdSlot.Types.ExchangeDealType exchangeDealType_;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public global::BidResponse.Types.Ad.Types.AdSlot.Types.ExchangeDealType ExchangeDealType {
            get { if ((_hasBits0 & 32) != 0) { return exchangeDealType_; } else { return ExchangeDealTypeDefaultValue; } }
            set {
              _hasBits0 |= 32;
              exchangeDealType_ = value;
            }
          }
          /// <summary>Gets whether the "exchange_deal_type" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasExchangeDealType {
            get { return (_hasBits0 & 32) != 0; }
          }
          /// <summary>Clears the value of the "exchange_deal_type" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearExchangeDealType() {
            _hasBits0 &= ~32;
          }

          /// <summary>Field number for the "buyer_reporting_id" field.</summary>
          public const int BuyerReportingIdFieldNumber = 8;
          private readonly static string BuyerReportingIdDefaultValue = "";

          private string buyerReportingId_;
          /// <summary>
          /// Buyer declared ID which will be used to break down spend and invalid
          /// traffic metrics in IVT transparency reporting in Query Tool. Note that
          /// IDs with fewer than 1000 impressions will not be used to break down
          /// metrics. IDs longer than 64 bytes will be ignored.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string BuyerReportingId {
            get { return buyerReportingId_ ?? BuyerReportingIdDefaultValue; }
            set {
              buyerReportingId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "buyer_reporting_id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasBuyerReportingId {
            get { return buyerReportingId_ != null; }
          }
          /// <summary>Clears the value of the "buyer_reporting_id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearBuyerReportingId() {
            buyerReportingId_ = null;
          }

          /// <summary>Field number for the "use_bid_translation_service" field.</summary>
          public const int UseBidTranslationServiceFieldNumber = 10;
          private readonly static bool UseBidTranslationServiceDefaultValue = false;

          private bool useBidTranslationService_;
          /// <summary>
          /// This field is applicable only for bid requests that are marked as
          /// first price, and will otherwise be ignored. If the field is set to
          /// true on a first price request, then the bid will go through a bid
          /// translation service that converts the second price bid into a first
          /// price bid for participation in the first price auction (i.e. may
          /// reduce but will never increase the bid). If the field is not set,
          /// then for first price eligible queries the bid will be treated as a
          /// first price bid. This field is a temporary product for bidders that
          /// require assistance migrating to 1st price bidding, and will eventually
          /// be deprecated.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool UseBidTranslationService {
            get { if ((_hasBits0 & 64) != 0) { return useBidTranslationService_; } else { return UseBidTranslationServiceDefaultValue; } }
            set {
              _hasBits0 |= 64;
              useBidTranslationService_ = value;
            }
          }
          /// <summary>Gets whether the "use_bid_translation_service" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasUseBidTranslationService {
            get { return (_hasBits0 & 64) != 0; }
          }
          /// <summary>Clears the value of the "use_bid_translation_service" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearUseBidTranslationService() {
            _hasBits0 &= ~64;
          }

          /// <summary>Field number for the "third_party_buyer_token" field.</summary>
          public const int ThirdPartyBuyerTokenFieldNumber = 12;
          private readonly static string ThirdPartyBuyerTokenDefaultValue = "";

          private string thirdPartyBuyerToken_;
          /// <summary>
          /// Token used to identify end third party buyer information if an
          /// exchange as an open bidder is an intermediary. This is obtained from
          /// the third party buyer and must be passed to Google unaltered in the bid
          /// response.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string ThirdPartyBuyerToken {
            get { return thirdPartyBuyerToken_ ?? ThirdPartyBuyerTokenDefaultValue; }
            set {
              thirdPartyBuyerToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "third_party_buyer_token" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasThirdPartyBuyerToken {
            get { return thirdPartyBuyerToken_ != null; }
          }
          /// <summary>Clears the value of the "third_party_buyer_token" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearThirdPartyBuyerToken() {
            thirdPartyBuyerToken_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as AdSlot);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(AdSlot other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Id != other.Id) return false;
            if (MaxCpmMicros != other.MaxCpmMicros) return false;
            if (MinCpmMicros != other.MinCpmMicros) return false;
            if (BillingId != other.BillingId) return false;
            if (DealId != other.DealId) return false;
            if (ExchangeDealId != other.ExchangeDealId) return false;
            if (ExchangeDealType != other.ExchangeDealType) return false;
            if (BuyerReportingId != other.BuyerReportingId) return false;
            if (UseBidTranslationService != other.UseBidTranslationService) return false;
            if (ThirdPartyBuyerToken != other.ThirdPartyBuyerToken) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasId) hash ^= Id.GetHashCode();
            if (HasMaxCpmMicros) hash ^= MaxCpmMicros.GetHashCode();
            if (HasMinCpmMicros) hash ^= MinCpmMicros.GetHashCode();
            if (HasBillingId) hash ^= BillingId.GetHashCode();
            if (HasDealId) hash ^= DealId.GetHashCode();
            if (HasExchangeDealId) hash ^= ExchangeDealId.GetHashCode();
            if (HasExchangeDealType) hash ^= ExchangeDealType.GetHashCode();
            if (HasBuyerReportingId) hash ^= BuyerReportingId.GetHashCode();
            if (HasUseBidTranslationService) hash ^= UseBidTranslationService.GetHashCode();
            if (HasThirdPartyBuyerToken) hash ^= ThirdPartyBuyerToken.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasId) {
              output.WriteRawTag(8);
              output.WriteInt32(Id);
            }
            if (HasMaxCpmMicros) {
              output.WriteRawTag(16);
              output.WriteInt64(MaxCpmMicros);
            }
            if (HasMinCpmMicros) {
              output.WriteRawTag(24);
              output.WriteInt64(MinCpmMicros);
            }
            if (HasBillingId) {
              output.WriteRawTag(32);
              output.WriteInt64(BillingId);
            }
            if (HasDealId) {
              output.WriteRawTag(40);
              output.WriteInt64(DealId);
            }
            if (HasExchangeDealId) {
              output.WriteRawTag(50);
              output.WriteString(ExchangeDealId);
            }
            if (HasExchangeDealType) {
              output.WriteRawTag(56);
              output.WriteEnum((int) ExchangeDealType);
            }
            if (HasBuyerReportingId) {
              output.WriteRawTag(66);
              output.WriteString(BuyerReportingId);
            }
            if (HasUseBidTranslationService) {
              output.WriteRawTag(80);
              output.WriteBool(UseBidTranslationService);
            }
            if (HasThirdPartyBuyerToken) {
              output.WriteRawTag(98);
              output.WriteString(ThirdPartyBuyerToken);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasId) {
              size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
            }
            if (HasMaxCpmMicros) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(MaxCpmMicros);
            }
            if (HasMinCpmMicros) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(MinCpmMicros);
            }
            if (HasBillingId) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(BillingId);
            }
            if (HasDealId) {
              size += 1 + pb::CodedOutputStream.ComputeInt64Size(DealId);
            }
            if (HasExchangeDealId) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(ExchangeDealId);
            }
            if (HasExchangeDealType) {
              size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ExchangeDealType);
            }
            if (HasBuyerReportingId) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(BuyerReportingId);
            }
            if (HasUseBidTranslationService) {
              size += 1 + 1;
            }
            if (HasThirdPartyBuyerToken) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(ThirdPartyBuyerToken);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(AdSlot other) {
            if (other == null) {
              return;
            }
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasMaxCpmMicros) {
              MaxCpmMicros = other.MaxCpmMicros;
            }
            if (other.HasMinCpmMicros) {
              MinCpmMicros = other.MinCpmMicros;
            }
            if (other.HasBillingId) {
              BillingId = other.BillingId;
            }
            if (other.HasDealId) {
              DealId = other.DealId;
            }
            if (other.HasExchangeDealId) {
              ExchangeDealId = other.ExchangeDealId;
            }
            if (other.HasExchangeDealType) {
              ExchangeDealType = other.ExchangeDealType;
            }
            if (other.HasBuyerReportingId) {
              BuyerReportingId = other.BuyerReportingId;
            }
            if (other.HasUseBidTranslationService) {
              UseBidTranslationService = other.UseBidTranslationService;
            }
            if (other.HasThirdPartyBuyerToken) {
              ThirdPartyBuyerToken = other.ThirdPartyBuyerToken;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 8: {
                  Id = input.ReadInt32();
                  break;
                }
                case 16: {
                  MaxCpmMicros = input.ReadInt64();
                  break;
                }
                case 24: {
                  MinCpmMicros = input.ReadInt64();
                  break;
                }
                case 32: {
                  BillingId = input.ReadInt64();
                  break;
                }
                case 40: {
                  DealId = input.ReadInt64();
                  break;
                }
                case 50: {
                  ExchangeDealId = input.ReadString();
                  break;
                }
                case 56: {
                  ExchangeDealType = (global::BidResponse.Types.Ad.Types.AdSlot.Types.ExchangeDealType) input.ReadEnum();
                  break;
                }
                case 66: {
                  BuyerReportingId = input.ReadString();
                  break;
                }
                case 80: {
                  UseBidTranslationService = input.ReadBool();
                  break;
                }
                case 98: {
                  ThirdPartyBuyerToken = input.ReadString();
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the AdSlot message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// When exchange_deal_id is set, the type of deal.  This is reported to
            /// publishers and affects how the deal is treated in the auction.
            /// </summary>
            public enum ExchangeDealType {
              [pbr::OriginalName("OPEN_AUCTION")] OpenAuction = 0,
              [pbr::OriginalName("PRIVATE_AUCTION")] PrivateAuction = 1,
              [pbr::OriginalName("PREFERRED_DEAL")] PreferredDeal = 2,
              [pbr::OriginalName("EXCHANGE_AUCTION_PACKAGE")] ExchangeAuctionPackage = 3,
            }

          }
          #endregion

        }

        public sealed partial class ImpressionTrackingResource : pb::IMessage<ImpressionTrackingResource> {
          private static readonly pb::MessageParser<ImpressionTrackingResource> _parser = new pb::MessageParser<ImpressionTrackingResource>(() => new ImpressionTrackingResource());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<ImpressionTrackingResource> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidResponse.Types.Ad.Descriptor.NestedTypes[2]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ImpressionTrackingResource() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ImpressionTrackingResource(ImpressionTrackingResource other) : this() {
            scriptUrl_ = other.scriptUrl_;
            context_ = other.context_.Clone();
            verificationParameters_ = other.verificationParameters_;
            vendorKey_ = other.vendorKey_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public ImpressionTrackingResource Clone() {
            return new ImpressionTrackingResource(this);
          }

          /// <summary>Field number for the "script_url" field.</summary>
          public const int ScriptUrlFieldNumber = 1;
          private readonly static string ScriptUrlDefaultValue = "";

          private string scriptUrl_;
          /// <summary>
          /// The URL of a Javascript resource. The URLs should not contain script
          /// tags. For example: "https://mycdn.com/tracker.js".
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string ScriptUrl {
            get { return scriptUrl_ ?? ScriptUrlDefaultValue; }
            set {
              scriptUrl_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "script_url" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasScriptUrl {
            get { return scriptUrl_ != null; }
          }
          /// <summary>Clears the value of the "script_url" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearScriptUrl() {
            scriptUrl_ = null;
          }

          /// <summary>Field number for the "context" field.</summary>
          public const int ContextFieldNumber = 2;
          private static readonly pb::FieldCodec<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Types.Context> _repeated_context_codec
              = pb::FieldCodec.ForEnum(16, x => (int) x, x => (global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Types.Context) x);
          private readonly pbc::RepeatedField<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Types.Context> context_ = new pbc::RepeatedField<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Types.Context>();
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public pbc::RepeatedField<global::BidResponse.Types.Ad.Types.ImpressionTrackingResource.Types.Context> Context {
            get { return context_; }
          }

          /// <summary>Field number for the "verification_parameters" field.</summary>
          public const int VerificationParametersFieldNumber = 3;
          private readonly static string VerificationParametersDefaultValue = "";

          private string verificationParameters_;
          /// <summary>
          /// Parameters associated with the resource that will be passed to the
          /// resource when it is loaded. The format of the parameters is dependent
          /// on the script vendor.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string VerificationParameters {
            get { return verificationParameters_ ?? VerificationParametersDefaultValue; }
            set {
              verificationParameters_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "verification_parameters" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasVerificationParameters {
            get { return verificationParameters_ != null; }
          }
          /// <summary>Clears the value of the "verification_parameters" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearVerificationParameters() {
            verificationParameters_ = null;
          }

          /// <summary>Field number for the "vendor_key" field.</summary>
          public const int VendorKeyFieldNumber = 4;
          private readonly static string VendorKeyDefaultValue = "";

          private string vendorKey_;
          /// <summary>
          /// Used to uniquely identify the verification script provider.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string VendorKey {
            get { return vendorKey_ ?? VendorKeyDefaultValue; }
            set {
              vendorKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "vendor_key" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasVendorKey {
            get { return vendorKey_ != null; }
          }
          /// <summary>Clears the value of the "vendor_key" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearVendorKey() {
            vendorKey_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as ImpressionTrackingResource);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(ImpressionTrackingResource other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (ScriptUrl != other.ScriptUrl) return false;
            if(!context_.Equals(other.context_)) return false;
            if (VerificationParameters != other.VerificationParameters) return false;
            if (VendorKey != other.VendorKey) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasScriptUrl) hash ^= ScriptUrl.GetHashCode();
            hash ^= context_.GetHashCode();
            if (HasVerificationParameters) hash ^= VerificationParameters.GetHashCode();
            if (HasVendorKey) hash ^= VendorKey.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasScriptUrl) {
              output.WriteRawTag(10);
              output.WriteString(ScriptUrl);
            }
            context_.WriteTo(output, _repeated_context_codec);
            if (HasVerificationParameters) {
              output.WriteRawTag(26);
              output.WriteString(VerificationParameters);
            }
            if (HasVendorKey) {
              output.WriteRawTag(34);
              output.WriteString(VendorKey);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasScriptUrl) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(ScriptUrl);
            }
            size += context_.CalculateSize(_repeated_context_codec);
            if (HasVerificationParameters) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(VerificationParameters);
            }
            if (HasVendorKey) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(VendorKey);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(ImpressionTrackingResource other) {
            if (other == null) {
              return;
            }
            if (other.HasScriptUrl) {
              ScriptUrl = other.ScriptUrl;
            }
            context_.Add(other.context_);
            if (other.HasVerificationParameters) {
              VerificationParameters = other.VerificationParameters;
            }
            if (other.HasVendorKey) {
              VendorKey = other.VendorKey;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  ScriptUrl = input.ReadString();
                  break;
                }
                case 18:
                case 16: {
                  context_.AddEntriesFrom(input, _repeated_context_codec);
                  break;
                }
                case 26: {
                  VerificationParameters = input.ReadString();
                  break;
                }
                case 34: {
                  VendorKey = input.ReadString();
                  break;
                }
              }
            }
          }

          #region Nested types
          /// <summary>Container for nested types declared in the ImpressionTrackingResource message type.</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static partial class Types {
            /// <summary>
            /// Additional context provided for rendering.
            /// </summary>
            public enum Context {
              [pbr::OriginalName("UNKNOWN_CONTEXT")] UnknownContext = 0,
              /// <summary>
              /// Currently not supported.
              /// </summary>
              [pbr::OriginalName("OMID")] Omid = 1,
            }

          }
          #endregion

        }

        /// <summary>
        /// An ad that will be rendered by an SDK known to the buyer. This can only
        /// be used when the BidRequest included a mobile.installed_sdk submessage.
        /// </summary>
        public sealed partial class SdkRenderedAd : pb::IMessage<SdkRenderedAd> {
          private static readonly pb::MessageParser<SdkRenderedAd> _parser = new pb::MessageParser<SdkRenderedAd>(() => new SdkRenderedAd());
          private pb::UnknownFieldSet _unknownFields;
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pb::MessageParser<SdkRenderedAd> Parser { get { return _parser; } }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public static pbr::MessageDescriptor Descriptor {
            get { return global::BidResponse.Types.Ad.Descriptor.NestedTypes[3]; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          pbr::MessageDescriptor pb::IMessage.Descriptor {
            get { return Descriptor; }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public SdkRenderedAd() {
            OnConstruction();
          }

          partial void OnConstruction();

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public SdkRenderedAd(SdkRenderedAd other) : this() {
            id_ = other.id_;
            renderingData_ = other.renderingData_;
            _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public SdkRenderedAd Clone() {
            return new SdkRenderedAd(this);
          }

          /// <summary>Field number for the "id" field.</summary>
          public const int IdFieldNumber = 1;
          private readonly static string IdDefaultValue = "";

          private string id_;
          /// <summary>
          /// The identifier for the SDK that will render the ad. Must match a
          /// mobile.installed_sdk.id sent in the corresponding bid request.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string Id {
            get { return id_ ?? IdDefaultValue; }
            set {
              id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "id" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasId {
            get { return id_ != null; }
          }
          /// <summary>Clears the value of the "id" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearId() {
            id_ = null;
          }

          /// <summary>Field number for the "rendering_data" field.</summary>
          public const int RenderingDataFieldNumber = 2;
          private readonly static string RenderingDataDefaultValue = "";

          private string renderingData_;
          /// <summary>
          /// Data to pass to the SDK in order to render the ad. This data is opaque
          /// to the publisher and to Google.
          /// </summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public string RenderingData {
            get { return renderingData_ ?? RenderingDataDefaultValue; }
            set {
              renderingData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
            }
          }
          /// <summary>Gets whether the "rendering_data" field is set</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool HasRenderingData {
            get { return renderingData_ != null; }
          }
          /// <summary>Clears the value of the "rendering_data" field</summary>
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void ClearRenderingData() {
            renderingData_ = null;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override bool Equals(object other) {
            return Equals(other as SdkRenderedAd);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public bool Equals(SdkRenderedAd other) {
            if (ReferenceEquals(other, null)) {
              return false;
            }
            if (ReferenceEquals(other, this)) {
              return true;
            }
            if (Id != other.Id) return false;
            if (RenderingData != other.RenderingData) return false;
            return Equals(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override int GetHashCode() {
            int hash = 1;
            if (HasId) hash ^= Id.GetHashCode();
            if (HasRenderingData) hash ^= RenderingData.GetHashCode();
            if (_unknownFields != null) {
              hash ^= _unknownFields.GetHashCode();
            }
            return hash;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public override string ToString() {
            return pb::JsonFormatter.ToDiagnosticString(this);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void WriteTo(pb::CodedOutputStream output) {
            if (HasId) {
              output.WriteRawTag(10);
              output.WriteString(Id);
            }
            if (HasRenderingData) {
              output.WriteRawTag(18);
              output.WriteString(RenderingData);
            }
            if (_unknownFields != null) {
              _unknownFields.WriteTo(output);
            }
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public int CalculateSize() {
            int size = 0;
            if (HasId) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
            }
            if (HasRenderingData) {
              size += 1 + pb::CodedOutputStream.ComputeStringSize(RenderingData);
            }
            if (_unknownFields != null) {
              size += _unknownFields.CalculateSize();
            }
            return size;
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(SdkRenderedAd other) {
            if (other == null) {
              return;
            }
            if (other.HasId) {
              Id = other.Id;
            }
            if (other.HasRenderingData) {
              RenderingData = other.RenderingData;
            }
            _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
          }

          [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
          public void MergeFrom(pb::CodedInputStream input) {
            uint tag;
            while ((tag = input.ReadTag()) != 0) {
              switch(tag) {
                default:
                  _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                  break;
                case 10: {
                  Id = input.ReadString();
                  break;
                }
                case 18: {
                  RenderingData = input.ReadString();
                  break;
                }
              }
            }
          }

        }

      }
      #endregion

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
